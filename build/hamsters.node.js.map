{"version":3,"sources":["webpack:///webpack/bootstrap f3168d9e191e0f88d311","webpack:///./src/core/data.js","webpack:///./src/core/habitat.js","webpack:///./src/core/logger.js","webpack:///./src/core/version.js","webpack:///./src/core/wheel.js","webpack:///./src/core/memoizer.js","webpack:///./src/core/pool.js","webpack:///./src/hamsters.js"],"names":["data","randomArray","aggregateArrays","aggregateThreadOutputs","splitArrays","splitArrayIntoSubArrays","createBlob","createDataBlob","generateWorkerBlob","processDataType","sortOutput","sortArray","getOutput","prepareOutput","prepareJob","prepareFunction","feedHamster","messageWorker","prepareMeal","prepareHamsterFood","workerURI","task","hamsterFood","input","key","hasOwnProperty","array","hamstersJob","hamster","hamstersHabitat","reactNative","postMessage","JSON","stringify","ie10","webWorker","port","prepareTransferBuffers","buffers","transferrable","buffer","push","Array","isArray","ArrayBuffer","functionBody","legacy","String","startingIndex","indexOf","endingIndex","length","substring","workerLogic","hamsterBlob","dataBlobURL","URL","createObjectURL","dataType","typedArrayFromBuffer","aggregate","threads","output","arr","order","prototype","sort","call","a","b","reverse","types","Uint32Array","Uint16Array","Uint8Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","hamstersLogger","error","textContent","Blob","BlobMaker","locateBlobBuilder","blob","append","type","getBlob","count","onSuccess","Math","round","random","reduce","concat","i","len","bufferLength","offset","set","n","threadArrays","size","ceil","slice","subarray","hamstersData","module","exports","habitat","debug","importScripts","memoize","persistence","isLegacyEnvironment","browser","isBrowser","isWebWorker","node","isNode","isReactNative","shell","isShell","supportsTransferrableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isIE10","isInternetExplorer","logicalThreads","determineGlobalThreads","Worker","locateWorkerObject","sharedWorker","locateSharedWorkerObject","selectHamsterWheel","max","navigator","hardwareConcurrency","userAgent","toLowerCase","os","cpus","SharedWorker","window","version","RegExp","isNaN","test","process","global","lacksWorkerSupport","legacyAgents","workerBlob","generateBlob","SharedHamster","e","SharedArrayBuffer","Proxy","hamstersWheel","worker","regular","logger","logBook","warning","info","infoLog","warningLog","errorLog","errorFromThread","saveLogEntry","saveToLogBook","getLogEntries","fetchLogBook","searchLogEntries","searchLogBook","message","timeStamp","Date","now","timeStampedMessage","hamstersVersion","console","warn","reject","errorMessage","lineno","filename","eventType","logBookEntries","string","searchResults","searchString","eventTypeResults","tmpEntries","findStringInLogBook","finalResults","findStringInLogBookAllTypes","total","results","majorVersion","minorVersion","patchVersion","wheel","workerScaffold","regularScaffold","reactNativeScaffold","legacyScaffold","self","params","rtn","addEventListener","incomingConnection","ports","start","incomingMessage","threadStart","eval","threadEnd","prepareReturn","returnObject","Function","onmessage","parse","resolve","setTimeout","memoizer","maxCacheEntries","cacheEntries","itemCached","isItemCached","fetchItem","fetchItemFromCache","saveItem","saveItemToCache","method","fn","cacheItem","cachedResult","cache","itemToCache","cachedItems","splice","hamstersMemoizer","pool","tasks","running","pending","fetchHamster","grabHamster","arguments","item","runTask","threadId","spawnHamster","id","workers","index","maxThreads","threadArray","registerTask","keepTrackOfThread","trainHamster","addWorkToPending","onThreadResponse","returnOutputAndRemoveTask","processQueue","shift","terminate","onThreadError","onerror","Promise","hamsterWheel","hamsterPool","hamstersjs","hamstersPool","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","processStartOptions","spawnHamsters","habitatKeys","functionToRun","scope","hamstersTask","scheduleTask","then","catch","messsage","onError","hamsters"],"mappings":"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","file":"hamsters.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f3168d9e191e0f88d311","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersHabitat from './habitat';\nimport hamstersLogger from './logger';\n\n'use strict';\n\nclass data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.randomArray = this.randomArray;\n    this.aggregateArrays = this.aggregateThreadOutputs;\n    this.splitArrays = this.splitArrayIntoSubArrays;\n    this.createBlob = this.createDataBlob;\n    this.generateWorkerBlob = this.generateWorkerBlob;\n    this.processDataType = this.processDataType;\n    this.sortOutput = this.sortArray;\n    this.getOutput = this.prepareOutput;\n    this.prepareJob = this.prepareFunction;\n    this.feedHamster = this.messageWorker;\n    this.prepareMeal = this.prepareHamsterFood;\n    this.workerURI = null;\n  }\n\n  /**\n  * @function prepareHamsterFood - Prepares message to send to thread(s)\n  * @param {object} task - Task to process\n  */\n  prepareHamsterFood(task) {\n    let hamsterFood = task.input;\n    for (var key in task.input) {\n      if (task.input.hasOwnProperty(key) && key !== 'array') {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n    hamsterFood.array = task.input.array;\n    if (task.hamstersJob && !hamsterFood.hamstersJob) {\n      hamsterFood.hamstersJob = hamstersJob;\n    }\n    return hamsterFood;\n  }\n\n  /**\n  * @function messageWorker - Prepares message to send to thread\n  * @param {worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorker(hamster, hamsterFood) {\n    if(hamstersHabitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    if (hamstersHabitat.ie10) {\n      return hamster.postMessage(hamsterFood);\n    }\n    if (hamstersHabitat.webWorker) {\n      return hamster.port.postMessage(hamsterFood);\n    }\n    return hamster.postMessage(hamsterFood, this.prepareTransferBuffers(hamsterFood));\n  }\n\n  /**\n  * @function prepareTransferBuffers - Prepares transferrable buffers for faster message passing\n  * @param {object} hamsterFood - Message to send to thread\n  */\n  prepareTransferBuffers(hamsterFood) {\n    let buffers = [];\n    let key = null;\n    if(hamstersHabitat.transferrable) {\n      for (key in hamsterFood) {\n        if (hamsterFood.hasOwnProperty(key) && hamsterFood[key]) {\n          if(hamsterFood[key].buffer) {\n            buffers.push(hamsterFood[key].buffer);\n          } else if(Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n            buffers.push(new ArrayBuffer(hamsterFood[key]));\n          }\n        }\n      }\n    }\n    return buffers;\n  }\n\n  /**\n  * @function prepareFunction - Prepares transferrable buffers for faster message passing\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareFunction(functionBody) {\n    if (!hamstersHabitat.legacy) {\n      functionBody = String(functionBody);\n      if (!hamstersHabitat.webWorker) {\n        let startingIndex = (functionBody.indexOf(\"{\") + 1);\n        let endingIndex = (functionBody.length - 1);\n        return functionBody.substring(startingIndex, endingIndex);\n      }\n    }\n    return functionBody;\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates blob uri for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    let hamsterBlob = this.createBlob(workerLogic);\n    let dataBlobURL = URL.createObjectURL(hamsterBlob);\n    return dataBlobURL;\n  }\n\n  /**\n  * @function processDataType - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  processDataType(dataType, buffer) {\n    if(hamstersHabitat.transferrable) {\n      return this.typedArrayFromBuffer(dataType, buffer);\n    }\n    return buffer;\n  }\n\n  /**\n  * @function prepareOutput - Prepares final task output\n  * @param {task} buffer - Task to prepare output for\n  */\n  prepareOutput(task) {\n    if(task.aggregate && task.threads !== 1) {\n      return this.aggregateThreadOutputs(task.output, task.dataType);\n    }\n    return task.output;\n  }\n\n  /**\n  * @function sortArray - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortArray(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'uint32': Uint32Array,\n      'uint16': Uint16Array,\n      'uint8': Uint8Array,\n      'uint8clamped': Uint8ClampedArray,\n      'int32': Int32Array,\n      'int16': Int16Array,\n      'int8': Int8Array,\n      'float32': Float32Array,\n      'float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return dataType;\n    }\n    return new types[dataType](buffer);\n  }\n\n\n  /**\n  * @function createDataBlob - Attempts to locate data blob builder, vender prefixes galore\n  */\n  locateBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return hamstersLogger.error('Environment does not support data blobs!');\n  }\n\n  /**\n  * @function createDataBlob - Creates new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function randomArray - Creates new random array\n  * @param {number} count - Number of random elements in array\n  * @param {function} onSuccess - onSuccess callback\n  */\n  randomArray(count, onSuccess) {\n    var randomArray = [];\n    while(count > 0) {\n      randomArray.push(Math.round(Math.random() * (100 - 1) + 1));\n      count -= 1;\n    }\n    onSuccess(randomArray);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType || !hamstersHabitat.transferrable) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function splitArrayIntoSubArrays - Splits a single array into multiple equal sized subarrays\n  * @param {array} array - Array to split\n  * @param {number} n - Number of subarrays to create\n  */\n  splitArrayIntoSubArrays(array, n) {\n    let i = 0;\n    let threadArrays = [];\n    let size = Math.ceil(array.length/n);\n    if(array.slice) {\n      while(i < array.length) {\n        threadArrays.push(array.slice(i, i += size));\n      }\n    } else {\n      while (i < array.length) {\n        threadArrays.push(array.subarray(i, i += size));\n      }\n    }\n    return threadArrays;\n  }\n}\n\nvar hamstersData = new data();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersData;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/data.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersData from './data';\nimport hamstersWheel from './wheel';\n\n'use strict';\n\nclass habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.debug = false;\n    this.importScripts = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.legacy = this.isLegacyEnvironment() || false;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferrable = this.supportsTransferrableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE10 = !this.isNode() && !this.isReactNative() && this.isInternetExplorer(10);\n    this.logicalThreads = this.determineGlobalThreads();\n    this.Worker = this.locateWorkerObject();\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.selectHamsterWheel = this.selectHamsterWheel;\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(typeof navigator !== 'undefined') {\n      if(typeof navigator.hardwareConcurrency !== 'undefined') {\n        max = navigator.hardwareConcurrency;\n      }\n      if(max > 20 && navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {\n        max = 20;\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return typeof Worker !== 'undefined' ? Worker : null;\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return typeof SharedWorker !== 'undefined' ? SharedWorker : null;\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return typeof window === \"object\";\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer(version) {\n    return (new RegExp('msie' + (!isNaN(version) ? ('\\\\s'+version) : ''), 'i').test(navigator.userAgent));\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.isBrowser();\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a webworker\n  */\n  isWebWorker() {\n    return typeof importScripts === \"function\";\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is reactNative\n  */\n  isReactNative() {\n    return !this.isNode() && typeof global === 'object' && !this.isBrowser();\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return this.isBrowser() && !this.isNode() && !this.isWebWorker() && !this.isReactNative();\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    // Force legacy mode for known devices that don't support threading\n    if (this.isBrowser() && !this.isReactNative()) {\n      let userAgent = navigator.userAgent;\n      let lacksWorkerSupport = (typeof this.Worker === 'undefined');\n      let legacyAgents = ['Kindle/3.0', 'Mobile/8F190', 'IEMobile'];\n      if (lacksWorkerSupport || legacyAgents.indexOf(userAgent) !== -1 || this.isIE10) {\n        this.legacy = true;\n      }\n    }\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      try {\n        let workerBlob = hamstersData.generateBlob();\n        let SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n      } catch (e) {\n        this.legacy = true;\n      }\n    }\n    // Final check, if we're in a shell environment or we have no worker object use legacy mode\n    if(!this.legacy) {\n      return this.isShell() || !this.locateWorkerObject();\n    }\n  }\n\n  /**\n  * @function supportsTransferrableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferrableObjects() {\n    return typeof Uint8Array !== 'undefined';\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports shared array buffers\n  */\n  supportsAtomicOperations() {\n    return typeof SharedArrayBuffer !== 'undefined';\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports proxy objects\n  */\n  supportsProxies() {\n    return typeof Proxy !== 'undefined';\n  }\n\n  /**\n  * @function scheduleTask - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if (this.legacy) {\n      return hamstersWheel.legacy;\n    }\n    if(this.isIE10) {\n      return './common/hamstersWheel.js';\n    }\n    if(this.reactNative) {\n      return hamstersWheel.reactNative;\n    }\n    if(this.webWorker) {\n      return hamstersWheel.worker;\n    }\n    if (this.node) {\n      return hamstersWheel.regular;\n    }\n    return hamstersData.generateWorkerBlob(hamstersWheel.regular);\n  }\n}\n\nvar hamstersHabitat = new habitat();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersHabitat;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/habitat.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersVersion from './version';\n\n'use strict';\n\nclass logger {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.logBook = {\n      error: [], \n      warning: [], \n      info: []\n    };\n    this.info = this.infoLog;\n    this.warning = this.warningLog;\n    this.error = this.errorLog;\n    this.errorFromThread = this.errorFromThread;\n    this.saveLogEntry = this.saveToLogBook;\n    this.getLogEntries = this.fetchLogBook;\n    this.searchLogEntries = this.searchLogBook;\n  }\n\n  infoLog(message) {\n    let timeStamp = Date.now();\n    let timeStampedMessage = `Hamsters.js v${hamstersVersion} Info: ${message} @ ${timeStamp}`;\n    this.saveLogEntry('info', timeStampedMessage);\n    console.info(timeStampedMessage);\n  }\n\n  warningLog(message) {\n    let timeStamp = Date.now();\n    let timeStampedMessage = `Hamsters.js v${hamstersVersion} Warning: ${message} @ ${timeStamp}`;\n    this.saveLogEntry('warning', timeStampedMessage);\n    console.warn(timeStampedMessage);\n  }\n\n  errorLog(message, reject) {\n    let timeStamp = Date.now();\n    let timeStampedMessage = `Hamsters.js v${hamstersVersion} Error: ${message} @ ${timeStamp}`;\n    this.saveLogEntry('error', timeStampedMessage);\n    console.error(timeStampedMessage);\n    if(reject) {\n      reject(timeStampedMessage);\n    } else {\n      return timeStampedMessage;\n    }\n  }\n\n  errorFromThread(error, reject) {\n    let errorMessage = `#${error.lineno} in ${error.filename}: ${error.message}`;\n    this.errorLog(errorMessage, reject);\n  }\n\n  saveToLogBook(eventType, message) {\n    this.logBook[eventType].push(message);\n  }\n\n  fetchLogBook(eventType) {\n    if(eventType) {\n      return this.logBook[eventType];\n    }\n    return this.logBook;\n  }\n\n  findStringInLogBook(logBookEntries, string) {\n    let searchResults = [];\n    let i = 0;\n    for (i; i < logBookEntries.length; i++) {\n      if(logBookEntries[i].indexOf(string) !== -1) {\n        searchResults.push(logBookEntries[i]);\n      }\n    }\n    return searchResults;\n  }\n\n  findStringInLogBookAllTypes(logBook, searchString) {\n    let searchResults = [];\n    let key, eventTypeResults, tmpEntries = null;\n    for(key in logBook) {\n      if(logBook.hasOwnProperty(key)) {\n        tmpEntries = logBook[key];\n        eventTypeResults = this.findStringInLogBook(tmpEntries, searchString);\n      }\n    }\n    return searchResults;\n  }\n\n  searchLogBook(searchString, eventType) {\n    let finalResults = [];\n    if(eventType) {\n      finalResults = this.findStringInLogBook(this.logBook[eventType], string);\n    } else {\n      finalResults = this.findStringInLogBookAllTypes(this.logBook);\n    }\n    return {\n      total: finalResults.length,\n      results: finalResults\n    };\n  }   \n}\n\nvar hamstersLogger = new logger();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersLogger;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/logger.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nconst majorVersion = 5;\nconst minorVersion = 1;\nconst patchVersion = 1;\nconst hamstersVersion = `${majorVersion}.${minorVersion}.${patchVersion}`;\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersVersion;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/version.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersData from './data';\nimport hamstersHabitat from './habitat';\n\n'use strict';\n\nclass wheel {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.worker = this.workerScaffold;\n    this.regular = this.regularScaffold;\n    this.reactNative = this.reactNativeScaffold;\n    this.legacy = this.legacyScaffold;\n  }\n\n  /**\n  * @function workerScaffold - Provides worker body for library functionality when used within a worker [threads inside threads]\n  */\n  workerScaffold() {\n    'use strict';\n\n    if(typeof self === 'undefined') {\n      self = (global || window || this);\n    }\n\n    self.params = {};\n    self.rtn = {};\n\n    addEventListener('connect', (incomingConnection) => {\n      const port = incomingConnection.ports[0];\n      port.start();\n      port.addEventListener('message', (incomingMessage) => {\n        params = incomingMessage.data;\n        rtn = {\n          data: [],\n          dataType: params.dataType,\n          threadStart: Date.now()\n        };\n        if(params.importScripts) {\n          self.importScripts(params.importScripts);\n        }\n        eval(\"(\" + params.hamstersJob + \")\")();\n        rtn.threadEnd = Date.now();\n        port.postMessage(rtn);\n      }, false);\n    }, false);\n  }\n\n  /**\n  * @function workerScaffold - Provides worker body for library functionality\n  */\n  regularScaffold() {\n    'use strict';\n\n    if(typeof self === 'undefined') {\n      let self = (global || window || this);\n    }\n\n    self.params = {};\n    self.rtn = {};\n\n    function prepareReturn(returnObject) {\n      let dataType = returnObject.dataType;\n      if(dataType) {\n        returnObject.data = typedArrayFromBuffer(dataType, returnObject.data);\n      }\n      return returnObject;\n    }\n\n    function typedArrayFromBuffer(dataType, buffer) {\n      const types = {\n        'uint32': Uint32Array,\n        'uint16': Uint16Array,\n        'uint8': Uint8Array,\n        'uint8clamped': Uint8ClampedArray,\n        'int32': Int32Array,\n        'int16': Int16Array,\n        'int8': Int8Array,\n        'float32': Float32Array,\n        'float64': Float64Array\n      };\n      if (!types[dataType]) {\n        return buffer;\n      }\n      return new types[dataType](buffer);\n    }\n\n    function prepareTransferBuffers(hamsterFood) {\n      let buffers = [];\n      let key = null;\n      for (key in hamsterFood) {\n        if (hamsterFood.hasOwnProperty(key) && hamsterFood[key]) {\n          if(hamsterFood[key].buffer) {\n            buffers.push(hamsterFood[key].buffer);\n          } else if(Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n            buffers.push(new ArrayBuffer(hamsterFood[key]));\n          }\n        }\n      }\n      return buffers;\n    }\n\n    addEventListener('message', (incomingMessage) => {\n      params = incomingMessage.data;\n      rtn = {\n        data: [],\n        dataType: (params.dataType ? params.dataType.toLowerCase() : null),\n        threadStart: Date.now()\n      };\n      if(params.importScripts) {\n        self.importScripts(params.importScripts);\n      }\n      new Function(params.hamstersJob)();\n      rtn.threadEnd = Date.now();\n      postMessage(prepareReturn(rtn), prepareTransferBuffers(rtn));\n    });\n  }\n\n  reactNativeScaffold() {\n   'use strict';\n\n    self.params = {};\n    self.rtn = {};\n\n    self.onmessage = function(incomingMessage) {\n      params = JSON.parse(incomingMessage.data);\n      rtn = {\n        data: [],\n        dataType: (params.dataType ? params.dataType.toLowerCase() : null),\n        threadStart: Date.now()\n      };\n      if(params.importScripts) {\n        self.importScripts(params.importScripts);\n      }\n      new Function(params.hamstersJob)();\n      rtn.threadEnd = Date.now();\n      postMessage(prepareReturn(rtn));\n    };\n\n    function prepareReturn(returnObject) {\n      var dataType = returnObject.dataType;\n      if(dataType) {\n        returnObject.data = typedArrayFromBuffer(dataType, returnObject.data);\n      }\n      return JSON.stringify(returnObject);\n    }\n\n    function typedArrayFromBuffer(dataType, buffer) {\n      var types = {\n        'uint32': Uint32Array,\n        'uint16': Uint16Array,\n        'uint8': Uint8Array,\n        'uint8clamped': Uint8ClampedArray,\n        'int32': Int32Array,\n        'int16': Int16Array,\n        'int8': Int8Array,\n        'float32': Float32Array,\n        'float64': Float64Array\n      };\n      if (!types[dataType]) {\n        return buffer;\n      }\n      return new types[dataType](buffer);\n    }\n  }\n\n  /**\n  * @function legacyScaffold - Provides library functionality for legacy devices\n  */\n  legacyScaffold(params, resolve) {\n    setTimeout(() => {\n      if(typeof self === 'undefined') {\n        var self = (global || window || this);\n      }\n      self.params = params;\n      self.rtn = {\n        data: [],\n        threadStart: Date.now()\n      };\n      params.hamstersJob();\n      rtn.threadEnd = Date.now();\n      resolve(rtn);\n    }, 4); //4ms delay (HTML5 spec minimum), simulate threading\n  }\n};\n\nvar hamstersWheel = new wheel();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersWheel;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/wheel.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nclass memoizer {\n  \n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.maxCacheEntries = 25;\n    this.cacheEntries = [];\n    this.itemCached = this.isItemCached;\n    this.fetchItem = this.fetchItemFromCache;\n    this.saveItem = this.saveItemToCache;\n  }\n\n  /**\n  * @function isItemCached - Checks for existing data in cache\n  * @param {object} input - Provided library execution options\n  * @param {method} functionToRun - Function to execute\n  * @return {object} Execution results from cache, or false\n  */\n  isItemCached(input, method) {\n  \treturn !!(this.fetchItem({fn: method, data: input})) || false;\n  }\n\n  /**\n  * @function fetchItemFromCache - Fetches cache item from cache\n  * @param {object} cacheItem - Cache item to fetch\n  * @return {object} CacheResults, or false\n  */\n  fetchItemFromCache(cacheItem) {\n  \tlet cachedResult = null;\n  \tfor(var key in this.cache) {\n  \t\tif(this.cache.hasOwnProperty(key)) {\n  \t\t\tif(cacheItem[key].fn === cacheItem.fn) {\n  \t\t\t\tif(cacheItem[key].input === cacheItem.data) {\n  \t\t\t\t\tcachedResult = cacheItem[key].input;\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n  \treturn cachedResult || false;\n  }\n\n  /**\n  * @function isItemCached - Checks for existing data in cache\n  * @param {method} functionToRun - Function to execute\n  * @param {object} data - Execution results to cache\n  */\n  saveItemToCache(method, data, maxCacheEntries) {\n  \tlet itemToCache = {\n  \t\tfn: method,\n  \t\tinput: data\n  \t};\n  \tlet cachedItems = this.cacheEntries;\n  \tif(cachedItems.length < maxCacheEntries) {\n  \t\tcachedItems.push(itemToCache);\n  \t} else {\n  \t\tcachedItems.splice(0, 0, itemToCache); \n  \t}\n  \tthis.cacheEntries = cachedItems;\n  }\n}\n\nvar hamstersMemoizer = new memoizer();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersMemoizer;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/memoizer.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersData from './data';\nimport hamstersHabitat from './habitat';\nimport hamstersLogger from './logger';\n\n'use strict';\n\nclass pool {\n\t\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.tasks = [];\n\t  this.threads = [];\n    this.running = [];\n    this.pending = [];\n    this.fetchHamster = this.grabHamster;\n  }\n\n  /**\n  * @function grabHamster - Adds task to queue waiting for available thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(array, task, persistence, wheel, resolve, reject) {\n  \tthis.pending.push(arguments);\n  }\n\n  /**\n  * @function grabHamster - Invokes processing of next item in queue\n  * @param {object} item - Task to process\n  */\n  processQueue(item) {\n  \treturn this.runTask(item[0], item[1], item[2], item[3], item[4]);\n  }\n\n  /**\n  * @function grabHamster - Keeps track of threads running, scoped globally and to task\n  * @param {number} threadId - Id of thread\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  */\n  grabHamster(threadId, persistence) {\n    if(persistence) {\n      return this.threads[threadId];\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    task.workers.push(id); //Keep track of threads poold to current task\n    this.running.push(id); //Keep track of all currently running threads\n  }\n\n  /**\n  * @function registerTask - Adds task to execution pool based on id\n  * @param {number} id - Id of task to register\n  */\n  registerTask(id) {\n    let index = this.tasks.push(id);\n    return this.tasks[(index - 1)];\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {number} maxThreds - Max number of threads for this client\n  */\n  spawnHamsters(persistence, maxThreads) {\n    hamstersLogger.info(`${maxThreads} Logical Threads Detected, Spawning ${maxThreads} Hamsters`);\n    for (maxThreads; maxThreads > 0; maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n    hamstersLogger.info(`${this.threads.length} hamsters ready and awaiting instructions`);\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {string} workerURI - URI for created library blob object \n  */\n  spawnHamster() {\n    if (hamstersHabitat.webWorker) {\n      return new hamstersHabitat.SharedWorker(hamstersHabitat.selectHamsterWheel(), 'SharedHamsterWheel');\n    }\n    return new hamstersHabitat.Worker(hamstersHabitat.selectHamsterWheel());\n  }\n\n  /**\n  * @function prepareMeal - Prepares message to send to a thread and invoke execution\n  * @param {object} threadArray - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @return {object} hamsterFood - Prepared message to send to a thread\n  */\n  prepareMeal(threadArray, task) {\n    let hamsterFood = {\n    \tarray: threadArray\n    };\n    for (var key in task.input) {\n      if (task.input.hasOwnProperty(key) && ['array', 'threads'].indexOf(key) == -1) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n    return hamsterFood;\n  }\n\n  /**\n  * @function hamsterWheel - Runs function using thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(array, task, persistence, resolve, reject) {\n  \tlet threadId = this.running.length;\n    let hamsterFood = this.prepareMeal(array, task);\n    this.registerTask(task.id);\n    this.keepTrackOfThread(task, threadId);\n    if(hamstersHabitat.legacy) {\n      wheel(hamsterFood, resolve, reject);\n    } else {\n      let hamster = this.grabHamster(threadId, persistence);\n      this.trainHamster(threadId, task, hamster, persistence, resolve, reject);\n      hamstersData.feedHamster(hamster, hamsterFood);\n    }\n    task.count += 1; //Increment count, thread is running\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {object} array - Provided library functionality options for this task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(array, task, persistence, maxThreads, resolve, reject) {\n    if(maxThreads === this.running.length) {\n      return this.addWorkToPending(array, task, persistence, resolve, reject);\n    }\n    return this.runTask(array, task, persistence, resolve, reject);\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    let output = hamstersData.getOutput(task, hamstersHabitat.transferrable);\n    if (task.sort) {\n      output = hamstersData.sortOutput(output, task.sort);\n    }\n    this.tasks[task.id] = null; //Clean up our task, not needed any longer\n    resolve({\n      data: output\n    });\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {worker} hamster - Thread to train\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(threadId, task, hamster, persistence, resolve, reject) {\n    let pool = this;\n    // Handle successful response from a thread\n    function onThreadResponse(message) {\n      let results = message.data;\n      pool.running.splice(pool.running.indexOf(threadId), 1); //Remove thread from running pool\n    \ttask.workers.splice(task.workers.indexOf(threadId), 1); //Remove thread from task running pool\n      // String only communcation for rn...in 2k18\n      if(hamstersHabitat.reactNative) {\n        task.output[threadId] = JSON.parse(results.data);\n      } else {\n        task.output[threadId] = results.data;\n      }\n      if (task.workers.length === 0 && task.count === task.threads) {\n        pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (pool.pending.length !== 0) {\n        pool.processQueue(pool.pending.shift());\n      }\n      if (!persistence && !hamstersHabitat.webWorker) {\n        hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n      }\n    }\n    // Handle error response from a thread\n    function onThreadError(error) {\n      hamstersLogger.errorFromThread(error, reject);\n    }\n    // Register on message/error handlers\n    if (hamstersHabitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onerror = onThreadError;\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onerror = onThreadError;\n    }\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Scaffold to execute login within\n  * @param {number} maxThreads - Maximum number of threads for this client\n  */\n  scheduleTask(task, persistence, maxThreads) {\n    let threadArrays = [];\n\t  if(task.input.array && task.threads !== 1) {\n\t    threadArrays = hamstersData.splitArrays(task.input.array, task.threads); //Divide our array into equal array sizes\n\t  }\n  \treturn new Promise((resolve, reject) => {\n      let i = 0;\n      while (i < task.threads) {\n      \tif(threadArrays && task.threads !== 1) {\n        \tthis.hamsterWheel(threadArrays[i], task, persistence, maxThreads, resolve, reject);\n\t\t    } else {\n        \tthis.hamsterWheel(task.input.array, task, persistence, maxThreads, resolve, reject);\n\t\t    }\n        i += 1;\n      }\n    });\n  }\n}\n\nvar hamsterPool = new pool();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamsterPool;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/pool.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersVersion from './core/version';\nimport hamstersHabitat from './core/habitat';\nimport hamstersPool from './core/pool';\nimport hamstersData from './core/data';\nimport hamstersWheel from './core/wheel';\nimport hamstersLogger from './core/logger';\nimport hamstersMemoizer from './core/memoizer';\n\n'use strict';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.version = hamstersVersion;\n    this.maxThreads = hamstersHabitat.logicalThreads;\n    this.habitat = hamstersHabitat;\n    this.data = hamstersData;\n    this.pool = hamstersPool;\n    this.logger = hamstersLogger;\n    this.memoizer = hamstersMemoizer;\n    this.run = this.hamstersRun;\n    this.promise = this.hamstersPromise;\n    this.init = this.initializeLibrary;\n  }\n\n  /**\n  * @function initializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    this.logger.info(`Preparing the hamster wheels & readying hamsters`);\n    if (typeof startOptions !== 'undefined') {\n      this.processStartOptions(startOptions);\n    }\n    if(!hamstersHabitat.legacy && hamstersHabitat.persistence) {\n      hamstersPool.spawnHamsters(hamstersHabitat.persistence, this.maxThreads);\n    }\n    delete this.init;\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    // Add options to override library environment behavior\n    let habitatKeys = [\n      'worker', 'sharedworker',\n      'legacy', 'webworker',\n      'reactnative', 'atomics',\n      'proxies', 'transferrable',\n      'browser', 'shell', \n      'node', 'debug',\n      'persistence', 'importscripts'\n    ];\n    for (var key in startOptions) {\n      if (startOptions.hasOwnProperty(key)) {\n        if (habitatKeys.indexOf(key.toLowerCase()) !== -1) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          this[key] = startOptions[key];\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    if(typeof this.habitat.Worker === 'function') {\n      this.habitat.legacy = false;\n    }\n  }\n\n  /**\n  * @constructor\n  * @function hamstersTask - Constructs a new task object from provided arguments\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @param {object} scope - Reference to main library context\n  * @return {object} new Hamsters.js task\n  */\n  hamstersTask(params, functionToRun, scope) {\n    this.id = scope.pool.tasks.length;\n    this.count = 0;\n    this.aggregate = (params.aggregate || false);\n    this.output = [];\n    this.workers = [];\n    this.memoize = (params.memoize || false);\n    this.dataType = (params.dataType ? params.dataType.toLowerCase() : null);\n    this.input = params;\n    // Do not modify function if we're running on the main thread for legacy fallback\n    if(hamstersHabitat.legacy) {\n      this.threads = 1;\n      this.input.hamstersJob = functionToRun;\n    } else {\n      this.threads = (params.threads || 1);\n      this.input.hamstersJob = scope.data.prepareJob(functionToRun);\n    }\n  }\n\n  /**\n  * @async\n  * @function hamstersPromise - Calls library functionality using async promises\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @return {array} Results from functionToRun.\n  */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      let task = new this.hamstersTask(params, functionToRun, this);\n      this.pool.scheduleTask(task, this.habitat.persistence, this.maxThreads).then((results) => {\n        resolve(results);\n      }).catch((error) => {\n        hamstersLogger.error(error.messsage, reject);\n      });\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @param {function} onSuccess - Function to call upon successful execution\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    let task = new this.hamstersTask(params, functionToRun, this);\n    this.pool.scheduleTask(task, this.habitat.persistence, this.maxThreads).then((results) => {\n      onSuccess(results);\n    }).catch((error) => {\n      hamstersLogger.error(error.messsage, onError);\n    });\n  }\n}\n\nvar hamsters = new hamstersjs();\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamsters;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/hamsters.js"],"sourceRoot":""}