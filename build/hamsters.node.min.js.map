{"version":3,"file":"hamsters.node.min.js","mappings":"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","sources":["webpack://hamsters/webpack/universalModuleDefinition","webpack://hamsters/webpack/bootstrap","webpack://hamsters/./scaffold/legacy.js","webpack://hamsters/./scaffold/shared.js","webpack://hamsters/webpack/runtime/define property getters","webpack://hamsters/webpack/runtime/hasOwnProperty shorthand","webpack://hamsters/./core/habitat.js","webpack://hamsters/./core/pool.js","webpack://hamsters/./core/data.js","webpack://hamsters/./core/task.js","webpack://hamsters/./scaffold/regular.js","webpack://hamsters/./feature/stores/NodeStore.js","webpack://hamsters/./feature/stores/WebStore.js","webpack://hamsters/./feature/memoize.js","webpack://hamsters/./feature/distribute.js","webpack://hamsters/./feature/observable.js","webpack://hamsters/./hamsters.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hamsters\"] = factory();\n\telse\n\t\troot[\"hamsters\"] = factory();\n})(global, () => {\nreturn ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Legacy {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor(hamsters) {\n      this.hamsters = hamsters;\n      this.scaffold = (params, resolve, reject) => {\n        var rtn = {\n          data: [],\n          dataType: (typeof params.dataType !== \"undefined\" ? params.dataType : null)\n        };\n        if(this.hamsters.habitat.reactNative) {\n          self.rtn = rtn;\n        }\n        if(this.hamsters.habitat.node || this.hamsters.habitat.isIE) {\n          eval(params.hamstersJob);\n        } else {\n          params.hamstersJob();\n        }\n        resolve(rtn.data);\n      }\n    }\n  }\n  \n  export default Legacy;\n  ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Shared {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n      this.scaffold = function() {\n        self.params = {};\n        self.rtn = {};\n    \n        addEventListener('connect', (incomingConnection) => {\n          var port = incomingConnection.ports[0];\n          port.start();\n          port.addEventListener('message', (incomingMessage) => {\n            this.params = incomingMessage.data;\n            this.rtn = {\n              data: [],\n              dataType: this.params.dataType\n            };\n            eval(\"(\" + this.params.hamstersJob + \")\")();\n            port.postMessage(this.rtn);\n          }, false);\n        }, false);\n      }\n    }\n  }\n  \n  export default Shared;\n  ","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.debug = false;\n    this.importScripts = null;\n    this.relay = null;\n    this.RTCPeerConnection = this.getRTCPeerConnection();\n    this.RTCSessionDescription = this.getRTCSessionDescription();\n    this.RTCIceCandidate = this.getRTCIceCandidate();\n    this.memoize = false;\n    this.persistence = true;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferable = this.supportsTransferableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE = this.isInternetExplorer();\n    this.selectHamsterWheel = this.selectHamsterWheel.bind(this);\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.locateBlobBuilder = this.findAvailableBlobBuilder();\n    this.legacy = this.isLegacyEnvironment();\n    this.Worker = this.locateWorkerObject();\n    this.maxThreads = this.determineGlobalThreads();\n    this.keys = this.getHabitatKeys();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(this.browser && typeof navigator.hardwareConcurrency !== \"undefined\") {\n      max = navigator.hardwareConcurrency;\n      if(this.isFirefox()) {\n        max = (max > 20 ? 20 : max);\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function isFirefox - Detect firefox browser\n  */\n  isFirefox() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return (typeof Worker !== 'undefined' ? Worker : false);\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return (typeof SharedWorker !== 'undefined' ? SharedWorker : false);\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return (typeof window === \"object\");\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.indexOf(\"MSIE \") !== -1 || navigator.userAgent.indexOf(\"Trident/\") !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return (typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser);\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a web worker\n  */\n  isWebWorker() {\n    return (typeof importScripts === \"function\" && !this.isReactNative());\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is React Native\n  */\n  isReactNative() {\n    return (typeof navigator !== \"undefined\" && typeof navigator.product !== \"undefined\" && navigator.product === \"ReactNative\");\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return ((typeof navigator === \"undefined\") && !this.isNode() && !this.isWebWorker() && !this.isReactNative());\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = !!!this.Worker;\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy;\n  }\n\n  /**\n  * @function supportsSharedWorkers - Detects if execution environment supports SharedWorkers\n  */\n  supportsSharedWorkers() {\n    return (typeof SharedWorker !== 'undefined');\n  }\n\n  /**\n  * @function findAvailableBlobBuilder - Attempts to locate a data blob builder, with vendor prefixes\n  */\n  findAvailableBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return 'Environment does not support data blobs!';\n  }\n\n  /**\n  * @function createDataBlob - Creates a new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates a blob URI for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    return URL.createObjectURL(this.createDataBlob(this.generateWorkerString(workerLogic)));\n  }\n\n  generateWorkerString(workerLogic) {\n    return `(${workerLogic.toString()})();`;\n  }\n  /**\n  * @function supportsTransferableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferableObjects() {\n    return (typeof Uint8Array !== 'undefined');\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports SharedArrayBuffers\n  */\n  supportsAtomicOperations() {\n    return (typeof SharedArrayBuffer !== 'undefined');\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports Proxy objects\n  */\n  supportsProxies() {\n    return (typeof Proxy !== 'undefined');\n  }\n\n  /**\n  * @function selectHamsterWheel - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.hamsters.scaffold.custom) {\n      return this.hamsters.scaffold.custom;\n    }\n    if(this.isIE) {\n      return this.hamsters.scaffold.legacy.scaffold;\n    }\n    if(this.reactNative) {\n      return 'reactNativeHamster.js';\n    }\n    if (this.node) {\n      return './node_modules/hamsters.js/build/common/node.js';\n    }\n    return 'data:text/javascript,' + encodeURIComponent(this.generateWorkerString(this.hamsters.scaffold.regular.scaffold));\n  }\n\n  getRTCPeerConnection() {\n    if(typeof RTCPeerConnection === 'undefined') {\n      return null;\n    }\n    return RTCPeerConnection;\n  }\n\n  getRTCSessionDescription() {\n    if(typeof RTCSessionDescription === 'undefined') {\n      return null;\n    }\n    return RTCSessionDescription;\n  }\n\n  getRTCIceCandidate() {\n    if(typeof RTCIceCandidate === 'undefined') {\n      return null;\n    }\n    return RTCIceCandidate;\n  }\n\n  /**\n  * @function getHabitatKeys - Returns keys for this Habitat instance\n  */\n  getHabitatKeys() {\n    return [\n      'worker','sharedworker',\n      'legacy','proxies',\n      'reactnative','atomics',\n      'transferable','browser',\n      'shell','node','debug',\n      'persistence','importscripts',\n      'maxthreads', 'parentport',\n      'webworker', 'relay',\n      'rtcpeerconnection', 'rtcicecandidate',\n      'rtcsessiondescription'\n    ];\n  }\n}\n\nexport default Habitat;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Pool {\n\t\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.threads = new hamsters.observable([]);\n    this.running = new hamsters.observable([]);\n    this.pending = new hamsters.observable([]);\n    this.fetchHamster = this.getAvailableThread;\n  }\n\n  /**\n  * @function fetchHamster - Adds task to queue waiting for available thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(index, task, resolve, reject) {\n    if(this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[task.scheduler.count].enqueued_at = Date.now();\n    }\n    this.pending.push({\n      index: index,\n      count: task.scheduler.count,  \n      task: task,\n      resolve: resolve,\n      reject: reject\n    });\n  }\n\n  /**\n  * @function processQueuedItem - Invokes processing of next item in queue\n  * @param {object} item - Task to process\n  */\n  processQueuedItem(hamster, item) {\n    if(this.hamsters.habitat.debug) {\n      item.task.scheduler.metrics.threads[item.count].dequeued_at = Date.now();\n    }\n  \treturn this.runTask(hamster, item.index, item.task, item.resolve, item.reject);\n  }\n\n  /**\n  * @function getAvailableThread- Keeps track of threads running, scoped globally and to task\n  * @param {number} threadId - Id of thread\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  */\n  getAvailableThread(threadId) {\n    if(this.hamsters.habitat.persistence) {\n      return this.threads.get(threadId);\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    // if(this.hamsters.habitat.debug) {\n    //   task.scheduler.metrics.threads[id].started_at = Date.now();\n    // }\n    task.scheduler.workers.push(id); //Keep track of threads scoped to current task\n    this.running.push(id); //Keep track of all currently running threads\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {number} maxThreds - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    for (maxThreads; maxThreads > 0; maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    const { selectHamsterWheel, Worker } = this.hamsters.habitat;\n    const hamsterWheel = selectHamsterWheel();\n    return new Worker(hamsterWheel);\n  }\n\n  /**\n   * @function prepareMeal\n   * @description Prepares message to send to a thread and invoke execution\n   * @param {number} index - Index of the subarray to process\n   * @param {number} subTaskId - Subtask ID\n   * @param {object} task - Provided library functionality options for this task\n   * @returns {object} - Prepared message to send to a thread\n   */\n  prepareMeal(index, task) {\n    // Prepare the base hamsterFood object\n    const hamsterFood = {\n      array: task.input.array && task.input.array.length !== 0 ? \n            this.hamsters.data.getSubArrayFromIndex(index, task.input.array) : [],\n      index: index\n    };\n\n    // Add sharedBuffer if it exists\n    if (typeof task.scheduler.sharedBuffer !== 'undefined') {\n      hamsterFood.sharedBuffer = task.scheduler.sharedBuffer;\n    }\n\n    // List of excluded keys\n    const excludedKeys = new Set(['array', 'threads', 'sharedArray']);\n\n    // Iterate over task.input properties and add to hamsterFood\n    for (const key in task.input) {\n      if (task.input.hasOwnProperty(key) && !excludedKeys.has(key)) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n\n    return hamsterFood;\n  }\n\n  /**\n  * @function hamsterWheel - Runs function using thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, index, task, resolve, reject) {\n  \tlet threadId = this.running.length();\n    index.id = threadId;\n    let hamsterFood = this.prepareMeal(index, task);\n    this.keepTrackOfThread(task, threadId);\n    if(this.hamsters.habitat.legacy) {\n      this.hamsters.habitat.legacyWheel(this.hamsters.habitat, hamsterFood, resolve, reject);\n    } else {\n      this.hamsters.pool.trainHamster(index, task, threadId, hamster, resolve, reject);\n      this.hamsters.data.feedHamster(hamster, hamsterFood);\n    }\n    task.scheduler.count += 1;\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {object} array - Provided library functionality options for this task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(index, task, resolve, reject) {\n    if(this.hamsters.habitat.maxThreads <= this.running.length()) {\n      return this.addWorkToPending(index, task, resolve, reject);\n    }\n    let hamster = this.fetchHamster(this.running.length());\n    return this.runTask(hamster, index, task, resolve, reject);\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - Gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    if(task.scheduler.sharedBuffer) {\n      task.output = this.hamsters.data.processDataType(task.input.dataType, task.scheduler.sharedBuffer);\n    }\n    if(task.input.aggregate) {\n      task.output = this.hamsters.data.aggregateThreadOutputs(task.output, task.input.dataType);\n    }\n    if(task.input.sort) {\n      task.output = this.hamsters.data.sortOutput(task.output, task.input.sort)\n    }\n    if (this.hamsters.habitat.debug) {\n      const completedAt = Date.now();\n      const startedAt = task.scheduler.metrics.started_at;\n      task.scheduler.metrics.completed_at = completedAt;\n      console.info(`Hamsters.js Task Completed In ${completedAt - startedAt}ms`);\n    }\n    if(task.input.distribute) {\n      resolve(task);\n    } else {\n      resolve(task.output);\n    }\n  }\n\n  removeFromRunning(task, threadId) {\n    this.running.splice(this.running.indexOf(threadId), 1); //Remove thread from running pool\n    task.scheduler.workers.splice(task.scheduler.workers.indexOf(threadId), 1); //Remove thread from task running pool\n  }\n\n  processReturn(habitat, index, message, task) {\n    let output = message.data;\n    if(habitat.reactNative) {\n      output = JSON.parse(message).data;\n    } else if(typeof message.data.data !== \"undefined\") {\n      output = message.data.data;\n    }\n    if(task.scheduler.threads !== 1 && task.input.aggregate) {\n      this.hamsters.data.addThreadOutputWithIndex(task, index, output);\n    } else {\n      task.output.push(output);\n    }\n  }\n\n  setOnMessage(hamster, onThreadResponse, habitat, reject) {\n    if (habitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onmessageerror = reject;\n      hamster.port.onerror = reject;\n    }\n    if(habitat.node) {\n      hamster.once('message', onThreadResponse);\n      hamster.once('onmessageerror', reject);\n      hamster.once('error', reject);\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = reject;\n      hamster.error = reject;\n    }\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {worker} hamster - Thread to train\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(index, task, threadId, hamster, resolve, reject) {\n    let onThreadResponse = (message) => {\n      this.hamsters.pool.processReturn(this.hamsters.habitat, index, message, task);\n      // if(this.hamsters.habitat.debug) {\n      //   task.scheduler.metrics.threads[threadId].completed_at = Date.now();\n      // }\n      this.hamsters.pool.removeFromRunning(task, threadId);\n      if (task.scheduler.workers.length === 0 && task.scheduler.count === task.scheduler.threads) {\n        this.hamsters.pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (this.hamsters.pool.pending.length() !== 0) {\n        return this.hamsters.pool.processQueuedItem(hamster, this.hamsters.pool.pending.shift());\n      }\n      if(!this.hamsters.habitat.persistence) {\n        return hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n      }\n    };\n    this.hamsters.pool.setOnMessage(hamster, onThreadResponse, this.hamsters.habitat, reject);\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Scaffold to execute login within\n  * @param {number} maxThreads - Maximum number of threads for this client\n  */\n  scheduleTask(task, resolve, reject) {\n    // if(this.hamsters.habitat.debug) {\n    //   let metrics = task.scheduler.metrics;\n    //   metrics.started_at = Date.now();\n    //   return new Promise((resolve, reject) => {\n    //     while (i < task.scheduler.threads) {\n    //       metrics.threads.push({\n    //         created_at: Date.now(),\n    //         started_at: null,\n    //         enqueued_at: null,\n    //         dequeued_at: null,\n    //         completed_at: null\n    //       });\n    //       this.hamsterWheel(task.scheduler.indexes[i], task, resolve, reject);\n    //       i += 1;\n    //     }\n    //   });\n    // }\n    //Process with debug mode disabled, no need for time stamping\n  \t// return new Promise((resolve, reject) => {\n      if(task.input.distribute && task.type !== 'task-response') {\n        this.hamsters.distribute.distributeTask(task, resolve, reject);\n      } else {\n        let i = 0;\n        while (i < task.scheduler.threads) {\n          this.hamsterWheel(task.scheduler.indexes[i], task, resolve, reject);\n          i += 1;\n        }\n      }\n    // });\n  }\n}\n\nexport default Pool;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters; // Set the hamsters object as a property of Data class\n    this.getSubArrayFromIndex = this.getSubArrayUsingIndex.bind(this); // Bind getSubArrayUsingIndex function\n    this.getSubArrayIndexes = this.calculateIndexes.bind(this); // Bind calculateIndexes function\n    this.sortOutput = this.sortTaskOutput.bind(this); // Bind sortTaskOutput function\n    this.aggregateThreadOutputs = this.aggregateThreadOutputs.bind(this);\n    this.processDataType = this.typedArrayFromBuffer;\n    this.prepareFunction = this.prepareWorkerTask.bind(this); // Bind prepareWorkerTask function\n    this.feedHamster = this.messageWorkerThread.bind(this); // Bind messageWorkerThread function\n    this.getBufferSize = this.getBufferSize;\n    this.createSharedBuffer = this.createSharedBuffer.bind(this);\n    this.getDataType = this.getDataType;\n    this.setupSharedArrayBuffer = this.setupSharedArrayBuffer.bind(this);\n  }\n\n  /**\n  * @function messageWorkerThread - Prepares message to send to thread\n  * @param {object} hamstersHabitat - Hamsters Habitat instance\n  * @param {Worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorkerThread(hamster, hamsterFood) {\n    if(this.hamsters.habitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    return hamster.postMessage(hamsterFood, this.hamsters.data.getTransferableObjects(hamsterFood));\n  }\n\n  getTransferableObjects(obj) {\n    const typedArrayBuffers = [];\n    const transferableObjects = [];\n    const typedArrayTypes = [\n      'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', \n      'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n    ];\n    const otherTransferables = [\n      'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n    ];\n    const globalContext = typeof window !== 'undefined' ? window : global;\n  \n    for (const prop in obj) {\n      for (const type of typedArrayTypes) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          typedArrayBuffers.push(obj[prop].buffer);\n          break;\n        }\n      }\n  \n      for (const type of otherTransferables) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          transferableObjects.push(obj[prop]);\n          break;\n        }\n      }\n    }\n  \n    return typedArrayBuffers.concat(transferableObjects);\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'Uint32': Uint32Array,\n      'Uint16': Uint16Array,\n      'Uint8': Uint8Array,\n      'Uint8clamped': Uint8ClampedArray,\n      'Int32': Int32Array,\n      'Int16': Int16Array,\n      'Int8': Int8Array,\n      'Float32': Float32Array,\n      'Float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return buffer;\n    }\n    return new types[dataType](buffer);\n  }\n\n  /**\n  * @function prepareWorkerTask - Prepares function for thread, strips whitespace\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareWorkerTask(functionBody) {\n    let functionString = String(functionBody);\n    let isAsync = functionString.trim().startsWith('async');\n    functionBody = functionString.substring(functionString.indexOf(\"{\") + 1, functionString.lastIndexOf(\"}\"));\n    if(isAsync) {\n      return `(async () => {\n        ${functionBody}\n      })();`;\n    }\n    return functionBody;\n  }\n\n  /**\n  * @function sortTaskOutput - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortTaskOutput(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n   * @function getBufferSize - Gets the byte length of the input array\n   * @param {TypedArray} array - The input typed array\n   * @returns {number} - The byte length of the array\n   */\n  getBufferSize(array) {\n    return array.byteLength;\n  }\n\n  /**\n   * @function createSharedBuffer - Creates a SharedArrayBuffer based on the input array's byte length\n   * @param {TypedArray} array - The input typed array\n   * @returns {SharedArrayBuffer} - The created SharedArrayBuffer\n   */\n  createSharedBuffer(array) {\n    const byteLength = this.getBufferSize(array);\n    const sharedBuffer = new SharedArrayBuffer(byteLength);\n    const sharedArray = new array.constructor(sharedBuffer);\n\n    // Copy data from the input array to the shared array\n    sharedArray.set(array);\n\n    return sharedBuffer;\n  }\n\n  /**\n   * @function setupSharedArrayBuffer - Sets up the shared buffer and corresponding typed array\n   * @param {TypedArray} array - The input typed array\n   * @returns {object} - SharedArrayBuffer;\n   */\n  setupSharedArrayBuffer(array) {\n    return this.createSharedBuffer(array);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function addThreadOutputWithIndex - Joins individual thread outputs into single result\n  * @param {object} task - Hamsters task object\n  * @param {object} index - Index information\n  * @param {array} output - Output array\n  */\n  addThreadOutputWithIndex(task, index, output) {\n    let i = 0;\n    const outputLength = output.length;\n    for (i; i < outputLength; i++) {\n      task.output[(index.start + i)] = output[i];\n    }\n  }\n\n  /**\n   * @function calculateIndexes - Splits a single array into multiple equal sized subarrays\n   * @param {array} array - Array to split\n   * @param {number} n - Number of subarrays to create\n   */\n  calculateIndexes(array, n) {\n    // If n is 1, return the whole array range\n    if (n === 1) {\n      return [{ start: 0, end: array.length - 1 }];\n    }\n\n    const indexes = [];\n    const segmentSize = Math.floor(array.length / n);\n    let startIndex = 0;\n\n    for (let i = 0; i < n; i++) {\n      const endIndex = startIndex + segmentSize - 1;\n      indexes.push({ start: startIndex, end: endIndex });\n      startIndex = endIndex + 1;\n    }\n\n    // Adjust the last segment to cover any remaining elements\n    if (startIndex < array.length) {\n      indexes[n - 1].end = array.length - 1;\n    }\n\n    return indexes;\n  }\n\n  getTransferList(task) {\n    const transferList = {};\n    const hamsterFood = task.input;\n    Object.keys(hamsterFood).forEach(item => {\n      if (Array.isArray(hamsterFood[item])) {\n        transferList[item] = hamsterFood[item];\n        task.input[item] = null;\n        hamsterFood[item] = 'Awaiting Transfer';\n      }\n    });\n    return {hamsterFood, transferList, task, transferCount: Object.keys(transferList).length};\n  }\n\n  /**\n  * @function getSubArrayUsingIndex - Slices subarray based on provided index\n  * @param {object} index - Index information\n  * @param {object} inputArray - Hamsters task object\n  */\n  getSubArrayUsingIndex(index, inputArray) {\n    return inputArray.slice(index.start, index.end + 1);\n  }\n}\n\nexport default Data;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Task {\n  /**\n   * @constructor\n   * @param {object} habitat - The environment settings\n   * @param {object} data - Data utility methods\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  constructor(hamsters, params, functionToRun) {\n    'use strict';\n\n    this.input = params;\n    this.type = 'task-local';\n    this.output = [];\n    this.scheduler = {\n      count: 0,\n      threads: params.threads || 1,\n      transfers: {\n        request: 0,\n        send: 0\n      },\n      workers: []\n    };\n\n    if (hamsters.habitat.legacy) {\n      this.setupLegacyTask(hamsters, functionToRun);\n    } else {\n      this.setupModernTask(hamsters, params, functionToRun);\n    }\n\n    if (hamsters.habitat.debug || params.distribute) {\n      this.setupDebugMetrics();\n    }\n  }\n\n  /**\n   * @method setupLegacyTask\n   * @description Sets up task for legacy environments\n   * @param {function} functionToRun - Function to execute\n   */\n  setupLegacyTask(hamsters, functionToRun) {\n    this.scheduler.threads = 1;\n    if (!hamsters.habitat.node && !hamsters.habitat.isIE) {\n      this.input.hamstersJob = functionToRun;\n    }\n  }\n\n  /**\n   * @method setupModernTask\n   * @description Sets up task for modern environments\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  setupModernTask(hamsters, params, functionToRun) {\n    this.input.hamstersJob = hamsters.habitat.legacy ? functionToRun : hamsters.data.prepareFunction(functionToRun);\n    if (params.sharedArray && hamsters.habitat.atomics) {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.sharedArray, this.scheduler.threads);\n      this.scheduler.sharedBuffer = hamsters.data.setupSharedArrayBuffer(params.sharedArray);\n      this.input.sharedArray = []; //Reduce ram usage on main thread, do not preserve original array its no longer needed.\n    } else {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.array, this.scheduler.threads);\n    }\n  }\n\n  /**\n   * @method setupDebugMetrics\n   * @description Sets up debug metrics if debug mode is enabled\n   */\n  setupDebugMetrics() {\n    this.scheduler.metrics = {\n      created_at: Date.now(),\n      started_at: Date.now(),\n      completed_at: null,\n      threads: this.setupThreadMetrics()\n    };\n  }\n\n  setupThreadMetrics() {\n    let i = 0;\n    let threadMetrics = [];\n    while(i < this.scheduler.threads) {\n      threadMetrics.push({\n        created_at: Date.now(),\n        started_at: null,\n        enqueued_at: null,\n        dequeued_at: null,\n        completed_at: null\n      });\n      i += 1;\n    }\n    return threadMetrics;\n  }\n}\n  \nexport default Task;\n  ","class Regular {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n        this.scaffold = function() {\n            self.params = {};\n            self.rtn = {};\n\n            self.onmessage = function (message) {\n                this.params = message.data;\n                this.rtn = {\n                    data: [],\n                    dataType: (typeof this.params.dataType !== 'undefined' ? this.params.dataType : null),\n                    index: this.params.index\n                };\n                if (this.params.sharedBuffer) {\n                    this.params.sharedArray = typedArrayFromBuffer(this.params.dataType, this.params.sharedBuffer);\n                }\n                try {\n                  new Function(this.params.hamstersJob)();\n                  const buffers = handleDataType(this.rtn);\n                  returnResponse(this.rtn, buffers);\n                } catch(e) {\n                  returnResponse([{error: e.message}]);\n                }\n            }.bind(this);\n\n            function handleDataType(rtn) {\n                if (this.params.sharedArray) {\n                    // Do nothing here, we don't need to return a buffer rtn.data is useless here\n                } else if (this.params.dataType) {\n                    rtn.data = typedArrayFromBuffer(rtn.dataType, rtn.data);\n                }\n                return getTransferableObjects(rtn); // Return transferable objects\n            }\n\n            function typedArrayFromBuffer(dataType, buffer) {\n                const types = {\n                    'Uint32': Uint32Array,\n                    'Uint16': Uint16Array,\n                    'Uint8': Uint8Array,\n                    'Uint8clamped': Uint8ClampedArray,\n                    'Int32': Int32Array,\n                    'Int16': Int16Array,\n                    'Int8': Int8Array,\n                    'Float32': Float32Array,\n                    'Float64': Float64Array\n                };\n                return types[dataType] ? new types[dataType](buffer) : buffer;\n            }\n\n            function returnResponse(rtn, buffers) {\n                if (buffers && buffers.length > 0) {\n                    postMessage(rtn, buffers);  // PostMessage with transferable objects\n                } else {\n                    postMessage(rtn);  // PostMessage without transferable objects\n                }\n            }\n\n            function getTransferableObjects(obj) {\n                const transferableObjects = new Set();\n                const typedArrayTypes = [\n                    'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array',\n                    'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n                ];\n                const otherTransferables = [\n                    'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n                ];\n\n                const globalContext = typeof self !== 'undefined' ? self : window;\n\n                const allTypes = [...typedArrayTypes, ...otherTransferables];\n\n                for (const prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        for (const type of allTypes) {\n                            if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n                                if (typedArrayTypes.includes(type)) {\n                                    transferableObjects.add(obj[prop].buffer);\n                                } else {\n                                    transferableObjects.add(obj[prop]);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return Array.from(transferableObjects);\n            }\n        }\n    }\n}\n\nexport default Regular;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass NodeStore {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.cache = new Map();\n    }\n\n    get(key) {\n        if (this.cache.has(key)) {\n            const value = this.cache.get(key);\n            // Refresh the key\n            this.cache.delete(key);\n            this.cache.set(key, value);\n            return Promise.resolve(value);\n        }\n        return Promise.resolve(null);\n    }\n\n    set(key, value) {\n        if (this.cache.size >= this.maxSize) {\n            // Remove the oldest (least recently used) entry\n            const oldestKey = this.cache.keys().next().value;\n            this.cache.delete(oldestKey);\n        }\n        this.cache.set(key, value);\n        return Promise.resolve();\n    }\n\n    clear() {\n        this.cache.clear();\n        return Promise.resolve();\n    }\n}\n\nexport default NodeStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass WebStore {\n    constructor(dbName, storeName, maxSize) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.maxSize = maxSize;\n        this.db = null;\n        this.initDB();\n    }\n\n    initDB() {\n        const self = this;\n        const request = indexedDB.open(this.dbName, 1);\n\n        request.onerror = function(event) {\n            console.error('Error opening database:', event.target.error);\n        };\n\n        request.onupgradeneeded = function(event) {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains(self.storeName)) {\n                const objectStore = db.createObjectStore(self.storeName, { keyPath: 'key' });\n                objectStore.createIndex('by_key', 'key', { unique: true });\n                objectStore.createIndex('by_timestamp', 'timestamp');\n            }\n        };\n\n        request.onsuccess = function(event) {\n            self.db = event.target.result;\n        };\n    }\n\n    get(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve(null);\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const result = event.target.result;\n                if (result) {\n                    self.updateTimestamp(key).then(() => resolve(result.value)).catch(reject);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    set(key, value) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            self.checkSize().then(() => {\n                const transaction = self.db.transaction([self.storeName], 'readwrite');\n                const objectStore = transaction.objectStore(self.storeName);\n                const request = objectStore.put({ key: key, value: value, timestamp: Date.now() });\n\n                request.onsuccess = function() {\n                    resolve();\n                };\n\n                request.onerror = function(event) {\n                    reject(event.target.error);\n                };\n            }).catch(reject);\n        });\n    }\n\n    clear() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.clear();\n\n            request.onsuccess = function() {\n                resolve();\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    checkSize() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const countRequest = objectStore.count();\n\n            countRequest.onsuccess = function() {\n                const count = countRequest.result;\n                if (count >= self.maxSize) {\n                    self.evictOldest().then(resolve).catch(reject);\n                } else {\n                    resolve();\n                }\n            };\n\n            countRequest.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    evictOldest() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const index = objectStore.index('by_timestamp');\n            const request = index.openCursor(null, 'next');\n\n            request.onsuccess = function(event) {\n                const cursor = event.target.result;\n                if (cursor) {\n                    cursor.delete().onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    updateTimestamp(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const data = event.target.result;\n                if (data) {\n                    data.timestamp = Date.now();\n                    objectStore.put(data).onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n}\n\nexport default WebStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport NodeStore from './stores/NodeStore';\nimport WebStore from './stores/WebStore';\n\nclass Memoize {\n    constructor(hamsters, maxSize) {\n        'use strict';\n\n        this.hamsters = hamsters;\n        this.store = this.hamsters.habitat.node ? new NodeStore(maxSize) : new WebStore('hamstersjs', 'cacheStore', maxSize);\n    }\n\n    memoize(func) {\n        const self = this;\n        return function(task) {\n            const key = self.generateTaskKey(task);\n\n            return new Promise(function(resolve, reject) {\n                self.store.get(key).then(function(cachedResult) {\n                    if (cachedResult !== null) {\n                        resolve(cachedResult);\n                    } else {\n                        self.applyFunc(func, task).then(function(result) {\n                            self.store.set(key, result).then(function() {\n                                resolve(result);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }\n                }).catch(reject);\n            });\n        };\n    }\n\n    generateTaskKey(task) {\n        const key = JSON.stringify({ input: task.input });\n        return this.hashCode(key);\n    }\n\n    hashCode(str) {\n        let hash = 0, i, chr;\n        if (str.length === 0) return hash;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash.toString();\n    }\n\n    applyFunc(func, args) {\n        return new Promise((resolve, reject) => {\n            try {\n                const result = func.apply(null, args);\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n\nexport default Memoize;","class Distribute {\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.localConnection = null;\n    this.remoteConnections = new hamsters.observable({});\n    this.clientInfo = new hamsters.observable({});\n    this.sendChannels = new hamsters.observable({});\n    this.pcConstraint = null;\n    this.ws = null;\n    this.clientId = null;\n    this.pendingPromises = new Map(); // targetClient -> Map(messageId -> promiseDetails)\n    this.pendingTasks = new hamsters.observable({});\n    this.pendingTransfers = new hamsters.observable({});\n    this.awaitingTransfers = new hamsters.observable({});\n    this.lastRequestedTransfers = new hamsters.observable({});\n    this.pendingOutputs = new hamsters.observable({});\n    this.returnDistributedOutput = this.sendDataResponse.bind(this);\n    this.establishConnection = this.initWebSocket.bind(this);\n    this.lastHeartbeat = {};\n    this.heartBeatInterval = 30 * 1000; //Send heartbeat message every 30 seconds\n    this.deletedPromises = [];\n    this.heartBeatTimeout = {};\n    this.messageCounter = 0;\n    this.generatedMessageIds = [];\n    this.promiseTimeoutDuration = 60000; // 60 seconds timeout\n  }\n\n  initWebSocket() {\n    this.ws = new WebSocket(`${this.hamsters.habitat.relay}`);\n\n    this.ws.onopen = () => {\n      console.info(`Hamsters.js ${this.hamsters.version} connection established`);\n      this.ws.send(JSON.stringify({\n        type: 'register',\n        logicalCores: this.hamsters.maxThreads\n      }));\n      this.sendHeartBeat(this.heartBeatInterval);\n      this.startPromiseCleanupInterval(this.promiseTimeoutDuration);\n    };\n\n    this.ws.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      this.handleWebSocketMessage(message);\n    };\n\n    this.ws.onerror = (error) => {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} connection error:`, error);\n      }\n    };\n\n    this.ws.onclose = () => {\n      if (this.hamsters.habitat.debug) {\n        console.info(`Hamsters.js ${this.hamsters.version} connection closed. Reconnecting...`);\n      }\n      this.establishConnection();\n    };\n  }\n\n  handleWebSocketMessage(message) {\n    const handlers = {\n      'register': this.handleClientReconnect.bind(this),\n      'update-client-list': this.updateClientList.bind(this),\n      'offer': this.handleOffer.bind(this),\n      'answer': this.handleAnswer.bind(this),\n      'candidate': this.handleCandidate.bind(this)\n    };\n\n    const handler = handlers[message.type];\n    if (handler) {\n      handler(message);\n    } else if (this.hamsters.habitat.debug) {\n      console.info(`Hamsters.js ${this.hamsters.version} unknown message type: ${message.type}`);\n    }\n  }\n\n  sendHeartBeat(interval) {\n    this.heartBeatTimeout = setInterval(() => {\n      this.ws.send(JSON.stringify({\n        type: 'heartbeat'\n      }));\n      this.lastHeartbeat = Date.now();\n    }, interval);\n  }\n\n  updateClientList(clientListMessage) {\n    const clients = clientListMessage.clients;\n    const newClientIds = new Set(clients.map(client => client.id));\n    clients.forEach(client => {\n      if (client.id !== this.clientId && !this.remoteConnections.get(client.id)) {\n        this.createConnection(client.id);\n      }\n    });\n    const remoteConnections = this.remoteConnections.getData();\n    Object.keys(remoteConnections).forEach((key) => {\n      if (!newClientIds.has(key)) {\n        this.handleClientDisconnect(key);\n      }\n    });\n  }\n\n  handleClientDisconnect(clientId) {\n    if (this.remoteConnections.get(clientId)) {\n      this.remoteConnections.get(clientId).close();\n      this.remoteConnections.delete(clientId, 'peer');\n    }\n    if (this.sendChannels.get(clientId)) {\n      this.sendChannels.get(clientId).close();\n      this.sendChannels.delete(clientId, 'channel');\n    }\n    this.clientInfo.delete(clientId);\n  }\n\n  handleClientReconnect(message) {\n    const newClientId = message.id;\n\n    if (this.clientId === newClientId) {\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} reconnected with same ID`);\n      }\n      return;\n    }\n    this.handleClientDisconnect(newClientId);\n    this.clientId = newClientId;\n  }\n\n  createConnection(targetClient) {\n    if (targetClient === this.clientId || this.remoteConnections.get(targetClient)) {\n      return;\n    }\n\n    const servers = {\n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n    };\n\n    const localConnection = new this.hamsters.habitat.RTCPeerConnection(servers, this.pcConstraint);\n\n    localConnection.onicecandidate = (e) => {\n      if (e.candidate) {\n        this.ws.send(JSON.stringify({ \n          type: 'candidate', \n          target: targetClient, \n          from: this.clientId,\n          logicalCores: this.hamsters.maxThreads,\n          userAgent: navigator.userAgent,\n          candidate: e.candidate\n        }));\n      }\n    };\n\n    localConnection.ondatachannel = (event) => {\n      this.dataChannelCallback(event, targetClient);\n    };\n\n    this.findOrCreateChannel(targetClient, localConnection);\n\n    this.remoteConnections.set(targetClient, localConnection);\n    localConnection.createOffer().then(desc => {\n      localConnection.setLocalDescription(desc);\n      this.ws.send(JSON.stringify({ type: 'offer', target: targetClient, offer: desc }));\n    }).catch(this.onCreateSessionDescriptionError.bind(this));\n  }\n\n  handleOffer(data) {\n    const targetClient = data.from;\n    console.log('WE HAVE A OFFER ', data);\n    if (!this.remoteConnections.get(targetClient)) {\n      const servers = {\n        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n      };\n\n      const remoteConnection = new this.hamsters.habitat.RTCPeerConnection(servers, this.pcConstraint);\n\n      remoteConnection.onicecandidate = (e) => {\n        if (e.candidate) {\n          this.ws.send(JSON.stringify({ type: 'candidate', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, candidate: e.candidate }));\n        }\n      };\n\n      remoteConnection.ondatachannel = (event) => {\n        this.dataChannelCallback(event, targetClient);\n      };\n\n      remoteConnection.setRemoteDescription(new this.hamsters.habitat.RTCSessionDescription(data.offer)).then(() => {\n        return remoteConnection.createAnswer();\n      }).then(desc => {\n        this.ws.send(JSON.stringify({ type: 'answer', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, answer: desc }));\n        return remoteConnection.setLocalDescription(desc);\n      }).catch(this.onCreateSessionDescriptionError.bind(this));\n\n      this.remoteConnections.set(targetClient, remoteConnection, 'peer');\n      this.findOrCreateChannel(targetClient, remoteConnection);\n    }\n  }\n\n  findOrCreateChannel(targetClient, remoteConnection) {\n    let sendChannel = this.sendChannels.get(targetClient);\n    if(!sendChannel) {\n      const dataConstraint = {\n        ordered: true,\n        maxRetransmits: 3,\n        id: Math.floor(Math.random() * 65536)\n      };\n      sendChannel = remoteConnection.createDataChannel('hamstersjs', dataConstraint);\n      \n      sendChannel.onopen = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onclose = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onmessage = (event) => {\n        this.onReceiveMessageCallback(targetClient, event.data);\n      };\n\n      this.sendChannels.set(targetClient, sendChannel, 'channel');\n    }\n    return sendChannel\n  }\n  \n  dataChannelCallback(event, targetClient) {\n    const dataChannel = event.channel;\n    const currentTargetClient = targetClient;\n\n    dataChannel.onmessage = (event) => {\n      this.onReceiveMessageCallback(currentTargetClient, event.data);\n    };\n\n    this.sendChannels.set(currentTargetClient, dataChannel);\n  }\n\n  storeClientConnectionInfo(data) {\n    const client = {\n      logicalCores: data.logicalCores,\n      userAgent: data.userAgent,\n    };\n    this.clientInfo.set(data.from, client);\n  }\n\n  handleAnswer(data) {\n    this.storeClientConnectionInfo(data);\n    const connection = this.remoteConnections.get(data.from);\n    connection.setRemoteDescription(new this.hamsters.habitat.RTCSessionDescription(data.answer));\n    this.remoteConnections.set(data.from, connection);\n  }\n\n  handleCandidate(data) {\n    let connection = this.remoteConnections.get(data.from);\n    if(!connection) {\n      this.storeClientConnectionInfo(data);\n      connection = this.remoteConnections.get(data.from);\n    }\n    connection.addIceCandidate(new this.hamsters.habitat.RTCIceCandidate(data.candidate)).catch(this.onAddIceCandidateError.bind(this));\n    this.remoteConnections.set(data.from, connection);\n  }\n\n  distributeTask(task, resolve, reject) {\n    const targetClient = task.input.client || this.getDistributedClient();\n    if (!targetClient) {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} no target client found.`);\n      }\n      reject('No target client found.');\n      return;\n    }\n  \n    const messageId = this.generateUniqueId();\n    const preparedList = this.hamsters.data.getTransferList(task);\n    const distributedSubTask = {\n      hamsterFood: preparedList.hamsterFood,\n      task: preparedList.task,\n      messageId: messageId,\n      type: 'task-request'\n    };\n  \n    if (!this.pendingPromises.has(targetClient)) {\n      this.pendingPromises.set(targetClient, new Map());\n    }\n    this.pendingPromises.get(targetClient).set(messageId, { resolve, reject, state: 'pending' });\n    \n    if (preparedList.transferCount > 0) {\n      this.pendingTransfers.set(messageId, preparedList.transferList);\n    }\n    this.sendData({ targetClient, data: distributedSubTask });\n  }\n\n  getDistributedClient() {\n    const sendChannelKeys = Object.keys(this.sendChannels.getData());\n    if (sendChannelKeys.length === 0) {\n      if (this.hamsters.habitat.debug) {\n        console.warn(`Hamsters.js ${this.hamsters.version} no send channels available.`);\n      }\n      return null;\n    }\n\n    let minLatency = Infinity;\n    let targetClient = null;\n\n    sendChannelKeys.forEach(clientId => {\n      const channel = this.sendChannels.get(clientId);\n      const client = this.clientInfo.get(clientId);\n      if (channel.readyState === 'open' && client && client.latency < minLatency) {\n        minLatency = client.latency;\n        targetClient = clientId;\n      }\n    });\n\n    return targetClient;\n  }\n\n  initializeDistributedTask(targetClient, task, messageId) {\n    const transferList = Object.keys(task.hamsterFood)\n    .filter(key => task.hamsterFood[key] === 'Awaiting Transfer')\n    .reduce((transfers, key) => {\n      transfers[key] = 'Awaiting Transfer';\n      return transfers;\n    }, {});\n  \n\n    if (Object.keys(transferList).length > 0) {\n      let currentAwaitingTransfers = this.awaitingTransfers.get(targetClient);\n      if(!currentAwaitingTransfers) {\n        currentAwaitingTransfers = [];\n      }\n      currentAwaitingTransfers.push({\n        messageId: messageId,\n        transferList: transferList\n      });\n      this.awaitingTransfers.set(targetClient, currentAwaitingTransfers);\n      this.requestNextTransfer(targetClient, messageId);\n    } else {\n      this.runDistributedTask(task, targetClient);\n    }\n  }\n\n  requestNextTransfer(targetClient, messageId) {\n    const requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n    let lastRequestedTransfer = null;\n    if(requestedTransfers) {\n      lastRequestedTransfer = requestedTransfers.find(item => item.messageId === messageId);\n      if (lastRequestedTransfer) {\n        console.info(\"We already requested this transfer for this task\");\n        return;\n      }\n    }\n    const currentAwaitingTransfers = this.awaitingTransfers.get(targetClient);\n    if (currentAwaitingTransfers) {\n      const awaitingTransfer = currentAwaitingTransfers.find(item => item.messageId === messageId);\n      if (awaitingTransfer) {\n        this.requestTransferFromList(awaitingTransfer, messageId, targetClient);\n      }\n    }\n  }\n  \n  requestTransferFromList(awaitingTransfer, messageId, targetClient) {\n    const transferKeys = Object.keys(awaitingTransfer.transferList);\n    if (transferKeys.length > 0) {\n      const nextKey = transferKeys.find(key => awaitingTransfer.transferList[key] === 'Awaiting Transfer');\n      if (nextKey) {\n        this.updateTransferStatus(targetClient, messageId, nextKey, 'Requested Transfer');\n        this.requestDataTransfer(nextKey, messageId, targetClient);\n      }\n    }\n  }\n  \n  updateTransferStatus(targetClient, messageId, key, status) {\n    // Get the current awaitingTransfers array for the target client\n    const currentAwaitingTransfers = this.awaitingTransfers.get(targetClient);\n    \n    if (!currentAwaitingTransfers) {\n      console.error(`Hamsters.js ${this.hamsters.version} no awaiting transfers found for ${targetClient}`);\n      return;\n    }\n  \n    // Find the correct awaitingTransfer object by messageId\n    const awaitingTransfer = currentAwaitingTransfers.find(item => item.messageId === messageId);\n  \n    if (!awaitingTransfer) {\n      console.error(`Hamsters.js ${this.hamsters.version} no awaiting transfer found for messageId ${messageId}`);\n      return;\n    }\n  \n    // Update the status of the transfer key in the transferList\n    awaitingTransfer.transferList[key] = status;\n  \n    // Set the updated awaitingTransfers back to the client\n    this.awaitingTransfers.set(targetClient, currentAwaitingTransfers);\n  }\n  \n  \n  handleTransferResponse(targetClient, transferData) {\n    let requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n  \n    if (!requestedTransfers || requestedTransfers.length === 0) {\n      console.error(`Hamsters.js ${this.hamsters.version} received transfer response but no transfer was requested for ${targetClient}`);\n      return;\n    }\n  \n    const currentRequestedTransfer = requestedTransfers[0]; // Always get the first requested transfer\n    const key = currentRequestedTransfer.key;\n    const messageId = currentRequestedTransfer.messageId || null;\n    const responseId = currentRequestedTransfer.responseId || null;\n  \n    if (responseId) {\n      // This is an output transfer\n      const clientPromises = this.pendingPromises.get(targetClient);\n      if (clientPromises) {\n        for (const [promiseMessageId, promiseDetails] of clientPromises) {\n          if (promiseDetails.responseId === responseId) {\n            const output = this.convertFromArrayBuffer(transferData, key);\n            promiseDetails.resolve(output);\n            clientPromises.delete(promiseMessageId);\n            if (clientPromises.size === 0) {\n              this.pendingPromises.delete(targetClient);\n            }\n            break;\n          }\n        }\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending promises found for ${targetClient}`);\n      }\n    } else {\n      // This is an input transfer\n      const pendingTasks = this.pendingTasks.get(targetClient);\n      if (pendingTasks) {\n        const currentTaskIndex = pendingTasks.findIndex(item => item.messageId === messageId);\n  \n        if (currentTaskIndex > -1) {\n          const currentTask = pendingTasks[currentTaskIndex];\n          currentTask.hamsterFood[key] = this.convertFromArrayBuffer(transferData, key);\n  \n          const stillAwaiting = Object.values(currentTask.hamsterFood).some(value => value === 'Awaiting Transfer');\n  \n          if (stillAwaiting) {\n            this.requestNextTransfer(targetClient, messageId);\n          } else {\n            // Remove only the current task from the pendingTasks array\n            pendingTasks.splice(currentTaskIndex, 1);\n  \n            // If there are no more tasks for this client, clean up the pendingTasks map\n            if (pendingTasks.length === 0) {\n              this.pendingTasks.delete(targetClient);\n            } else {\n              this.pendingTasks.set(targetClient, pendingTasks); // Update remaining pending tasks\n            }\n  \n            // Run the task after all transfers have been completed\n            this.runDistributedTask(currentTask, targetClient);\n          }\n        } else {\n          console.warn(`Hamsters.js ${this.hamsters.version} no pending task found for targetClient: ${targetClient} and messageId: ${messageId}`);\n        }\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending task found for targetClient: ${targetClient} and messageId: ${messageId}`);\n      }\n    }\n  \n    // Cleanup requested transfers\n    requestedTransfers = requestedTransfers.slice(1); // Removes the first item (currentRequestedTransfer)\n    if (requestedTransfers.length === 0) {\n      this.lastRequestedTransfers.delete(targetClient);\n    } else {\n      this.lastRequestedTransfers.set(targetClient, requestedTransfers); // Update remaining transfers\n    }\n  \n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} processed transfer response for ${key} from ${targetClient}`);\n    }\n  } \n  \n  measureLatency(targetClient) {\n    const startTime = performance.now();\n    this.sendPing(targetClient, startTime);\n  }\n\n  sendPing(targetClient, startTime) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'ping', startTime, threads: this.hamsters.maxThreads }));\n    }\n  }\n\n  handlePing(targetClient, startTime, clientThreads) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'pong', startTime, threads: this.hamsters.maxThreads }));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent pong to ${targetClient}`);\n      }\n      if(clientThreads) {\n        const clientInfo = {};\n        clientInfo.latency = performance.now() - startTime;\n        clientInfo.logicalCores = clientThreads;\n        this.clientInfo.set(targetClient, clientInfo);\n      }\n    }\n  }\n\n  handlePong(targetClient, startTime, clientThreads) {\n    const latency = performance.now() - startTime;\n    const clientInfo = this.clientInfo.get(targetClient) || {};\n    clientInfo.latency = latency;\n    clientInfo.logicalCores = clientThreads;\n    this.clientInfo.set(targetClient, clientInfo);\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} received pong from ${targetClient} with latency: ${latency.toFixed(2)}ms`);\n    }\n  }\n\n  runDistributedTask(taskMessage, targetClient) {\n    let task = taskMessage.task;\n    task.targetClient = targetClient;\n    task.messageId = taskMessage.messageId;\n    task.input = taskMessage.hamsterFood;\n    task.type = 'task-response';\n    console.log(\"RUNNING DISTRIBUTED TASK\");\n    this.hamsters.scheduleTask(task, this.returnDistributedOutput, this.returnDistributedOutput);\n  }\n  \n  sendDataResponse(responseData) {\n    const { targetClient, messageId, output } = responseData;\n    const responseId = this.generateUniqueId();\n    this.initializeOutputTransfer(targetClient, output, messageId, responseId);\n  }\n\n  initializeOutputTransfer(targetClient, output, messageId, responseId) {\n    this.pendingOutputs.set(responseId, { targetClient, output, messageId });\n  \n    const initialResponse = {\n      type: 'task-response',\n      messageId,\n      responseId,\n      awaitingTransfers: true\n    };\n  \n    this.sendData({ targetClient, data: initialResponse });\n  \n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} initialized output transfer for ${targetClient} (responseId: ${responseId})`);\n    }\n  }\n\n  handleOutputTransferRequest(targetClient, message) {\n    const { responseId } = message;\n    const pendingOutput = this.pendingOutputs.get(responseId);\n\n    if (pendingOutput && pendingOutput.targetClient === targetClient) {\n      const arrayBuffer = this.getArrayBuffer(pendingOutput.output);\n      this.sendBlobData({ targetClient, data: arrayBuffer, dataType: 'arrayBuffer' });\n      this.pendingOutputs.delete(responseId);\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent output transfer for ${targetClient} (responseId: ${responseId})`);\n      }\n    } else {\n      console.error(`Hamsters.js ${this.hamsters.version} received unexpected output transfer request for ${targetClient}`);\n    }\n  }\n\n  getArrayBuffer(transferredData) {\n    // Convert object/array to JSON string\n    const jsonString = JSON.stringify(transferredData);\n    \n    // Encode string as a Uint8Array\n    const encoder = new TextEncoder();\n    const encodedArray = encoder.encode(jsonString);\n    \n    // Return the buffer from the typed array\n    return encodedArray.buffer;\n  }\n\n  convertFromArrayBuffer(buffer, key) {\n    // Create a typed array from the buffer\n    const originalArray = new Uint8Array(buffer);\n    \n    // Decode the Uint8Array back to a string\n    const decoder = new TextDecoder();\n    const jsonString = decoder.decode(originalArray);\n    \n    // Parse the JSON string to get the original object back\n    return JSON.parse(jsonString);\n  }  \n  \n\n  // getArrayBuffer(transferredData) {\n  //   if (ArrayBuffer.isView(transferredData)) {\n  //     return transferredData.buffer;\n  //   }\n  //   if (transferredData instanceof ArrayBuffer) {\n  //     return transferredData;\n  //   }\n  //   // Convert object/array to JSON string\n  //   const jsonString = JSON.stringify(transferredData);\n    \n  //   // Encode string as a Uint8Array\n  //   const encoder = new TextEncoder();\n  //   const encodedArray = encoder.encode(jsonString);\n    \n  //   // Return the buffer from the typed array\n  //   return encodedArray.buffer;\n  // }\n\n  // convertFromArrayBuffer(buffer, key) {\n  //   const originalArray = new Uint8Array(buffer);\n  //   if(this.hamsters.habitat.node) { //Node.js has stricter security and won't allow the transfer of buffers sent using node.js webrtc channels, clone into new array first\n  //     const newArrayBuffer = new ArrayBuffer(originalArray.byteLength);\n  //     const newTypedArray = new Uint8Array(newArrayBuffer);\n  //     newTypedArray.set(originalArray);\n  //     return newTypedArray;\n  //   }\n  //   return originalArray;\n  // }\n\n  sendData({ targetClient, data }) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify(data));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent data to: ${targetClient}`);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: ${targetClient}`);\n      }\n    }\n  }\n\n  sendBlobData({targetClient, data, dataType}) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(data);\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent blob data to: ${targetClient}`);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: ${targetClient}`);\n      }\n    }\n  }\n\n  // Function to convert Blob to ArrayBuffer using Fetch API\n  async blobToArrayBuffer(blob) {\n    if (typeof fetch === 'function') { // Check if Fetch API is available\n        const response = new Response(blob);\n        return await response.arrayBuffer();\n    } else {\n        throw new Error('Fetch API is not supported in this environment.');\n    }\n  }\n\n  async onReceiveMessageCallback(targetClient, messageData) {\n    if(messageData instanceof Blob) {\n      messageData = await this.blobToArrayBuffer(messageData);\n    }\n    if (messageData instanceof ArrayBuffer) {\n      this.handleTransferResponse(targetClient, messageData);\n    } else if (typeof messageData === 'string') {\n      let incomingMessage;\n      try {\n        incomingMessage = JSON.parse(messageData);\n        this.handleIncomingMessage(targetClient, incomingMessage);\n      } catch (error) {\n        console.error(`Hamsters.js ${this.hamsters.version} error parsing message:`, error);\n      }\n    } else {\n      console.log(\"Received unexpected data type:\", targetClient, messageData);\n    }\n  }\n\n  handleIncomingMessage(targetClient, incomingMessage) {\n    const handlers = {\n      'transfer-request': this.fulfillTransferRequest.bind(this),\n      'task-request': this.handleTaskRequest.bind(this),\n      'transfer-response': this.processTransferResponse.bind(this),\n      'output-transfer-request': this.handleOutputTransferRequest.bind(this),\n      'task-response': this.handleTaskResponse.bind(this),\n      'ping': (client, message) => this.handlePing(client, message.startTime, message.threads),\n      'pong': (client, message) => this.handlePong(client, message.startTime, message.threads)\n    };\n\n    const handler = handlers[incomingMessage.type];\n    if (handler) {\n      handler(targetClient, incomingMessage);\n    } else {\n      console.log(`Hamsters.js ${this.hamsters.version} unknown message received from: ${targetClient}`);\n    }\n  }\n\n  handleTaskRequest(targetClient, incomingMessage) {\n    let currentPendingTasks = this.pendingTasks.get(targetClient);\n    if(!currentPendingTasks) {\n      currentPendingTasks = [];\n    }\n    currentPendingTasks.push(incomingMessage);\n    this.pendingTasks.set(targetClient, currentPendingTasks);\n    const awaitingTransfers = Object.values(incomingMessage.hamsterFood).some(value => value === 'Awaiting Transfer');\n    if (awaitingTransfers) {\n      this.initializeDistributedTask(targetClient, incomingMessage, incomingMessage.messageId);\n    } else {\n      this.runDistributedTask(incomingMessage, targetClient);\n    }\n  }\n\n  startPromiseCleanupInterval(cleanupInterval) {\n    setInterval(() => this.cleanupStalePendingPromises(), cleanupInterval);\n  }\n  \n  cleanupStalePendingPromises() {\n    const now = Date.now();\n    for (const [targetClient, clientPromises] of this.pendingPromises) {\n      for (const [messageId, promiseDetails] of clientPromises) {\n        if (now - promiseDetails.timestamp > this.promiseTimeoutDuration) {\n          promiseDetails.reject(new Error('Task timed out'));\n          clientPromises.delete(messageId);\n        }\n      }\n      if (clientPromises.size === 0) {\n        this.pendingPromises.delete(targetClient);\n      }\n    }\n  }\n\n  handleTaskResponse(targetClient, message) {\n    const { messageId, responseId, awaitingTransfers, output } = message;\n    const clientPromises = this.pendingPromises.get(targetClient);\n    \n    if (clientPromises && clientPromises.has(messageId)) {\n      const promiseDetails = clientPromises.get(messageId);\n      \n      if (awaitingTransfers && responseId) {\n        promiseDetails.state = 'awaitingTransfer';\n        promiseDetails.responseId = responseId;\n        this.requestOutputTransfer(targetClient, responseId, messageId);\n      } else {\n        promiseDetails.resolve(output);\n        clientPromises.delete(messageId);\n        if (clientPromises.size === 0) {\n          this.pendingPromises.delete(targetClient);\n        }\n      }\n    } else {\n      console.warn(`Received a message from ${targetClient} but no matching promise found with messageId ${messageId}`);\n    }\n  }\n\n  requestOutputTransfer(targetClient, responseId, messageId) {\n    let requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n    if(!requestedTransfers) {\n      requestedTransfers = [];\n    }\n    const outputTransferRequest = {\n      type: 'output-transfer-request',\n      key: 'output',\n      responseId,\n      messageId\n    };\n    requestedTransfers.push(outputTransferRequest);\n    this.lastRequestedTransfers.set(targetClient, requestedTransfers);\n    this.sendData({ targetClient, data: outputTransferRequest });\n  }\n\n  requestDataTransfer(key, messageId, targetClient) {\n    let requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n    if(!requestedTransfers) {\n      requestedTransfers = [];\n    }\n    const message = {\n      type: 'transfer-request',\n      key: key,\n      messageId: messageId\n    };\n    requestedTransfers.push(message);\n    this.lastRequestedTransfers.set(targetClient, requestedTransfers);\n    this.sendData({targetClient, data: message});\n\n    // Update the status of the transfer item\n    const awaitingTransfersData = this.awaitingTransfers.get(targetClient);\n    if (awaitingTransfersData && awaitingTransfersData.messageId === messageId) {\n      awaitingTransfersData.transfers[key] = 'Requested Transfer';\n      this.awaitingTransfers.set(targetClient, awaitingTransfersData);\n    }\n\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} requested transfer for ${key} from ${targetClient} (messageId: ${messageId})`);\n    }\n  }\n\n  fulfillTransferRequest(targetClient, incomingMessage) {\n    const { key, messageId, responseId } = incomingMessage;\n    const transferId = responseId || messageId;\n    const pendingTransferItems = this.pendingTransfers.get(transferId);\n\n    if (pendingTransferItems && pendingTransferItems[key]) {\n      const data = pendingTransferItems[key];\n      \n      // Get the ArrayBuffer efficiently based on data type\n      const arrayBuffer = this.getArrayBuffer(data);\n\n      // Send the data as ArrayBuffer\n      this.sendBlobData({ targetClient, data: arrayBuffer, dataType: 'arrayBuffer' });\n\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent transfer response for ${key} (${responseId ? 'output' : 'input'}) to ${targetClient} (messageId: ${messageId})`);\n      }\n\n      // Clean up after sending\n      delete pendingTransferItems[key];\n      if (Object.keys(pendingTransferItems).length === 0) {\n        this.pendingTransfers.delete(transferId);\n      }\n    } else {\n      console.error(`No pending transfer found for ${key} (${responseId ? 'output' : 'input'}) for ${targetClient} (messageId: ${messageId})`);\n    }\n  }\n\n  processTransferResponse(targetClient, incomingMessage) {\n    const { key, data, messageId, responseId } = incomingMessage;\n  \n    if (responseId) {\n      // This is an output transfer\n      const pendingPromise = this.pendingPromises.get(messageId);\n      if (pendingPromise) {\n        pendingPromise.resolve(data);\n        this.pendingPromises.delete(messageId);\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending promise found for messageId: ${messageId}`);\n      }\n    } else {\n      // This is an input transfer\n      const pendingTasks = this.pendingTasks.get(targetClient);\n      if (pendingTasks) {\n        const currentTaskIndex = pendingTasks.findIndex(item => item.messageId === messageId);\n  \n        if (currentTaskIndex > -1) {\n          const currentTask = pendingTasks[currentTaskIndex];\n          currentTask.hamsterFood[key] = this.convertFromArrayBuffer(data);\n  \n          const stillAwaiting = Object.values(currentTask.hamsterFood).some(value => value === 'Awaiting Transfer');\n  \n          if (stillAwaiting) {\n            this.requestNextTransfer(targetClient, messageId);\n          } else {\n            // Remove only the current task from the pendingTasks array\n            pendingTasks.splice(currentTaskIndex, 1);\n  \n            // If there are no more tasks for this client, clean up the pendingTasks map\n            if (pendingTasks.length === 0) {\n              this.pendingTasks.delete(targetClient);\n            } else {\n              this.pendingTasks.set(targetClient, pendingTasks); // Update remaining pending tasks\n            }\n  \n            // Run the task after all transfers have been completed\n            this.runDistributedTask(currentTask, targetClient);\n          }\n        } else {\n          console.warn(`Hamsters.js ${this.hamsters.version} no pending task found for targetClient: ${targetClient} and messageId: ${messageId}`);\n        }\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending task found for targetClient: ${targetClient} and messageId: ${messageId}`);\n      }\n    }\n  \n    // Cleanup requested transfers\n    const requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n    if (requestedTransfers) {\n      requestedTransfers.shift(); // Remove the first item (FIFO)\n      if (requestedTransfers.length === 0) {\n        this.lastRequestedTransfers.delete(targetClient);\n      } else {\n        this.lastRequestedTransfers.set(targetClient, requestedTransfers); // Update remaining transfers\n      }\n    }\n  \n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} processed transfer response for ${key} from ${targetClient}`);\n    }\n  }  \n\n  onSendChannelStateChange(targetClient) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      this.measureLatency(targetClient);\n    }\n    if (sendChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} send channel state changed for ${targetClient}: ${sendChannel.readyState}`);\n    }\n  }\n\n generateUniqueId() {\n  const timestamp = Date.now().toString(36);\n  const random = Math.random().toString(36).substr(2, 5);\n  this.messageCounter = (this.messageCounter + 1) % 1000000;\n  return `${timestamp}-${random}-${this.messageCounter.toString(36).padStart(5, '0')}`;\n}\n\n  onCreateSessionDescriptionError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to create session description: ${error}`);\n    }\n  }\n\n  onAddIceCandidateError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to add ICE candidate: ${error}`);\n    }\n  }\n}\n\nexport default Distribute;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Observable {\n  constructor(initialData = {}) {\n    this.data = Array.isArray(initialData) ? [...initialData] : { ...initialData };\n    this.events = {};\n  }\n\n  // Allow listeners to register for specific events\n  on(event, callback) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  }\n\n  // Notify listeners about the event\n  emit(event, ...args) {\n    if (this.events[event]) {\n      this.events[event].forEach(callback => callback(...args));\n    }\n  }\n\n  emitEvents(emitType, eventData) {\n    if(emitType !== 'change') {\n      this.emit(emitType, eventData);\n    }\n    this.emit('change', eventData);\n  }\n\n  set(key, value, emitType = 'change') {\n    const isNewKey = !this.data[key];  // Check if it's a new entry\n\n    if (typeof key === 'string') {\n      const keys = key.split('.');\n      let current = this.data;\n      for (let i = 0; i < keys.length - 1; i++) {\n        current = current[keys[i]];\n      }\n      current[keys[keys.length - 1]] = value;\n    } else if (typeof key === 'object') {\n      this.data[key] = value;\n    }\n\n    this.emitEvents(emitType, this.data);\n\n    return value;\n  }\n\n  setAll(data) {\n    this.data = data;\n  }\n\n  get(key) {\n    return this.data[key];\n  }\n\n  push(...items) {\n    this.data.push(...items);\n    this.emitEvents('change', this.data);\n  }\n\n  pop(emitType = 'change') {\n    const item = this.data.pop();\n    this.emitEvents(emitType, this.data);\n    return item;\n  }\n\n  shift(emitType = 'change') {\n    let item = this.data.shift();\n    this.emitEvents(emitType, this.data);\n    return item;\n  }\n\n  splice(start, deleteCount, ...items) {\n    const result = this.data.splice(start, deleteCount, ...items);\n    this.emitEvents('change', this.data);\n    return result;\n  }\n\n  indexOf(item) {\n    return this.data.indexOf(item);\n  }\n\n  length() {\n    return this.data.length;\n  }\n\n  delete(property, emitType = 'change') {\n    if (!Array.isArray(this.data)) {\n      delete this.data[property];\n      this.emitEvents(emitType, this.data);\n    }\n  }\n\n  getData() {\n    return this.data;\n  }\n}\n\nexport default Observable;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n//Core Functionality\nimport Habitat from './core/habitat';\nimport Pool from './core/pool';\nimport Data from './core/data';\nimport Task from './core/task';\n\n//Worker Scaffolds\nimport Legacy from './scaffold/legacy';\nimport Regular from './scaffold/regular';\nimport Shared from './scaffold/shared';\n\n//Features\nimport Memoize from './feature/memoize';\nimport Distribute from './feature/distribute';\nimport Observable from './feature/observable';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.version = '5.6.3';\n    this.run = this.hamstersRun.bind(this);\n    this.promise = this.hamstersPromise.bind(this);\n    this.init = this.initializeLibrary.bind(this);\n    this.data = {};\n    this.pool = {};\n    this.scaffold = {};\n    this.habitat = {};\n    this.memoize = {};\n  }\n\n  /**\n  * @function inititializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    const start = performance.now();\n    this.observable = Observable;\n    this.data = new Data(this);\n    this.pool = new Pool(this);\n    this.scaffold = {\n      legacy: new Legacy(),\n      regular: new Regular(),\n      shared: new Shared()\n    };\n    this.habitat = new Habitat(this);\n    this.memoize = new Memoize(this, 100); //Set a maximum of 100 memoized function results, LRU cache\n    this.distribute = new Distribute(this);\n    this.processStartOptions(startOptions);\n\n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      this.pool.spawnHamsters(this.habitat.maxThreads);\n    }\n\n    this.maxThreads = this.habitat.maxThreads;\n\n    if(this.habitat.relay) {\n      console.info(`Hamsters.js ${this.version} establishing connection to relay`);\n      this.distribute.establishConnection();\n    }\n    \n    const end = performance.now();\n    console.info(`Hamsters.js ${this.version} initialized using up to ${this.habitat.maxThreads} threads in ${end - start}ms`);\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      for (const key of Object.keys(startOptions)) {\n        if (this.habitat.keys.includes(key.toLowerCase())) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          if(key === 'scaffold') {\n            this.scaffold.custom = startOptions[key];\n          } else {\n            this[key] = startOptions[key];\n          }\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    let forceLegacyMode = (typeof startOptions !== 'undefined' && typeof startOptions.legacy !== 'undefined');\n    if (forceLegacyMode) {\n      forceLegacyMode = startOptions.legacy;\n    }\n    if (typeof this.habitat.Worker === 'function' && !forceLegacyMode) {\n      this.habitat.legacy = this.habitat.isIE;\n    }\n  }\n\n  /**\n   * @async\n   * @function scheduleTask - Schedules a new function to be processed by the library\n   * @param {object} task - Provided library execution options\n   * @param {function} resolve - Parent function promise resolve method\n   * @param {function} reject - Parent function promise reject method\n   * @return {Promise} Promise object on completion\n   */\n  scheduleTask(task, resolve, reject) {\n    if (task.input.memoize) {\n      // Pass the task object to the memoized function\n      const memoizedFunction = this.memoize.memoize(() => this.pool.scheduleTask(task, resolve, reject));\n      return memoizedFunction(task).then(resolve).catch(reject);\n    }\n    return this.pool.scheduleTask(task, resolve, reject);\n  }\n\n  /**\n   * @async\n   * @function hamstersPromise - Calls library functionality using async promises\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   * @return {Promise} Promise resolving with results from functionToRun\n   */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      this.scheduleTask(new Task(this, params, functionToRun), resolve, reject);\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    this.scheduleTask(new Task(this, params, functionToRun), onSuccess, onError);\n  }\n}\n\nexport default new hamstersjs();\n"],"names":["root","factory","exports","module","define","amd","global","__webpack_require__","moduleId","cachedModule","__webpack_module_cache__","undefined","__webpack_modules__","Legacy","constructor","hamsters","this","scaffold","params","resolve","reject","rtn","data","dataType","habitat","reactNative","self","node","isIE","eval","hamstersJob","Shared","addEventListener","incomingConnection","port","ports","start","incomingMessage","postMessage","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Habitat","debug","importScripts","relay","RTCPeerConnection","getRTCPeerConnection","RTCSessionDescription","getRTCSessionDescription","RTCIceCandidate","getRTCIceCandidate","memoize","persistence","browser","isBrowser","webWorker","isWebWorker","isNode","isReactNative","shell","isShell","transferable","supportsTransferableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isInternetExplorer","selectHamsterWheel","bind","sharedWorker","locateSharedWorkerObject","locateBlobBuilder","findAvailableBlobBuilder","legacy","isLegacyEnvironment","Worker","locateWorkerObject","maxThreads","determineGlobalThreads","keys","getHabitatKeys","max","navigator","hardwareConcurrency","isFirefox","os","cpus","length","userAgent","toLowerCase","indexOf","SharedWorker","window","process","product","isLegacy","supportsSharedWorkers","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","createDataBlob","textContent","Blob","blob","append","type","getBlob","generateWorkerBlob","workerLogic","URL","createObjectURL","generateWorkerString","toString","Uint8Array","SharedArrayBuffer","Proxy","custom","encodeURIComponent","regular","Pool","threads","observable","running","pending","fetchHamster","getAvailableThread","addWorkToPending","index","task","scheduler","metrics","count","enqueued_at","Date","now","push","processQueuedItem","hamster","item","dequeued_at","runTask","threadId","spawnHamster","keepTrackOfThread","id","workers","spawnHamsters","prepareMeal","hamsterFood","array","input","getSubArrayFromIndex","sharedBuffer","excludedKeys","Set","has","legacyWheel","pool","trainHamster","feedHamster","hamsterWheel","returnOutputAndRemoveTask","output","processDataType","aggregate","aggregateThreadOutputs","sort","sortOutput","completedAt","startedAt","started_at","completed_at","console","info","distribute","removeFromRunning","splice","processReturn","message","JSON","parse","addThreadOutputWithIndex","setOnMessage","onThreadResponse","onmessage","onmessageerror","onerror","once","error","shift","terminate","scheduleTask","distributeTask","i","indexes","Data","getSubArrayUsingIndex","getSubArrayIndexes","calculateIndexes","sortTaskOutput","typedArrayFromBuffer","prepareFunction","prepareWorkerTask","messageWorkerThread","getBufferSize","createSharedBuffer","getDataType","setupSharedArrayBuffer","stringify","getTransferableObjects","typedArrayBuffers","transferableObjects","typedArrayTypes","otherTransferables","globalContext","buffer","concat","types","Uint32Array","Uint16Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","functionBody","functionString","String","isAsync","trim","startsWith","substring","lastIndexOf","arr","order","Array","a","b","reverse","byteLength","set","reduce","len","bufferLength","offset","outputLength","n","end","segmentSize","Math","floor","startIndex","endIndex","getTransferList","transferList","forEach","isArray","transferCount","inputArray","slice","Task","functionToRun","transfers","request","send","setupLegacyTask","setupModernTask","setupDebugMetrics","sharedArray","created_at","setupThreadMetrics","threadMetrics","Regular","handleDataType","allTypes","includes","add","from","returnResponse","buffers","Function","e","NodeStore","maxSize","cache","Map","value","delete","Promise","size","oldestKey","next","clear","WebStore","dbName","storeName","db","initDB","indexedDB","open","event","target","onupgradeneeded","result","objectStoreNames","contains","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","transaction","updateTimestamp","then","catch","checkSize","put","timestamp","countRequest","evictOldest","openCursor","cursor","Memoize","store","func","generateTaskKey","cachedResult","applyFunc","hashCode","str","chr","hash","charCodeAt","args","apply","Distribute","localConnection","remoteConnections","clientInfo","sendChannels","pcConstraint","ws","clientId","pendingPromises","pendingTasks","pendingTransfers","awaitingTransfers","lastRequestedTransfers","pendingOutputs","returnDistributedOutput","sendDataResponse","establishConnection","initWebSocket","lastHeartbeat","heartBeatInterval","deletedPromises","heartBeatTimeout","messageCounter","generatedMessageIds","promiseTimeoutDuration","WebSocket","onopen","version","logicalCores","sendHeartBeat","startPromiseCleanupInterval","handleWebSocketMessage","onclose","handler","handleClientReconnect","updateClientList","handleOffer","handleAnswer","handleCandidate","interval","setInterval","clientListMessage","clients","newClientIds","map","client","createConnection","getData","handleClientDisconnect","close","newClientId","log","targetClient","iceServers","urls","onicecandidate","candidate","ondatachannel","dataChannelCallback","findOrCreateChannel","createOffer","desc","setLocalDescription","offer","onCreateSessionDescriptionError","servers","remoteConnection","setRemoteDescription","createAnswer","answer","sendChannel","dataConstraint","ordered","maxRetransmits","random","createDataChannel","onSendChannelStateChange","onReceiveMessageCallback","dataChannel","channel","currentTargetClient","storeClientConnectionInfo","connection","addIceCandidate","onAddIceCandidateError","getDistributedClient","messageId","generateUniqueId","preparedList","distributedSubTask","state","sendData","sendChannelKeys","warn","minLatency","Infinity","readyState","latency","initializeDistributedTask","filter","currentAwaitingTransfers","requestNextTransfer","runDistributedTask","requestedTransfers","lastRequestedTransfer","find","awaitingTransfer","requestTransferFromList","transferKeys","nextKey","updateTransferStatus","requestDataTransfer","status","handleTransferResponse","transferData","currentRequestedTransfer","responseId","clientPromises","promiseMessageId","promiseDetails","convertFromArrayBuffer","currentTaskIndex","findIndex","currentTask","values","some","measureLatency","startTime","performance","sendPing","handlePing","clientThreads","handlePong","toFixed","taskMessage","responseData","initializeOutputTransfer","initialResponse","handleOutputTransferRequest","pendingOutput","arrayBuffer","getArrayBuffer","sendBlobData","transferredData","jsonString","TextEncoder","encode","originalArray","TextDecoder","decode","blobToArrayBuffer","fetch","response","Response","Error","messageData","ArrayBuffer","handleIncomingMessage","fulfillTransferRequest","handleTaskRequest","processTransferResponse","handleTaskResponse","ping","pong","currentPendingTasks","cleanupInterval","cleanupStalePendingPromises","requestOutputTransfer","outputTransferRequest","awaitingTransfersData","transferId","pendingTransferItems","pendingPromise","substr","padStart","Observable","initialData","events","on","callback","emit","emitEvents","emitType","eventData","split","current","setAll","items","pop","deleteCount","property","hamstersjs","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","shared","processStartOptions","forceLegacyMode","memoizedFunction","onSuccess","onError"],"sourceRoot":""}