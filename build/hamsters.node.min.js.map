{"version":3,"sources":["webpack:///webpack/bootstrap 08a025fd684647a02e9e","webpack:///./hamsters.js","webpack:///./core/habitat.js","webpack:///./core/wheel.js","webpack:///./core/pool.js","webpack:///./core/data.js"],"names":["hamstersjs","version","habitat","hamstersHabitat","data","hamstersData","pool","hamstersPool","run","hamstersRun","bind","promise","hamstersPromise","init","inititializeLibrary","startOptions","processStartOptions","legacy","persistence","spawnHamsters","maxThreads","console","info","Object","keys","key","indexOf","toLowerCase","forceLegacyMode","Worker","isIE","params","functionToRun","task","input","output","scheduler","count","threads","workers","node","hamstersJob","prepareFunction","indexes","getSubArrayIndexes","array","debug","metrics","created_at","Date","now","started_at","completed_at","resolve","reject","scheduleTask","then","results","catch","error","Promise","hamstersTask","onSuccess","onError","hamsters","module","exports","importScripts","memoize","browser","isBrowser","webWorker","isWebWorker","isNode","reactNative","isReactNative","shell","isShell","transferable","supportstransferableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isInternetExplorer","hamsterWheel","selectHamsterWheel","sharedWorker","locateSharedWorkerObject","locateBlobBuilder","findAvailableBlobBuilder","isLegacyEnvironment","legacyWheel","hamstersWheel","locateWorkerObject","determineGlobalThreads","getHabitatKeys","max","navigator","hardwareConcurrency","isFirefox","os","cpus","length","userAgent","SharedWorker","window","process","product","isLegacy","supportsSharedWorkers","supports","workerBlob","generateWorkerBlob","SharedHamster","e","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","textContent","Blob","BlobMaker","blob","append","type","getBlob","workerLogic","URL","createObjectURL","createDataBlob","String","Uint8Array","SharedArrayBuffer","Proxy","regular","wheel","worker","workerScaffold","regularScaffold","legacyScaffold","self","rtn","addEventListener","incomingConnection","port","ports","start","incomingMessage","dataType","eval","postMessage","onmessage","message","typedArrayFromBuffer","returnResponse","buffer","types","Uint32Array","Uint16Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","buffers","running","pending","fetchHamster","getAvailableThread","index","enqueued_at","push","hamster","item","dequeued_at","runTask","threadId","spawnHamster","id","parentPort","hamsterFood","getSubArrayFromIndex","hasOwnProperty","prepareMeal","keepTrackOfThread","trainHamster","feedHamster","addWorkToPending","sort","sortOutput","splice","JSON","parse","addThreadOutputWithIndex","onThreadResponse","onmessageerror","onerror","once","processReturn","removeFromRunning","returnOutputAndRemoveTask","processQueuedItem","shift","terminate","setOnMessage","i","hamsterPool","getSubArrayUsingIndex","calculateIndexes","sortTaskOutput","prepareWorkerTask","messageWorkerThread","stringify","functionBody","functionString","substring","arr","order","Array","prototype","call","a","b","reverse","outputLength","n","segmentSize","Math","floor","startIndex","endIndex","end","slice"],"mappings":"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","file":"hamsters.node.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 08a025fd684647a02e9e","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersHabitat from './core/habitat';\nimport hamstersPool from './core/pool';\nimport hamstersData from './core/data';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.version = '5.4.4';\n    this.habitat = hamstersHabitat;\n    this.data = hamstersData;\n    this.pool = hamstersPool;\n    this.run = this.hamstersRun.bind(this);\n    this.promise = this.hamstersPromise.bind(this);\n    this.init = this.inititializeLibrary.bind(this);\n  }\n\n  /**\n  * @function initializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  inititializeLibrary(startOptions) {\n    this.processStartOptions(startOptions);\n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      hamstersPool.spawnHamsters(this.habitat.maxThreads);\n    }\n    this.maxThreads = this.habitat.maxThreads;\n    console.info(`Hamsters.js ${this.version} initialized using up to ${this.habitat.maxThreads} threads`);\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      for (var key of Object.keys(startOptions)) {\n        if (this.habitat.keys.indexOf(key.toLowerCase()) !== -1) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          this[key] = startOptions[key];\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    var forceLegacyMode = (typeof startOptions !== 'undefined' && typeof startOptions.legacy !== 'undefined');\n    if(forceLegacyMode) {\n      forceLegacyMode = startOptions.legacy;\n    }\n    if(typeof this.habitat.Worker === 'function' && !forceLegacyMode) {\n      this.habitat.legacy = this.habitat.isIE;\n    }\n  }\n\n  /**\n  * @constructor\n  * @function hamstersTask - Constructs a new task object from provided arguments\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @return {object} new Hamsters.js task\n  */\n  hamstersTask(params, functionToRun) {\n    let task = {\n      input: params,\n      output: [],\n      scheduler: {\n        count: 0,\n        threads: (params.threads ? params.threads : 1),\n        workers: []\n      }\n    };\n    if(this.habitat.legacy) {\n      task.scheduler.threads = 1;\n      if(!this.habitat.node && !this.habitat.isIE) {\n        params.hamstersJob = functionToRun;\n      }\n    } else {\n      params.hamstersJob = this.data.prepareFunction(functionToRun);\n      task.scheduler.indexes = params.indexes ? params.indexes : this.data.getSubArrayIndexes(params.array, task.scheduler.threads);\n    }\n    if(this.habitat.debug) {\n      task.scheduler.metrics = {\n        created_at: Date.now(),\n        started_at: null,\n        completed_at: null,\n        threads: []\n      };\n    }\n    return task;\n  }\n\n  /**\n  * @async\n  * @function hamstersPromise - Schedules new function to be processed by library\n  * @param {object} task - Provided library execution options\n  * @param {function} resolve - Parent function promise resolve method\n  * @param {function} reject- Parent function promise reject method\n  * @return {object} Promise object on completion\n  */\n  scheduleTask(task, resolve, reject) {\n    return this.pool.scheduleTask(task).then((results) => {\n      resolve(results);\n    }).catch((error) => {\n      // console.error(\"Hamsters.js error encountered: \", error);\n      reject(error);\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersPromise - Calls library functionality using async promises\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @return {array} Results from functionToRun\n  */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      return this.scheduleTask(this.hamstersTask(params, functionToRun), resolve, reject);\n    });\n  }\n\n  /**unction} functionToRun - Function to execute\n  * @param {function} onSuccess - Function to call upon successful execution\n  * @param {f\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    this.scheduleTask(this.hamstersTask(params, functionToRun), onSuccess, onError);\n  }\n}\n\nvar hamsters = new hamstersjs();\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamsters;\n}\n\n\n// WEBPACK FOOTER //\n// ./hamsters.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersWheel from './wheel';\n\nclass habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.debug = false;\n    this.importScripts = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferable = this.supportstransferableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE = this.isInternetExplorer();\n    this.hamsterWheel = this.selectHamsterWheel();\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.locateBlobBuilder = this.findAvailableBlobBuilder();\n    this.legacy = this.isLegacyEnvironment();\n    this.legacyWheel = hamstersWheel.legacy;\n    this.Worker = this.locateWorkerObject();\n    this.maxThreads = this.determineGlobalThreads();\n    this.keys = this.getHabitatKeys();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(this.browser && typeof navigator.hardwareConcurrency !== \"undefined\") {\n      max = navigator.hardwareConcurrency;\n      if(this.isFirefox()) {\n        max = (max > 20 ? 20 : max);\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function isFireox - Detect firefox browser\n  */\n  isFirefox() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return (typeof Worker !== 'undefined' ? Worker : false);\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return (typeof SharedWorker !== 'undefined' ? SharedWorker : false);\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return (typeof window === \"object\");\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.indexOf(\"MSIE \") !== -1 || navigator.userAgent.indexOf(\"Trident/\") !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return (typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser);\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a webworker\n  */\n  isWebWorker() {\n    return (typeof importScripts === \"function\" && !this.isReactNative());\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is reactNative\n  */\n  isReactNative() {\n    return (typeof navigator !== \"undefined\" && typeof navigator.product !== \"undefined\" && navigator.product === \"ReactNative\");\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return ((typeof navigator === \"undefined\") && !this.isNode() && !this.isWebWorker() && !this.isReactNative());\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = !!!this.Worker;\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy;\n  }\n\n  supportsSharedWorkers() {\n    let supports = false;\n    try {\n      let workerBlob = this.generateWorkerBlob(this.hamsterWheel);\n      let SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n      supports = true;\n    } catch (e) {\n      supports = false;\n    }\n    return supports;\n  }\n\n  /**\n  * @function createDataBlob - Attempts to locate data blob builder, vender prefixes galore\n  */\n  findAvailableBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return 'Environment does not support data blobs!';\n  }\n\n  /**\n  * @function createDataBlob - Creates new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates blob uri for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    return  URL.createObjectURL(this.createDataBlob('(' + String(workerLogic) + ')();'));\n  }\n\n  /**\n  * @function supportstransferableObjects - Detects if execution environment supports typed arrays\n  */\n  supportstransferableObjects() {\n    return (typeof Uint8Array !== 'undefined');\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports shared array buffers\n  */\n  supportsAtomicOperations() {\n    return (typeof SharedArrayBuffer !== 'undefined');\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports proxy objects\n  */\n  supportsProxies() {\n    return (typeof Proxy !== 'undefined');\n  }\n\n  /**\n  * @function scheduleTask - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.isIE) {\n      return hamstersWheel.legacy;\n    }\n    if(this.reactNative) {\n      return 'reactNativeHamster.js';\n    }\n    if (this.node) {\n      return './node_modules/hamsters.js/build/common/node.js';\n    }\n    return this.generateWorkerBlob(hamstersWheel.regular);\n  }\n\n  getHabitatKeys() {\n    return [\n      'worker','sharedworker',\n      'legacy','proxies',\n      'reactnative','atomics',\n      'transferable','browser',\n      'shell','node','debug',\n      'persistence','importscripts',\n      'maxthreads', 'parentport',\n      'webworker',\n    ];\n  }\n}\n\nvar hamstersHabitat = new habitat();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersHabitat;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/habitat.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass wheel {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.worker = this.workerScaffold;\n    this.regular = this.regularScaffold;\n    this.legacy = this.legacyScaffold;\n  }\n\n  /**\n  * @function workerScaffold - Provides worker body for library functionality when used within a worker [threads inside threads]\n  */\n  workerScaffold() {\n    self.params = {};\n    self.rtn = {};\n\n    addEventListener('connect', (incomingConnection) => {\n      var port = incomingConnection.ports[0];\n      port.start();\n      port.addEventListener('message', (incomingMessage) => {\n        params = incomingMessage.data;\n        rtn = {\n          data: [],\n          dataType: params.dataType\n        };\n        eval(\"(\" + params.hamstersJob + \")\")();\n        port.postMessage(rtn);\n      }, false);\n    }, false);\n  }\n\n  /**\n  * @function workerScaffold - Provides worker body for library functionality\n  */\n  regularScaffold() {\n    self.params = {};\n    self.rtn = {};\n\n    self.onmessage = function(message) {\n      params = message.data;\n      rtn = {\n        data: [],\n        dataType: (typeof params.dataType !== 'undefined' ? params.dataType : null)\n      };\n      eval(params.hamstersJob);\n      if(rtn.dataType) {\n        rtn.data = typedArrayFromBuffer(rtn.dataType, rtn.data);\n      }\n      returnResponse(rtn);\n    };\n\n    function typedArrayFromBuffer(dataType, buffer) {\n      var types = {\n        'Uint32': Uint32Array,\n        'Uint16': Uint16Array,\n        'Uint8': Uint8Array,\n        'Uint8clamped': Uint8ClampedArray,\n        'Int32': Int32Array,\n        'Int16': Int16Array,\n        'Int8': Int8Array,\n        'Float32': Float32Array,\n        'Float64': Float64Array\n      };\n      if (!types[dataType]) {\n        return buffer;\n      }\n      return new types[dataType](buffer);\n    }\n\n    function returnResponse(rtn, buffers) {\n      if(typeof rtn.data.buffer !== 'undefined') {\n        postMessage(rtn, [rtn.data.buffer]);\n      } else {\n        postMessage(rtn);\n      }\n    }\n  }\n\n  /**\n  * @function legacyScaffold - Provides library functionality for legacy devices\n  */\n  legacyScaffold(hamstersHabitat, params, resolve, reject) {\n    var rtn = {\n      data: [],\n      dataType: (typeof params.dataType !== \"undefined\" ? params.dataType : null)\n    };\n    if(hamstersHabitat.reactNative) {\n      self.rtn = rtn;\n    }\n    if(hamstersHabitat.node || hamstersHabitat.isIE) {\n      eval(params.hamstersJob);\n    } else {\n      params.hamstersJob();\n    }\n    resolve(rtn.data);\n  }\n}\n\nvar hamstersWheel = new wheel();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersWheel;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/wheel.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersData from './data';\nimport hamstersHabitat from './habitat';\n\nclass pool {\n\t\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.threads = [];\n    this.running = [];\n    this.pending = [];\n    this.fetchHamster = this.getAvailableThread;\n  }\n\n  /**\n  * @function fetchHamster - Adds task to queue waiting for available thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(index, task, resolve, reject) {\n    if(hamstersHabitat.debug) {\n      task.scheduler.metrics.threads[task.scheduler.count].enqueued_at = Date.now();\n    }\n    this.pending.push({\n      index: index,\n      count: task.scheduler.count,  \n      task: task,\n      resolve: resolve,\n      reject: reject\n    });\n  }\n\n  /**\n  * @function processQueuedItem - Invokes processing of next item in queue\n  * @param {object} item - Task to process\n  */\n  processQueuedItem(hamster, item) {\n    if(hamstersHabitat.debug) {\n      item.task.scheduler.metrics.threads[item.count].dequeued_at = Date.now();\n    }\n  \treturn this.runTask(hamster, item.index, item.task, item.resolve, item.reject);\n  }\n\n  /**\n  * @function getAvailableThread- Keeps track of threads running, scoped globally and to task\n  * @param {number} threadId - Id of thread\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  */\n  getAvailableThread(threadId) {\n    if(hamstersHabitat.persistence) {\n      return this.threads[threadId];\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    if(hamstersHabitat.debug) {\n      task.scheduler.metrics.threads[id].started_at = Date.now();\n    }\n    task.scheduler.workers.push(id); //Keep track of threads scoped to current task\n    this.running.push(id); //Keep track of all currently running threads\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {number} maxThreds - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    for (maxThreads; maxThreads > 0; maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} WebWorker - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    if (hamstersHabitat.webWorker) {\n      return new hamstersHabitat.SharedWorker(hamstersHabitat.hamsterWheel, 'SharedHamsterWheel');\n    }\n    if(hamstersHabitat.node && typeof hamstersHabitat.parentPort !== 'undefined') {\n      return new hamstersHabitat.Worker(hamstersHabitat.hamsterWheel);\n    }\n    return new hamstersHabitat.Worker(hamstersHabitat.hamsterWheel);\n  }\n\n  /**\n  * @function prepareMeal - Prepares message to send to a thread and invoke execution\n  * @param {object} threadArray - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @return {object} hamsterFood - Prepared message to send to a thread\n  */\n  prepareMeal(index, task) {\n    const hamsterFood = {};\n    hamsterFood.array = hamstersData.getSubArrayFromIndex(index, task);\n    for (var key in task.input) {\n      if (task.input.hasOwnProperty(key) && ['array', 'threads'].indexOf(key) === -1) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n    return hamsterFood;\n  }\n\n  /**\n  * @function hamsterWheel - Runs function using thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, index, task, resolve, reject) {\n  \tlet threadId = this.running.length;\n    let hamsterFood = this.prepareMeal(index, task);\n    this.keepTrackOfThread(task, threadId);\n    if(hamstersHabitat.legacy) {\n      hamstersHabitat.legacyWheel(hamstersHabitat, hamsterFood, resolve, reject);\n    } else {\n      this.trainHamster(this, hamstersHabitat, index, task, threadId, hamster, resolve, reject);\n      hamstersData.feedHamster(hamstersHabitat, hamster, hamsterFood);\n    }\n    task.scheduler.count += 1;\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {object} array - Provided library functionality options for this task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(index, task, resolve, reject) {\n    if(hamstersHabitat.maxThreads <= this.running.length) {\n      return this.addWorkToPending(index, task, resolve, reject);\n    }\n    let hamster = this.fetchHamster(this.running.length);\n    return this.runTask(hamster, index, task, resolve, reject);\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    if(hamstersHabitat.debug) {\n      task.scheduler.metrics.completed_at = Date.now();\n      console.info(\"Hamsters.js Task Completed: \", task);\n    }\n    if (task.sort) {\n      resolve(hamstersData.sortOutput(task.output, task.sort));\n    } else {\n      resolve(task.output);\n    }\n  }\n\n  removeFromRunning(task, threadId) {\n    this.running.splice(this.running.indexOf(threadId), 1); //Remove thread from running pool\n    task.scheduler.workers.splice(task.scheduler.workers.indexOf(threadId), 1); //Remove thread from task running pool\n  }\n\n  processReturn(habitat, index, message, task) {\n    let output = message.data;\n    if(habitat.reactNative) {\n      output = JSON.parse(message).data;\n    } else if(typeof message.data.data !== \"undefined\") {\n      output = message.data.data;\n    }\n    if(task.scheduler.threads !== 1) {\n      hamstersData.addThreadOutputWithIndex(task, index, output);\n    } else {\n      task.output = output;\n    }\n  }\n\n  setOnMessage(hamster, onThreadResponse, habitat, reject) {\n    if (habitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onmessageerror = reject;\n      hamster.port.onerror = reject;\n    }\n    if(habitat.node) {\n      hamster.once('message', onThreadResponse);\n      hamster.once('onmessageerror', reject);\n      hamster.once('error', reject);\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = reject;\n      hamster.error = reject;\n    }\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {worker} hamster - Thread to train\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(pool, habitat, index, task, threadId, hamster, resolve, reject) {\n    let onThreadResponse = (message) => {\n      pool.processReturn(habitat, index, message, task);\n      if(habitat.debug) {\n        task.scheduler.metrics.threads[threadId].completed_at = Date.now();\n      }\n      pool.removeFromRunning(task, threadId);\n      if (task.scheduler.workers.length === 0 && task.scheduler.count === task.scheduler.threads) {\n        pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (pool.pending.length !== 0) {\n        return pool.processQueuedItem(hamster, pool.pending.shift());\n      }\n      if(!habitat.persistence) {\n        return hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n      }\n    };\n    pool.setOnMessage(hamster, onThreadResponse, habitat, reject);\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Scaffold to execute login within\n  * @param {number} maxThreads - Maximum number of threads for this client\n  */\n  scheduleTask(task) {\n    let i = 0;\n    if(hamstersHabitat.debug) {\n      let metrics = task.scheduler.metrics;\n      metrics.started_at = Date.now();\n      return new Promise((resolve, reject) => {\n        while (i < task.scheduler.threads) {\n          metrics.threads.push({\n            created_at: Date.now(),\n            started_at: null,\n            enqueued_at: null,\n            dequeued_at: null,\n            completed_at: null\n          });\n          this.hamsterWheel(task.scheduler.indexes[i], task, resolve, reject);\n          i += 1;\n        }\n      });\n    }\n    //Process with debug mode disabled, no need for time stamping\n  \treturn new Promise((resolve, reject) => {\n      while (i < task.scheduler.threads) {\n        this.hamsterWheel(task.scheduler.indexes[i], task, resolve, reject);\n        i += 1;\n      }\n    });\n  }\n}\n\nvar hamsterPool = new pool();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamsterPool;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/pool.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.getSubArrayFromIndex = this.getSubArrayUsingIndex;\n    this.getSubArrayIndexes = this.calculateIndexes;\n    this.sortOutput = this.sortTaskOutput;\n    this.prepareFunction = this.prepareWorkerTask;\n    this.feedHamster = this.messageWorkerThread;\n  }\n\n  /**\n  * @function messageWorkerThread - Prepares message to send to thread\n  * @param {worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorkerThread(hamstersHabitat, hamster, hamsterFood) {\n    if(hamstersHabitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    if (hamstersHabitat.webWorker) {\n      return hamster.port.postMessage(hamsterFood);\n    }\n    if(typeof hamsterFood.array.buffer !== 'undefined') {\n      hamster.postMessage(hamsterFood, [hamsterFood.array.buffer]);\n    } else {\n      hamster.postMessage(hamsterFood);\n    }\n  }\n\n  /**\n  * @function prepareWorkerTask - Prepares function for thread, strips whitespace\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareWorkerTask(functionBody) {\n    let functionString = String(functionBody);\n    return functionString.substring((functionString.indexOf(\"{\") + 1), (functionString.length -1));\n  }\n\n  /**\n  * @function sortTaskOutput - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortTaskOutput(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n  * @function addThreadOutputWithIndex - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  addThreadOutputWithIndex(task, index, output) {\n    let i = 0;\n    let outputLength = output.length;\n    for (i; i < outputLength; i++) {\n      task.output[(index.start + i)] = output[i];\n    }\n  }\n\n  /**\n  * @function calculateIndexes - Splits a single array into multiple equal sized subarrays\n  * @param {array} array - Array to split\n  * @param {number} n - Number of subarrays to create\n  */\n  calculateIndexes(array, n) {\n    const indexes = [];\n    const segmentSize = Math.floor(array.length / n);\n    let startIndex = 0;\n  \n    for (let i = 0; i < n; i++) {\n      const endIndex = startIndex + segmentSize - 1;\n      indexes.push({ start: startIndex, end: endIndex });\n      startIndex = endIndex + 1;\n    }\n  \n    // Adjust the last segment to cover any remaining elements\n    if (startIndex < array.length) {\n      indexes[n - 1].end = array.length - 1;\n    }\n  \n    return indexes;\n  }\n  \n\n  /**\n  * @function splitArrayIntoSubArrays - Splits a single array into multiple equal sized subarrays\n  * @param {array} array - Array to split\n  * @param {number} n - Number of subarrays to create\n  */\n  getSubArrayUsingIndex(index, task) {\n    return task.input.array.slice(index.start, index.end + 1);\n  }\n}\n\nvar hamstersData = new data();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersData;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./core/data.js"],"sourceRoot":""}