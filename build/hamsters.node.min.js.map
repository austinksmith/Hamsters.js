{"version":3,"sources":["webpack:///webpack/bootstrap 0ee22d24bf0fb0877a7c","webpack:///./src/hamsters.js","webpack:///./src/core/version.js","webpack:///./src/core/habitat.js","webpack:///./src/core/data.js","webpack:///./src/core/logger.js","webpack:///./src/core/wheel.js","webpack:///./src/core/pool.js","webpack:///./src/core/memoizer.js"],"names":["hamstersjs","version","hamstersVersion","maxThreads","hamstersHabitat","logicalThreads","habitat","data","hamstersData","pool","hamstersPool","logger","hamstersLogger","memoizer","hamstersMemoizer","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","info","processStartOptions","legacy","persistence","spawnHamsters","habitatKeys","key","hasOwnProperty","indexOf","toLowerCase","Worker","params","functionToRun","scope","id","tasks","length","count","aggregate","output","workers","memoize","dataType","input","threads","hamstersJob","prepareJob","Promise","resolve","reject","task","hamstersTask","scheduleTask","then","results","catch","error","messsage","onSuccess","onError","hamsters","module","exports","majorVersion","minorVersion","patchVersion","debug","importScripts","legacyWheel","hamstersWheel","browser","isBrowser","webWorker","isWebWorker","node","isNode","reactNative","isReactNative","shell","isShell","transferrable","supportsTransferrableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isIE10","isInternetExplorer","determineGlobalThreads","locateWorkerObject","sharedWorker","locateSharedWorkerObject","selectHamsterWheel","max","navigator","hardwareConcurrency","userAgent","os","cpus","SharedWorker","window","RegExp","isNaN","test","process","global","lacksWorkerSupport","legacyAgents","workerBlob","generateBlob","SharedHamster","e","Uint8Array","SharedArrayBuffer","Proxy","worker","regular","generateWorkerBlob","randomArray","aggregateArrays","aggregateThreadOutputs","splitArrays","splitArrayIntoSubArrays","createBlob","createDataBlob","processDataType","sortOutput","sortArray","getOutput","prepareOutput","prepareFunction","feedHamster","messageWorker","prepareMeal","prepareHamsterFood","workerURI","hamsterFood","array","hamster","postMessage","JSON","stringify","ie10","port","prepareTransferBuffers","buffers","buffer","push","Array","isArray","ArrayBuffer","functionBody","String","startingIndex","endingIndex","substring","workerLogic","hamsterBlob","dataBlobURL","URL","createObjectURL","typedArrayFromBuffer","arr","order","prototype","sort","call","a","b","reverse","types","Uint32Array","Uint16Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","textContent","Blob","BlobMaker","locateBlobBuilder","blob","append","type","getBlob","Math","round","random","reduce","concat","i","len","bufferLength","offset","set","n","threadArrays","size","ceil","slice","subarray","logBook","warning","infoLog","warningLog","errorLog","errorFromThread","saveLogEntry","saveToLogBook","getLogEntries","fetchLogBook","searchLogEntries","searchLogBook","message","timeStamp","Date","now","timeStampedMessage","console","warn","errorMessage","lineno","filename","eventType","logBookEntries","string","searchResults","searchString","eventTypeResults","tmpEntries","findStringInLogBook","finalResults","findStringInLogBookAllTypes","total","wheel","workerScaffold","regularScaffold","reactNativeScaffold","legacyScaffold","self","rtn","addEventListener","incomingConnection","ports","start","incomingMessage","threadStart","threadEnd","eval","prepareReturn","returnObject","onmessage","Function","parse","setTimeout","running","pending","fetchHamster","grabHamster","arguments","item","runTask","threadId","spawnHamster","index","threadArray","registerTask","keepTrackOfThread","trainHamster","addWorkToPending","onThreadResponse","splice","returnOutputAndRemoveTask","processQueue","shift","terminate","onThreadError","onmessageerror","onerror","hamsterWheel","hamsterPool","maxCacheEntries","cacheEntries","itemCached","isItemCached","fetchItem","fetchItemFromCache","saveItem","saveItemToCache","method","fn","cacheItem","cachedResult","cache","itemToCache","cachedItems"],"mappings":"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","file":"hamsters.node.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0ee22d24bf0fb0877a7c","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersVersion from './core/version';\nimport hamstersHabitat from './core/habitat';\nimport hamstersPool from './core/pool';\nimport hamstersData from './core/data';\nimport hamstersWheel from './core/wheel';\nimport hamstersLogger from './core/logger';\nimport hamstersMemoizer from './core/memoizer';\n\n'use strict';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.version = hamstersVersion;\n    this.maxThreads = hamstersHabitat.logicalThreads;\n    this.habitat = hamstersHabitat;\n    this.data = hamstersData;\n    this.pool = hamstersPool;\n    this.logger = hamstersLogger;\n    this.memoizer = hamstersMemoizer;\n    this.run = this.hamstersRun;\n    this.promise = this.hamstersPromise;\n    this.init = this.initializeLibrary;\n  }\n\n  /**\n  * @function initializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    this.logger.info(`Preparing the hamster wheels & readying hamsters`);\n    if (typeof startOptions !== 'undefined') {\n      this.processStartOptions(startOptions);\n    }\n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      hamstersPool.spawnHamsters(this.habitat.persistence, this.maxThreads);\n    }\n    delete this.init;\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    // Add options to override library environment behavior\n    let habitatKeys = [\n      'worker', 'sharedworker',\n      'legacy', 'webworker',\n      'reactnative', 'atomics',\n      'proxies', 'transferrable',\n      'browser', 'shell', \n      'node', 'debug',\n      'persistence', 'importscripts'\n    ];\n    for (var key in startOptions) {\n      if (startOptions.hasOwnProperty(key)) {\n        if (habitatKeys.indexOf(key.toLowerCase()) !== -1) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          this[key] = startOptions[key];\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    if(typeof this.habitat.Worker === 'function' && startOptions['legacy'] !== true) {\n      this.habitat.legacy = false;\n    }\n  }\n\n  /**\n  * @constructor\n  * @function hamstersTask - Constructs a new task object from provided arguments\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @param {object} scope - Reference to main library context\n  * @return {object} new Hamsters.js task\n  */\n  hamstersTask(params, functionToRun, scope) {\n    this.id = scope.pool.tasks.length;\n    this.count = 0;\n    this.aggregate = (params.aggregate || false);\n    this.output = [];\n    this.workers = [];\n    this.memoize = (params.memoize || false);\n    this.dataType = (params.dataType ? params.dataType.toLowerCase() : null);\n    this.input = params;\n    // Do not modify function if we're running on the main thread for legacy fallback\n    if(scope.habitat.legacy) {\n      this.threads = 1;\n      this.input.hamstersJob = functionToRun;\n    } else {\n      this.threads = (params.threads || 1);\n      this.input.hamstersJob = scope.data.prepareJob(functionToRun);\n    }\n  }\n\n  /**\n  * @async\n  * @function hamstersPromise - Calls library functionality using async promises\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @return {array} Results from functionToRun.\n  */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      let task = new this.hamstersTask(params, functionToRun, this);\n      this.pool.scheduleTask(task, this).then((results) => {\n        resolve(results);\n      }).catch((error) => {\n        hamstersLogger.error(error.messsage, reject);\n      });\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} functionToRun - Function to execute\n  * @param {function} onSuccess - Function to call upon successful execution\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    let task = new this.hamstersTask(params, functionToRun, this);\n    this.pool.scheduleTask(task, this).then((results) => {\n      onSuccess(results);\n    }).catch((error) => {\n      hamstersLogger.error(error.messsage, onError);\n    });\n  }\n}\n\nvar hamsters = new hamstersjs();\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamsters;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/hamsters.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nconst majorVersion = 5;\nconst minorVersion = 1;\nconst patchVersion = 2;\nconst hamstersVersion = `${majorVersion}.${minorVersion}.${patchVersion}`;\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersVersion;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/version.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersData from './data';\nimport hamstersWheel from './wheel';\n\n'use strict';\n\nclass habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.debug = false;\n    this.importScripts = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.legacy = true;\n    this.legacyWheel = hamstersWheel.legacy,\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferrable = this.supportsTransferrableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE10 = !this.isNode() && !this.isReactNative() && this.isInternetExplorer(10);\n    this.logicalThreads = this.determineGlobalThreads();\n    this.Worker = this.locateWorkerObject();\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.selectHamsterWheel = this.selectHamsterWheel;\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(typeof navigator !== 'undefined') {\n      if(typeof navigator.hardwareConcurrency !== 'undefined') {\n        max = navigator.hardwareConcurrency;\n      }\n      if(max > 20 && navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {\n        max = 20;\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return typeof Worker !== 'undefined' ? Worker : null;\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return typeof SharedWorker !== 'undefined' ? SharedWorker : null;\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return typeof window === \"object\";\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer(version) {\n    return (new RegExp('msie' + (!isNaN(version) ? ('\\\\s'+version) : ''), 'i').test(navigator.userAgent));\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.isBrowser();\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a webworker\n  */\n  isWebWorker() {\n    return typeof importScripts === \"function\";\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is reactNative\n  */\n  isReactNative() {\n    return !this.isNode() && typeof global === 'object' && !this.isBrowser();\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return this.isBrowser() && !this.isNode() && !this.isWebWorker() && !this.isReactNative();\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    // Force legacy mode for known devices that don't support threading\n    if (this.isBrowser() && !this.isReactNative()) {\n      let userAgent = navigator.userAgent;\n      let lacksWorkerSupport = (typeof this.Worker === 'undefined');\n      let legacyAgents = ['Kindle/3.0', 'Mobile/8F190', 'IEMobile'];\n      if (lacksWorkerSupport || legacyAgents.indexOf(userAgent) !== -1 || this.isIE10) {\n        this.legacy = true;\n      }\n    }\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      try {\n        let workerBlob = hamstersData.generateBlob();\n        let SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n      } catch (e) {\n        this.legacy = true;\n      }\n    }\n    // Final check, if we're in a shell environment or we have no worker object use legacy mode\n    if(!this.legacy) {\n      return this.isShell() || !this.locateWorkerObject();\n    }\n  }\n\n  /**\n  * @function supportsTransferrableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferrableObjects() {\n    return typeof Uint8Array !== 'undefined';\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports shared array buffers\n  */\n  supportsAtomicOperations() {\n    return typeof SharedArrayBuffer !== 'undefined';\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports proxy objects\n  */\n  supportsProxies() {\n    return typeof Proxy !== 'undefined';\n  }\n\n  /**\n  * @function scheduleTask - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.isIE10) {\n      return './common/hamstersWheel.js';\n    }\n    if(this.reactNative) {\n      return hamstersWheel.reactNative;\n    }\n    if(this.webWorker) {\n      return hamstersWheel.worker;\n    }\n    if (this.node) {\n      return hamstersWheel.regular;\n    }\n    return hamstersData.generateWorkerBlob(hamstersWheel.regular);\n  }\n}\n\nvar hamstersHabitat = new habitat();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersHabitat;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/habitat.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersHabitat from './habitat';\nimport hamstersLogger from './logger';\n\n'use strict';\n\nclass data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.randomArray = this.randomArray;\n    this.aggregateArrays = this.aggregateThreadOutputs;\n    this.splitArrays = this.splitArrayIntoSubArrays;\n    this.createBlob = this.createDataBlob;\n    this.generateWorkerBlob = this.generateWorkerBlob;\n    this.processDataType = this.processDataType;\n    this.sortOutput = this.sortArray;\n    this.getOutput = this.prepareOutput;\n    this.prepareJob = this.prepareFunction;\n    this.feedHamster = this.messageWorker;\n    this.prepareMeal = this.prepareHamsterFood;\n    this.workerURI = null;\n  }\n\n  /**\n  * @function prepareHamsterFood - Prepares message to send to thread(s)\n  * @param {object} task - Task to process\n  */\n  prepareHamsterFood(task) {\n    let hamsterFood = task.input;\n    for (var key in task.input) {\n      if (task.input.hasOwnProperty(key) && key !== 'array') {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n    hamsterFood.array = task.input.array;\n    if (task.hamstersJob && !hamsterFood.hamstersJob) {\n      hamsterFood.hamstersJob = hamstersJob;\n    }\n    return hamsterFood;\n  }\n\n  /**\n  * @function messageWorker - Prepares message to send to thread\n  * @param {worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorker(hamster, hamsterFood, habitat) {\n    if(habitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    if (habitat.ie10) {\n      return hamster.postMessage(hamsterFood);\n    }\n    if (habitat.webWorker) {\n      return hamster.port.postMessage(hamsterFood);\n    }\n    return hamster.postMessage(hamsterFood, this.prepareTransferBuffers(hamsterFood, habitat.transferrable));\n  }\n\n  /**\n  * @function prepareTransferBuffers - Prepares transferrable buffers for faster message passing\n  * @param {object} hamsterFood - Message to send to thread\n  */\n  prepareTransferBuffers(hamsterFood, transferrable) {\n    let buffers = [];\n    let key = null;\n    if(transferrable) {\n      for (key in hamsterFood) {\n        if (hamsterFood.hasOwnProperty(key) && hamsterFood[key]) {\n          if(hamsterFood[key].buffer) {\n            buffers.push(hamsterFood[key].buffer);\n          } else if(Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n            buffers.push(new ArrayBuffer(hamsterFood[key]));\n          }\n        }\n      }\n    }\n    return buffers;\n  }\n\n  /**\n  * @function prepareFunction - Prepares transferrable buffers for faster message passing\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareFunction(functionBody) {\n    if (!hamstersHabitat.legacy) {\n      functionBody = String(functionBody);\n      if (!hamstersHabitat.webWorker) {\n        let startingIndex = (functionBody.indexOf(\"{\") + 1);\n        let endingIndex = (functionBody.length - 1);\n        return functionBody.substring(startingIndex, endingIndex);\n      }\n    }\n    return functionBody;\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates blob uri for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    let hamsterBlob = this.createDataBlob('(' + String(workerLogic) + ')();');\n    let dataBlobURL = URL.createObjectURL(hamsterBlob);\n    return dataBlobURL;\n  }\n\n  /**\n  * @function processDataType - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  processDataType(dataType, buffer) {\n    if(hamstersHabitat.transferrable) {\n      return this.typedArrayFromBuffer(dataType, buffer);\n    }\n    return buffer;\n  }\n\n  /**\n  * @function prepareOutput - Prepares final task output\n  * @param {task} buffer - Task to prepare output for\n  */\n  prepareOutput(task) {\n    if(task.aggregate && task.threads !== 1) {\n      return this.aggregateThreadOutputs(task.output, task.dataType);\n    }\n    return task.output;\n  }\n\n  /**\n  * @function sortArray - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortArray(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'uint32': Uint32Array,\n      'uint16': Uint16Array,\n      'uint8': Uint8Array,\n      'uint8clamped': Uint8ClampedArray,\n      'int32': Int32Array,\n      'int16': Int16Array,\n      'int8': Int8Array,\n      'float32': Float32Array,\n      'float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return dataType;\n    }\n    return new types[dataType](buffer);\n  }\n\n\n  /**\n  * @function createDataBlob - Attempts to locate data blob builder, vender prefixes galore\n  */\n  locateBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return hamstersLogger.error('Environment does not support data blobs!');\n  }\n\n  /**\n  * @function createDataBlob - Creates new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function randomArray - Creates new random array\n  * @param {number} count - Number of random elements in array\n  * @param {function} onSuccess - onSuccess callback\n  */\n  randomArray(count, onSuccess) {\n    var randomArray = [];\n    while(count > 0) {\n      randomArray.push(Math.round(Math.random() * (100 - 1) + 1));\n      count -= 1;\n    }\n    onSuccess(randomArray);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType || !hamstersHabitat.transferrable) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function splitArrayIntoSubArrays - Splits a single array into multiple equal sized subarrays\n  * @param {array} array - Array to split\n  * @param {number} n - Number of subarrays to create\n  */\n  splitArrayIntoSubArrays(array, n) {\n    let i = 0;\n    let threadArrays = [];\n    let size = Math.ceil(array.length/n);\n    if(array.slice) {\n      while(i < array.length) {\n        threadArrays.push(array.slice(i, i += size));\n      }\n    } else {\n      while (i < array.length) {\n        threadArrays.push(array.subarray(i, i += size));\n      }\n    }\n    return threadArrays;\n  }\n}\n\nvar hamstersData = new data();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersData;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/data.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersVersion from './version';\n\n'use strict';\n\nclass logger {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.logBook = {\n      error: [], \n      warning: [], \n      info: []\n    };\n    this.info = this.infoLog;\n    this.warning = this.warningLog;\n    this.error = this.errorLog;\n    this.errorFromThread = this.errorFromThread;\n    this.saveLogEntry = this.saveToLogBook;\n    this.getLogEntries = this.fetchLogBook;\n    this.searchLogEntries = this.searchLogBook;\n  }\n\n  infoLog(message) {\n    let timeStamp = Date.now();\n    let timeStampedMessage = `Hamsters.js v${hamstersVersion} Info: ${message} @ ${timeStamp}`;\n    this.saveLogEntry('info', timeStampedMessage);\n    console.info(timeStampedMessage);\n  }\n\n  warningLog(message) {\n    let timeStamp = Date.now();\n    let timeStampedMessage = `Hamsters.js v${hamstersVersion} Warning: ${message} @ ${timeStamp}`;\n    this.saveLogEntry('warning', timeStampedMessage);\n    console.warn(timeStampedMessage);\n  }\n\n  errorLog(message, reject) {\n    let timeStamp = Date.now();\n    let timeStampedMessage = `Hamsters.js v${hamstersVersion} Error: ${message} @ ${timeStamp}`;\n    this.saveLogEntry('error', timeStampedMessage);\n    console.error(timeStampedMessage);\n    if(reject) {\n      reject(timeStampedMessage);\n    } else {\n      return timeStampedMessage;\n    }\n  }\n\n  errorFromThread(error, reject) {\n    let errorMessage = `#${error.lineno} in ${error.filename}: ${error.message}`;\n    this.errorLog(errorMessage, reject);\n  }\n\n  saveToLogBook(eventType, message) {\n    this.logBook[eventType].push(message);\n  }\n\n  fetchLogBook(eventType) {\n    if(eventType) {\n      return this.logBook[eventType];\n    }\n    return this.logBook;\n  }\n\n  findStringInLogBook(logBookEntries, string) {\n    let searchResults = [];\n    let i = 0;\n    for (i; i < logBookEntries.length; i++) {\n      if(logBookEntries[i].indexOf(string) !== -1) {\n        searchResults.push(logBookEntries[i]);\n      }\n    }\n    return searchResults;\n  }\n\n  findStringInLogBookAllTypes(logBook, searchString) {\n    let searchResults = [];\n    let key, eventTypeResults, tmpEntries = null;\n    for(key in logBook) {\n      if(logBook.hasOwnProperty(key)) {\n        tmpEntries = logBook[key];\n        eventTypeResults = this.findStringInLogBook(tmpEntries, searchString);\n      }\n    }\n    return searchResults;\n  }\n\n  searchLogBook(searchString, eventType) {\n    let finalResults = [];\n    if(eventType) {\n      finalResults = this.findStringInLogBook(this.logBook[eventType], string);\n    } else {\n      finalResults = this.findStringInLogBookAllTypes(this.logBook);\n    }\n    return {\n      total: finalResults.length,\n      results: finalResults\n    };\n  }   \n}\n\nvar hamstersLogger = new logger();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersLogger;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/logger.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersData from './data';\nimport hamstersHabitat from './habitat';\n\n'use strict';\n\nclass wheel {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.worker = this.workerScaffold;\n    this.regular = this.regularScaffold;\n    this.reactNative = this.reactNativeScaffold;\n    this.legacy = this.legacyScaffold;\n  }\n\n  /**\n  * @function workerScaffold - Provides worker body for library functionality when used within a worker [threads inside threads]\n  */\n  workerScaffold() {\n    'use strict';\n\n    if(typeof self === 'undefined') {\n      self = (global || window || this);\n    }\n\n    self.params = {};\n    self.rtn = {};\n\n    addEventListener('connect', (incomingConnection) => {\n      const port = incomingConnection.ports[0];\n      port.start();\n      port.addEventListener('message', (incomingMessage) => {\n        params = incomingMessage.data;\n        rtn = {\n          data: [],\n          dataType: params.dataType,\n          threadStart: Date.now(),\n          threadEnd: null\n        };\n        if(params.importScripts) {\n          self.importScripts(params.importScripts);\n        }\n        eval(\"(\" + params.hamstersJob + \")\")();\n        rtn.threadEnd = Date.now();\n        port.postMessage(rtn);\n      }, false);\n    }, false);\n  }\n\n  /**\n  * @function workerScaffold - Provides worker body for library functionality\n  */\n  regularScaffold() {\n    'use strict';\n\n    if(typeof self === 'undefined') {\n      let self = (global || window || this);\n    }\n\n    self.params = {};\n    self.rtn = {};\n\n    function prepareReturn(returnObject) {\n      let dataType = returnObject.dataType;\n      if(dataType) {\n        returnObject.data = typedArrayFromBuffer(dataType, returnObject.data);\n      }\n      return returnObject;\n    }\n\n    function typedArrayFromBuffer(dataType, buffer) {\n      const types = {\n        'uint32': Uint32Array,\n        'uint16': Uint16Array,\n        'uint8': Uint8Array,\n        'uint8clamped': Uint8ClampedArray,\n        'int32': Int32Array,\n        'int16': Int16Array,\n        'int8': Int8Array,\n        'float32': Float32Array,\n        'float64': Float64Array\n      };\n      if (!types[dataType]) {\n        return buffer;\n      }\n      return new types[dataType](buffer);\n    }\n\n    function prepareTransferBuffers(hamsterFood) {\n      let buffers = [];\n      let key = null;\n      for (key in hamsterFood) {\n        if (hamsterFood.hasOwnProperty(key) && hamsterFood[key]) {\n          if(hamsterFood[key].buffer) {\n            buffers.push(hamsterFood[key].buffer);\n          } else if(Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n            buffers.push(new ArrayBuffer(hamsterFood[key]));\n          }\n        }\n      }\n      return buffers;\n    }\n\n    self.onmessage = function(incomingMessage) {\n      params = incomingMessage.data;\n      rtn = {\n        data: [],\n        dataType: (params.dataType ? params.dataType.toLowerCase() : null),\n        threadStart: Date.now(),\n        threadEnd: null\n      };\n      if(params.importScripts) {\n        self.importScripts(params.importScripts);\n      }\n      new Function(params.hamstersJob)();\n      rtn.threadEnd = Date.now();\n      postMessage(prepareReturn(rtn), prepareTransferBuffers(rtn));\n    }\n  }\n\n  reactNativeScaffold() {\n   'use strict';\n\n    self.params = {};\n    self.rtn = {};\n\n    self.onmessage = function(incomingMessage) {\n      params = JSON.parse(incomingMessage.data);\n      rtn = {\n        data: [],\n        dataType: (params.dataType ? params.dataType.toLowerCase() : null),\n        threadStart: Date.now(),\n        threadEnd: null\n      };\n      if(params.importScripts) {\n        self.importScripts(params.importScripts);\n      }\n      new Function(params.hamstersJob)();\n      rtn.threadEnd = Date.now();\n      postMessage(prepareReturn(rtn));\n    };\n\n    function prepareReturn(returnObject) {\n      var dataType = returnObject.dataType;\n      if(dataType) {\n        returnObject.data = typedArrayFromBuffer(dataType, returnObject.data);\n      }\n      return JSON.stringify(returnObject);\n    }\n\n    function typedArrayFromBuffer(dataType, buffer) {\n      var types = {\n        'uint32': Uint32Array,\n        'uint16': Uint16Array,\n        'uint8': Uint8Array,\n        'uint8clamped': Uint8ClampedArray,\n        'int32': Int32Array,\n        'int16': Int16Array,\n        'int8': Int8Array,\n        'float32': Float32Array,\n        'float64': Float64Array\n      };\n      if (!types[dataType]) {\n        return buffer;\n      }\n      return new types[dataType](buffer);\n    }\n  }\n\n  /**\n  * @function legacyScaffold - Provides library functionality for legacy devices\n  */\n  legacyScaffold(params, resolve, reject) {\n    setTimeout(() => {\n      if(typeof self === 'undefined') {\n        var self = (global || window || this);\n      }\n      self.params = params;\n      self.rtn = {\n        data: [],\n        threadStart: Date.now(),\n        threadEnd: null\n      };\n      params.hamstersJob();\n      rtn.threadEnd = Date.now();\n      resolve(rtn);\n    }, 4); //4ms delay (HTML5 spec minimum), simulate threading\n  }\n};\n\nvar hamstersWheel = new wheel();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersWheel;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/wheel.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport hamstersData from './data';\nimport hamstersHabitat from './habitat';\nimport hamstersLogger from './logger';\n\n'use strict';\n\nclass pool {\n\t\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.tasks = [];\n\t  this.threads = [];\n    this.running = [];\n    this.pending = [];\n    this.fetchHamster = this.grabHamster;\n  }\n\n  /**\n  * @function grabHamster - Adds task to queue waiting for available thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(array, task, persistence, wheel, resolve, reject) {\n  \tthis.pending.push(arguments);\n  }\n\n  /**\n  * @function grabHamster - Invokes processing of next item in queue\n  * @param {object} item - Task to process\n  */\n  processQueue(item) {\n  \treturn this.runTask(item[0], item[1], item[2], item[3], item[4]);\n  }\n\n  /**\n  * @function grabHamster - Keeps track of threads running, scoped globally and to task\n  * @param {number} threadId - Id of thread\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  */\n  grabHamster(threadId, habitat) {\n    if(habitat.persistence) {\n      return this.threads[threadId];\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    task.workers.push(id); //Keep track of threads poold to current task\n    this.running.push(id); //Keep track of all currently running threads\n  }\n\n  /**\n  * @function registerTask - Adds task to execution pool based on id\n  * @param {number} id - Id of task to register\n  */\n  registerTask(id) {\n    let index = this.tasks.push(id);\n    return this.tasks[(index - 1)];\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {number} maxThreds - Max number of threads for this client\n  */\n  spawnHamsters(persistence, maxThreads) {\n    hamstersLogger.info(`${maxThreads} Logical Threads Detected, Spawning ${maxThreads} Hamsters`);\n    for (maxThreads; maxThreads > 0; maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n    hamstersLogger.info(`${this.threads.length} hamsters ready and awaiting instructions`);\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {string} workerURI - URI for created library blob object \n  */\n  spawnHamster() {\n    if (hamstersHabitat.webWorker) {\n      return new hamstersHabitat.SharedWorker(hamstersHabitat.selectHamsterWheel(), 'SharedHamsterWheel');\n    }\n    return new hamstersHabitat.Worker(hamstersHabitat.selectHamsterWheel());\n  }\n\n  /**\n  * @function prepareMeal - Prepares message to send to a thread and invoke execution\n  * @param {object} threadArray - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @return {object} hamsterFood - Prepared message to send to a thread\n  */\n  prepareMeal(threadArray, task) {\n    let hamsterFood = {\n    \tarray: threadArray\n    };\n    for (var key in task.input) {\n      if (task.input.hasOwnProperty(key) && ['array', 'threads'].indexOf(key) == -1) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n    return hamsterFood;\n  }\n\n  /**\n  * @function hamsterWheel - Runs function using thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(array, task, scope, resolve, reject) {\n  \tlet threadId = this.running.length;\n    let hamsterFood = this.prepareMeal(array, task);\n    this.registerTask(task.id);\n    this.keepTrackOfThread(task, threadId);\n    if(scope.habitat.legacy) {\n      scope.habitat.legacyWheel(hamsterFood, resolve, reject);\n    } else {\n      let hamster = this.grabHamster(threadId, scope.habitat);\n      this.trainHamster(threadId, task, hamster, scope, resolve, reject);\n      scope.data.feedHamster(hamster, hamsterFood, scope.habitat);\n    }\n    task.count += 1; //Increment count, thread is running\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {object} array - Provided library functionality options for this task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(array, task, scope, resolve, reject) {\n    if(scope.maxThreads === this.running.length) {\n      return this.addWorkToPending(array, task, scope, resolve, reject);\n    }\n    return this.runTask(array, task, scope, resolve, reject);\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    let output = hamstersData.getOutput(task, hamstersHabitat.transferrable);\n    if (task.sort) {\n      output = hamstersData.sortOutput(output, task.sort);\n    }\n    this.tasks[task.id] = null; //Clean up our task, not needed any longer\n    resolve({\n      data: output\n    });\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {worker} hamster - Thread to train\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(threadId, task, hamster, scope, resolve, reject) {\n    let pool = this;\n    // Handle successful response from a thread\n    function onThreadResponse(message) {\n      let results = message.data;\n      pool.running.splice(pool.running.indexOf(threadId), 1); //Remove thread from running pool\n    \ttask.workers.splice(task.workers.indexOf(threadId), 1); //Remove thread from task running pool\n      // String only communcation for rn...in 2k18\n      if(scope.habitat.reactNative) {\n        task.output[threadId] = JSON.parse(results.data);\n      } else {\n        task.output[threadId] = results.data;\n      }\n      if (task.workers.length === 0 && task.count === task.threads) {\n        pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (pool.pending.length !== 0) {\n        pool.processQueue(pool.pending.shift());\n      }\n      if (!scope.habitat.persistence && !scope.habitat.webWorker) {\n        hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n      }\n    }\n    // Handle error response from a thread\n    function onThreadError(error) {\n      hamstersLogger.errorFromThread(error, reject);\n    }\n    // Register on message/error handlers\n    if (hamstersHabitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onmessageerror = onThreadError;\n      hamster.port.onerror = onThreadError;\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = onThreadError;\n      hamster.onerror = onThreadError;\n    }\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Scaffold to execute login within\n  * @param {number} maxThreads - Maximum number of threads for this client\n  */\n  scheduleTask(task, scope) {\n    let threadArrays = [];\n\t  if(task.input.array && task.threads !== 1) {\n\t    threadArrays = scope.data.splitArrays(task.input.array, task.threads); //Divide our array into equal array sizes\n\t  }\n  \treturn new Promise((resolve, reject) => {\n      let i = 0;\n      while (i < task.threads) {\n      \tif(threadArrays && task.threads !== 1) {\n        \tthis.hamsterWheel(threadArrays[i], task, scope, resolve, reject);\n\t\t    } else {\n        \tthis.hamsterWheel(task.input.array, task, scope, resolve, reject);\n\t\t    }\n        i += 1;\n      }\n    });\n  }\n}\n\nvar hamsterPool = new pool();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamsterPool;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/pool.js","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nclass memoizer {\n  \n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.maxCacheEntries = 25;\n    this.cacheEntries = [];\n    this.itemCached = this.isItemCached;\n    this.fetchItem = this.fetchItemFromCache;\n    this.saveItem = this.saveItemToCache;\n  }\n\n  /**\n  * @function isItemCached - Checks for existing data in cache\n  * @param {object} input - Provided library execution options\n  * @param {method} functionToRun - Function to execute\n  * @return {object} Execution results from cache, or false\n  */\n  isItemCached(input, method) {\n  \treturn !!(this.fetchItem({fn: method, data: input})) || false;\n  }\n\n  /**\n  * @function fetchItemFromCache - Fetches cache item from cache\n  * @param {object} cacheItem - Cache item to fetch\n  * @return {object} CacheResults, or false\n  */\n  fetchItemFromCache(cacheItem) {\n  \tlet cachedResult = null;\n  \tfor(var key in this.cache) {\n  \t\tif(this.cache.hasOwnProperty(key)) {\n  \t\t\tif(cacheItem[key].fn === cacheItem.fn) {\n  \t\t\t\tif(cacheItem[key].input === cacheItem.data) {\n  \t\t\t\t\tcachedResult = cacheItem[key].input;\n  \t\t\t\t}\n  \t\t\t}\n  \t\t}\n  \t}\n  \treturn cachedResult || false;\n  }\n\n  /**\n  * @function isItemCached - Checks for existing data in cache\n  * @param {method} functionToRun - Function to execute\n  * @param {object} data - Execution results to cache\n  */\n  saveItemToCache(method, data, maxCacheEntries) {\n  \tlet itemToCache = {\n  \t\tfn: method,\n  \t\tinput: data\n  \t};\n  \tlet cachedItems = this.cacheEntries;\n  \tif(cachedItems.length < maxCacheEntries) {\n  \t\tcachedItems.push(itemToCache);\n  \t} else {\n  \t\tcachedItems.splice(0, 0, itemToCache); \n  \t}\n  \tthis.cacheEntries = cachedItems;\n  }\n}\n\nvar hamstersMemoizer = new memoizer();\n\nif(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = hamstersMemoizer;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/core/memoizer.js"],"sourceRoot":""}