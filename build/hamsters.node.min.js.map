{"version":3,"file":"hamsters.node.min.js","mappings":"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","sources":["webpack://hamsters/webpack/universalModuleDefinition","webpack://hamsters/./scaffold/legacy.js","webpack://hamsters/./scaffold/regular.js","webpack://hamsters/./scaffold/shared.js","webpack://hamsters/webpack/bootstrap","webpack://hamsters/webpack/runtime/define property getters","webpack://hamsters/webpack/runtime/hasOwnProperty shorthand","webpack://hamsters/./core/habitat.js","webpack://hamsters/./core/pool.js","webpack://hamsters/./core/data.js","webpack://hamsters/./core/task.js","webpack://hamsters/./feature/stores/NodeStore.js","webpack://hamsters/./feature/stores/WebStore.js","webpack://hamsters/./feature/memoize.js","webpack://hamsters/./feature/distribute.js","webpack://hamsters/./feature/observable.js","webpack://hamsters/./hamsters.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hamsters\"] = factory();\n\telse\n\t\troot[\"hamsters\"] = factory();\n})(global, () => {\nreturn ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Legacy {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor(hamsters) {\n      this.hamsters = hamsters;\n      this.scaffold = (params, resolve, reject) => {\n        var rtn = {\n          data: [],\n          dataType: (typeof params.dataType !== \"undefined\" ? params.dataType : null)\n        };\n        if(this.hamsters.habitat.reactNative) {\n          self.rtn = rtn;\n        }\n        if(this.hamsters.habitat.node || this.hamsters.habitat.isIE) {\n          eval(params.hamstersJob);\n        } else {\n          params.hamstersJob();\n        }\n        resolve(rtn.data);\n      }\n    }\n  }\n  \n  export default Legacy;\n  ","class Regular {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n        this.scaffold = function() {\n            self.params = {};\n            self.rtn = {};\n\n            self.onmessage = function (message) {\n                this.params = message.data;\n                this.rtn = {\n                    data: [],\n                    dataType: (typeof this.params.dataType !== 'undefined' ? this.params.dataType : null),\n                    index: this.params.index\n                };\n                if (this.params.sharedBuffer) {\n                    this.params.sharedArray = typedArrayFromBuffer(this.params.dataType, this.params.sharedBuffer);\n                }\n                eval(this.params.hamstersJob);\n                const buffers = handleDataType(this.rtn);\n                returnResponse(this.rtn, buffers);\n            }.bind(this);\n\n            function handleDataType(rtn) {\n                if (this.params.sharedArray) {\n                    // Do nothing here, we don't need to return a buffer rtn.data is useless here\n                } else if (this.params.dataType) {\n                    rtn.data = typedArrayFromBuffer(rtn.dataType, rtn.data);\n                }\n                return getTransferableObjects(rtn); // Return transferable objects\n            }\n\n            function typedArrayFromBuffer(dataType, buffer) {\n                const types = {\n                    'Uint32': Uint32Array,\n                    'Uint16': Uint16Array,\n                    'Uint8': Uint8Array,\n                    'Uint8clamped': Uint8ClampedArray,\n                    'Int32': Int32Array,\n                    'Int16': Int16Array,\n                    'Int8': Int8Array,\n                    'Float32': Float32Array,\n                    'Float64': Float64Array\n                };\n                return types[dataType] ? new types[dataType](buffer) : buffer;\n            }\n\n            function returnResponse(rtn, buffers) {\n                if (buffers && buffers.length > 0) {\n                    postMessage(rtn, buffers);  // PostMessage with transferable objects\n                } else {\n                    postMessage(rtn);  // PostMessage without transferable objects\n                }\n            }\n\n            function getTransferableObjects(obj) {\n                const transferableObjects = new Set();\n                const typedArrayTypes = [\n                    'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array',\n                    'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n                ];\n                const otherTransferables = [\n                    'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n                ];\n\n                const globalContext = typeof self !== 'undefined' ? self : window;\n\n                const allTypes = [...typedArrayTypes, ...otherTransferables];\n\n                for (const prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        for (const type of allTypes) {\n                            if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n                                if (typedArrayTypes.includes(type)) {\n                                    transferableObjects.add(obj[prop].buffer);\n                                } else {\n                                    transferableObjects.add(obj[prop]);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return Array.from(transferableObjects);\n            }\n        }\n    }\n}\n\nexport default Regular;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Shared {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n      this.scaffold = function() {\n        self.params = {};\n        self.rtn = {};\n    \n        addEventListener('connect', (incomingConnection) => {\n          var port = incomingConnection.ports[0];\n          port.start();\n          port.addEventListener('message', (incomingMessage) => {\n            this.params = incomingMessage.data;\n            this.rtn = {\n              data: [],\n              dataType: this.params.dataType\n            };\n            eval(\"(\" + this.params.hamstersJob + \")\")();\n            port.postMessage(this.rtn);\n          }, false);\n        }, false);\n      }\n    }\n  }\n  \n  export default Shared;\n  ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.debug = false;\n    this.importScripts = null;\n    this.relay = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferable = this.supportsTransferableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE = this.isInternetExplorer();\n    this.selectHamsterWheel = this.selectHamsterWheel.bind(this);\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.locateBlobBuilder = this.findAvailableBlobBuilder();\n    this.legacy = this.isLegacyEnvironment();\n    this.Worker = this.locateWorkerObject();\n    this.maxThreads = this.determineGlobalThreads();\n    this.keys = this.getHabitatKeys();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(this.browser && typeof navigator.hardwareConcurrency !== \"undefined\") {\n      max = navigator.hardwareConcurrency;\n      if(this.isFirefox()) {\n        max = (max > 20 ? 20 : max);\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function isFirefox - Detect firefox browser\n  */\n  isFirefox() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return (typeof Worker !== 'undefined' ? Worker : false);\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return (typeof SharedWorker !== 'undefined' ? SharedWorker : false);\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return (typeof window === \"object\");\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.indexOf(\"MSIE \") !== -1 || navigator.userAgent.indexOf(\"Trident/\") !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return (typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser);\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a web worker\n  */\n  isWebWorker() {\n    return (typeof importScripts === \"function\" && !this.isReactNative());\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is React Native\n  */\n  isReactNative() {\n    return (typeof navigator !== \"undefined\" && typeof navigator.product !== \"undefined\" && navigator.product === \"ReactNative\");\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return ((typeof navigator === \"undefined\") && !this.isNode() && !this.isWebWorker() && !this.isReactNative());\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = !!!this.Worker;\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy;\n  }\n\n  /**\n  * @function supportsSharedWorkers - Detects if execution environment supports SharedWorkers\n  */\n  supportsSharedWorkers() {\n    let supports = false;\n    try {\n      let workerBlob = this.generateWorkerBlob(this.selectHamsterWheel());\n      let SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n      supports = true;\n    } catch (e) {\n      supports = false;\n    }\n    return supports;\n  }\n\n  /**\n  * @function findAvailableBlobBuilder - Attempts to locate a data blob builder, with vendor prefixes\n  */\n  findAvailableBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return 'Environment does not support data blobs!';\n  }\n\n  /**\n  * @function createDataBlob - Creates a new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates a blob URI for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    return URL.createObjectURL(this.createDataBlob(`(${workerLogic.toString()})();`));\n  }\n\n  /**\n  * @function supportsTransferableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferableObjects() {\n    return (typeof Uint8Array !== 'undefined');\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports SharedArrayBuffers\n  */\n  supportsAtomicOperations() {\n    return (typeof SharedArrayBuffer !== 'undefined');\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports Proxy objects\n  */\n  supportsProxies() {\n    return (typeof Proxy !== 'undefined');\n  }\n\n  /**\n  * @function selectHamsterWheel - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.hamsters.scaffold.custom) {\n      return this.hamsters.scaffold.custom;\n    }\n    if(this.isIE) {\n      return this.hamsters.scaffold.legacy.scaffold;\n    }\n    if(this.reactNative) {\n      return 'reactNativeHamster.js';\n    }\n    if (this.node) {\n      return './node_modules/hamsters.js/build/common/node.js';\n    }\n    return this.generateWorkerBlob(this.hamsters.scaffold.regular.scaffold);\n  }\n\n  /**\n  * @function getHabitatKeys - Returns keys for this Habitat instance\n  */\n  getHabitatKeys() {\n    return [\n      'worker','sharedworker',\n      'legacy','proxies',\n      'reactnative','atomics',\n      'transferable','browser',\n      'shell','node','debug',\n      'persistence','importscripts',\n      'maxthreads', 'parentport',\n      'webworker', 'relay'\n    ];\n  }\n}\n\nexport default Habitat;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Pool {\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.threads = new hamsters.observable([]);\n    this.running = new hamsters.observable([]);\n    this.pending = new hamsters.observable([]);\n    this.fetchHamster = this.getAvailableThread.bind(this);\n  }\n\n  /**\n  * @function addWorkToPending - Adds task to queue waiting for available thread\n  * @param {number} index - Index of the task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(index, hamsterFood, task, resolve, reject) {\n    if (this.hamsters.habitat.debug) {\n      \n      task.scheduler.metrics.threads[task.scheduler.count].enqueued_at = Date.now();\n    }\n    this.pending.push({\n      index,\n      hamsterFood,  \n      task,\n      resolve,\n      reject\n    });\n  }\n\n  /**\n  * @function processQueuedItem - Invokes processing of next item in queue\n  * @param {object} hamster - The thread to run the task\n  * @param {object} item - Task to process\n  */\n  processQueuedItem(hamster, item) {\n    if (this.hamsters.habitat.debug) {\n      item.task.scheduler.metrics.threads[item.index.id].dequeued_at = Date.now();\n    }\n    return this.runTask(hamster, item.index, item.hamsterFood, item.task, item.resolve, item.reject);\n  }\n\n  /**\n  * @function getAvailableThread - Gets an available thread\n  * @param {number} threadId - Id of the thread\n  * @returns {object} - The available thread\n  */\n  getAvailableThread(threadId) {\n    if (this.hamsters.habitat.persistence) {\n      return this.threads.get(threadId);\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[id].started_at = Date.now();\n    }\n    task.scheduler.workers.push(id);\n    this.running.push(id);\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {number} maxThreads - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    while (maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    const { selectHamsterWheel, SharedWorker, Worker } = this.hamsters.habitat;\n    const hamsterWheel = selectHamsterWheel();\n    if (this.hamsters.habitat.webWorker) {\n      return new SharedWorker(hamsterWheel, 'SharedHamsterWheel');\n    }\n    return new Worker(hamsterWheel);\n  }\n    \n  /**\n   * @function prepareMeal\n   * @description Prepares message to send to a thread and invoke execution\n   * @param {number} index - Index of the subarray to process\n   * @param {number} subTaskId - Subtask ID\n   * @param {object} task - Provided library functionality options for this task\n   * @returns {object} - Prepared message to send to a thread\n   */\n  prepareMeal(index, subTaskId, task) {\n    index.id = subTaskId;\n\n    // Prepare the base hamsterFood object\n    const hamsterFood = {\n      array: task.input.array && task.input.array.length !== 0 ? \n            this.hamsters.data.getSubArrayFromIndex(index, task.input.array) : [],\n      index: index\n    };\n\n    // Add sharedBuffer if it exists\n    if (typeof task.scheduler.sharedBuffer !== 'undefined') {\n      hamsterFood.sharedBuffer = task.scheduler.sharedBuffer;\n    }\n\n    // List of excluded keys\n    const excludedKeys = new Set(['array', 'threads', 'sharedArray']);\n\n    // Iterate over task.input properties and add to hamsterFood\n    for (const key in task.input) {\n      if (task.input.hasOwnProperty(key) && !excludedKeys.has(key)) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n\n    return hamsterFood;\n  }\n\n  /**\n  * @function runDistributedTask - Runs incoming distributed function using thread\n  * @param {object} incomingMessage - The incoming subTask object\n  */\n  runDistributedTask(incomingMessage, targetClient) {\n    const hamster = this.fetchHamster(this.running.length());\n    let task = incomingMessage.task;\n    let index = incomingMessage.hamsterFood.index;\n    let handleResponse = this.hamsters.distribute.returnDistributedOutput;\n    task.targetClient = targetClient;\n    task.messageId = incomingMessage.messageId;\n    task.isReply = true;\n\n    this.runTask(hamster, index, incomingMessage.hamsterFood, incomingMessage.task, handleResponse, handleResponse);\n  }\n\n  /**\n  * @function runTask - Runs function using thread\n  * @param {object} hamster - The thread to run the task\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, index, hamsterFood, task, resolve, reject) {\n    const threadId = this.running.length();\n    this.hamsters.pool.keepTrackOfThread(task, threadId);\n    if (this.hamsters.habitat.legacy) {\n      this.hamsters.scaffold.legacy.scaffold(hamsterFood, resolve, reject);\n    } else {\n      this.hamsters.pool.trainHamster(index, task, threadId, hamster, resolve, reject);\n      this.hamsters.data.feedHamster(hamster, hamsterFood);\n    }\n    task.scheduler.count += 1;\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(index, subTaskId, task, resolve, reject) {\n    const hamsterFood = this.prepareMeal(index, subTaskId, task);\n    if (this.hamsters.habitat.maxThreads <= this.running.length()) {\n      this.addWorkToPending(index, hamsterFood, task, resolve, reject);\n    } else {\n      if(task.input.distribute) {\n        this.hamsters.distribute.distributeTask(task, hamsterFood, resolve, reject);\n      } else {\n        const hamster = this.fetchHamster(this.running.length());\n        this.runTask(hamster, index, hamsterFood, task, resolve, reject);\n      }\n    }\n  }\n\n  processDistributedReturn(data) {\n    debugger;\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - Gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    if(task.scheduler.sharedBuffer) {\n      task.output = hamsters.data.processDataType(task.input.dataType, task.scheduler.sharedBuffer);\n    }\n    if(task.input.aggregate) {\n      task.output = this.hamsters.data.aggregateThreadOutputs(task.output, task.input.dataType);\n    }\n    if(task.input.sort) {\n      task.output = this.hamsters.data.sortOutput(task.output, task.input.sort)\n    }\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.completed_at = Date.now();\n      console.info(\"Hamsters.js Task Completed: \", task);\n    }\n    if(task.input.distribute) {\n      resolve(task);\n    } else {\n      resolve(task.output);\n    }\n  }\n\n  /**\n  * @function removeFromRunning - Removes a thread from the running pool\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Id of the thread to remove\n  */\n  removeFromRunning(task, threadId) {\n    this.running.splice(this.running.indexOf(threadId), 1);\n    task.scheduler.workers.splice(task.scheduler.workers.indexOf(threadId), 1);\n  }\n\n  /**\n   * @function processReturn - Processes the returned message from a thread\n   * @param {number} index - Index of the subarray processed\n   * @param {object} message - Message returned from the thread\n   * @param {object} task - Provided library functionality options for this task\n   */\n  processReturn(index, message, task) {\n    const isReactNative = this.hamsters.habitat.reactNative;\n    const isNode = this.hamsters.habitat.node;\n    const response = message.data;\n    const messageData = isReactNative ? JSON.parse(message).data : (response.data !== undefined ? response.data : response);\n    const threadId = isNode ? message.index.id : response.index.id;\n\n    if (task.scheduler.threads !== 1) {\n      if (isReactNative || task.input.mixedOutput) {\n          task.output[threadId] = messageData;\n      } else {\n        this.hamsters.data.addThreadOutputWithIndex(task, index, messageData);\n      }\n    } else {\n      task.output = messageData;\n    }\n  }\n\n  /**\n  * @function setOnMessage - Sets the message handlers for a thread\n  * @param {object} hamster - The thread to set the handlers on\n  * @param {function} onThreadResponse - Handler for thread response\n  * @param {object} habitat - Habitat configuration\n  * @param {function} reject - onError method\n  */\n  setOnMessage(hamster, onThreadResponse, reject) {\n    if (this.hamsters.habitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onmessageerror = reject;\n      hamster.port.onerror = reject;\n    } else if (this.hamsters.habitat.node) {\n      hamster.once('message', onThreadResponse);\n      hamster.once('onmessageerror', reject);\n      hamster.once('error', reject);\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = reject;\n      hamster.onerror = reject;\n    }\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Id of the thread to train\n  * @param {object} hamster - The thread to train\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(index, task, threadId, hamster, resolve, reject) {\n    const onThreadResponse = (message) => {\n      this.hamsters.pool.processReturn(index, message, task);\n      if (this.hamsters.habitat.debug) {\n        task.scheduler.metrics.threads[threadId].completed_at = Date.now();\n      }\n      this.hamsters.pool.removeFromRunning(task, threadId);\n      if (task.scheduler.workers.length === 0 && task.scheduler.count === task.scheduler.threads) {\n        this.hamsters.pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (!this.hamsters.habitat.persistence) {\n        hamster.terminate();\n      }\n      if (this.hamsters.pool.pending.length() !== 0) {\n        const queueHamster = this.hamsters.pool.fetchHamster(this.hamsters.pool.running.length());\n        this.hamsters.pool.processQueuedItem(queueHamster, this.hamsters.pool.pending.shift());\n      }\n    };\n    this.hamsters.pool.setOnMessage(hamster, onThreadResponse, reject);\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  */\n  scheduleTask(task) {\n    let i = 0;\n  \treturn new Promise((resolve, reject) => {\n      if(this.hamsters.debug) {\n        task.scheduler.metrics.started_at = Date.now();\n      }\n      while (i < task.scheduler.threads) {\n        this.hamsterWheel(task.scheduler.indexes[i], i, task, resolve, reject);\n        i += 1;\n      }\n    });\n  }\n}\n\nexport default Pool;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters; // Set the hamsters object as a property of Data class\n    this.getSubArrayFromIndex = this.getSubArrayUsingIndex.bind(this); // Bind getSubArrayUsingIndex function\n    this.getSubArrayIndexes = this.calculateIndexes.bind(this); // Bind calculateIndexes function\n    this.sortOutput = this.sortTaskOutput.bind(this); // Bind sortTaskOutput function\n    this.aggregateThreadOutputs = this.aggregateThreadOutputs.bind(this);\n    this.processDataType = this.typedArrayFromBuffer;\n    this.prepareFunction = this.prepareWorkerTask.bind(this); // Bind prepareWorkerTask function\n    this.feedHamster = this.messageWorkerThread.bind(this); // Bind messageWorkerThread function\n    this.getBufferSize = this.getBufferSize;\n    this.createSharedBuffer = this.createSharedBuffer.bind(this);\n    this.getDataType = this.getDataType;\n    this.setupSharedArrayBuffer = this.setupSharedArrayBuffer.bind(this);\n  }\n\n  /**\n  * @function messageWorkerThread - Prepares message to send to thread\n  * @param {object} hamstersHabitat - Hamsters Habitat instance\n  * @param {Worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorkerThread(hamster, hamsterFood) {\n    if(this.hamsters.habitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    if (this.hamsters.habitat.webWorker) {\n      return hamster.port.postMessage(hamsterFood);\n    }\n    return hamster.postMessage(hamsterFood, this.hamsters.data.getTransferableObjects(hamsterFood));\n  }\n\n  getTransferableObjects(obj) {\n    const typedArrayBuffers = [];\n    const transferableObjects = [];\n    const typedArrayTypes = [\n      'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', \n      'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n    ];\n    const otherTransferables = [\n      'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n    ];\n    const globalContext = typeof window !== 'undefined' ? window : global;\n  \n    for (const prop in obj) {\n      for (const type of typedArrayTypes) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          typedArrayBuffers.push(obj[prop].buffer);\n          break;\n        }\n      }\n  \n      for (const type of otherTransferables) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          transferableObjects.push(obj[prop]);\n          break;\n        }\n      }\n    }\n  \n    return typedArrayBuffers.concat(transferableObjects);\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'Uint32': Uint32Array,\n      'Uint16': Uint16Array,\n      'Uint8': Uint8Array,\n      'Uint8clamped': Uint8ClampedArray,\n      'Int32': Int32Array,\n      'Int16': Int16Array,\n      'Int8': Int8Array,\n      'Float32': Float32Array,\n      'Float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return buffer;\n    }\n    return new types[dataType](buffer);\n  }\n\n  /**\n  * @function prepareWorkerTask - Prepares function for thread, strips whitespace\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareWorkerTask(functionBody) {\n    let functionString = String(functionBody);\n    return functionString.substring((functionString.indexOf(\"{\") + 1), (functionString.length -1));\n  }\n\n  /**\n  * @function sortTaskOutput - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortTaskOutput(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n   * @function getBufferSize - Gets the byte length of the input array\n   * @param {TypedArray} array - The input typed array\n   * @returns {number} - The byte length of the array\n   */\n  getBufferSize(array) {\n    return array.byteLength;\n  }\n\n  /**\n   * @function createSharedBuffer - Creates a SharedArrayBuffer based on the input array's byte length\n   * @param {TypedArray} array - The input typed array\n   * @returns {SharedArrayBuffer} - The created SharedArrayBuffer\n   */\n  createSharedBuffer(array) {\n    const byteLength = this.getBufferSize(array);\n    const sharedBuffer = new SharedArrayBuffer(byteLength);\n    const sharedArray = new array.constructor(sharedBuffer);\n\n    // Copy data from the input array to the shared array\n    sharedArray.set(array);\n\n    return sharedBuffer;\n  }\n\n  /**\n   * @function setupSharedArrayBuffer - Sets up the shared buffer and corresponding typed array\n   * @param {TypedArray} array - The input typed array\n   * @returns {object} - SharedArrayBuffer;\n   */\n  setupSharedArrayBuffer(array) {\n    return this.createSharedBuffer(array);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function addThreadOutputWithIndex - Joins individual thread outputs into single result\n  * @param {object} task - Hamsters task object\n  * @param {object} index - Index information\n  * @param {array} output - Output array\n  */\n  addThreadOutputWithIndex(task, index, output) {\n    let i = 0;\n    const outputLength = output.length;\n    for (i; i < outputLength; i++) {\n      task.output[(index.start + i)] = output[i];\n    }\n  }\n\n  /**\n   * @function calculateIndexes - Splits a single array into multiple equal sized subarrays\n   * @param {array} array - Array to split\n   * @param {number} n - Number of subarrays to create\n   */\n  calculateIndexes(array, n) {\n    // If n is 1, return the whole array range\n    if (n === 1) {\n      return [{ start: 0, end: array.length - 1 }];\n    }\n\n    const indexes = [];\n    const segmentSize = Math.floor(array.length / n);\n    let startIndex = 0;\n\n    for (let i = 0; i < n; i++) {\n      const endIndex = startIndex + segmentSize - 1;\n      indexes.push({ start: startIndex, end: endIndex });\n      startIndex = endIndex + 1;\n    }\n\n    // Adjust the last segment to cover any remaining elements\n    if (startIndex < array.length) {\n      indexes[n - 1].end = array.length - 1;\n    }\n\n    return indexes;\n  }\n  \n\n  /**\n  * @function getSubArrayUsingIndex - Slices subarray based on provided index\n  * @param {object} index - Index information\n  * @param {object} inputArray - Hamsters task object\n  */\n  getSubArrayUsingIndex(index, inputArray) {\n    return inputArray.slice(index.start, index.end + 1);\n  }\n}\n\nexport default Data;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Task {\n  /**\n   * @constructor\n   * @param {object} habitat - The environment settings\n   * @param {object} data - Data utility methods\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  constructor(hamsters, params, functionToRun) {\n    'use strict';\n\n    this.input = params;\n    this.output = [];\n    this.scheduler = {\n      count: 0,\n      threads: params.threads || 1,\n      workers: []\n    };\n\n    if (hamsters.habitat.legacy) {\n      this.setupLegacyTask(hamsters, functionToRun);\n    } else {\n      this.setupModernTask(hamsters, params, functionToRun);\n    }\n\n    if (hamsters.habitat.debug) {\n      this.setupDebugMetrics();\n    }\n  }\n\n  /**\n   * @method setupLegacyTask\n   * @description Sets up task for legacy environments\n   * @param {function} functionToRun - Function to execute\n   */\n  setupLegacyTask(hamsters, functionToRun) {\n    this.scheduler.threads = 1;\n    if (!hamsters.habitat.node && !hamsters.habitat.isIE) {\n      this.input.hamstersJob = functionToRun;\n    }\n  }\n\n  /**\n   * @method setupModernTask\n   * @description Sets up task for modern environments\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  setupModernTask(hamsters, params, functionToRun) {\n    this.input.hamstersJob = hamsters.habitat.legacy ? functionToRun : hamsters.data.prepareFunction(functionToRun);\n    if (params.sharedArray && hamsters.habitat.atomics) {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.sharedArray, this.scheduler.threads);\n      this.scheduler.sharedBuffer = hamsters.data.setupSharedArrayBuffer(params.sharedArray);\n      this.input.sharedArray = []; //Reduce ram usage on main thread, do not preserve original array its no longer needed.\n    } else {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.array, this.scheduler.threads);\n    }\n  }\n\n  /**\n   * @method setupDebugMetrics\n   * @description Sets up debug metrics if debug mode is enabled\n   */\n  setupDebugMetrics() {\n    this.scheduler.metrics = {\n      created_at: Date.now(),\n      started_at: null,\n      completed_at: null,\n      threads: this.setupThreadMetrics()\n    };\n  }\n\n  setupThreadMetrics() {\n    let i = 0;\n    let threadMetrics = [];\n    while(i < this.scheduler.threads) {\n      threadMetrics.push({\n        created_at: Date.now(),\n        started_at: null,\n        enqueued_at: null,\n        dequeued_at: null,\n        completed_at: null\n      });\n      i += 1;\n    }\n    return threadMetrics;\n  }\n}\n  \nexport default Task;\n  ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass NodeStore {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.cache = new Map();\n    }\n\n    get(key) {\n        if (this.cache.has(key)) {\n            const value = this.cache.get(key);\n            // Refresh the key\n            this.cache.delete(key);\n            this.cache.set(key, value);\n            return Promise.resolve(value);\n        }\n        return Promise.resolve(null);\n    }\n\n    set(key, value) {\n        if (this.cache.size >= this.maxSize) {\n            // Remove the oldest (least recently used) entry\n            const oldestKey = this.cache.keys().next().value;\n            this.cache.delete(oldestKey);\n        }\n        this.cache.set(key, value);\n        return Promise.resolve();\n    }\n\n    clear() {\n        this.cache.clear();\n        return Promise.resolve();\n    }\n}\n\nexport default NodeStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass WebStore {\n    constructor(dbName, storeName, maxSize) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.maxSize = maxSize;\n        this.db = null;\n        this.initDB();\n    }\n\n    initDB() {\n        const self = this;\n        const request = indexedDB.open(this.dbName, 1);\n\n        request.onerror = function(event) {\n            console.error('Error opening database:', event.target.error);\n        };\n\n        request.onupgradeneeded = function(event) {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains(self.storeName)) {\n                const objectStore = db.createObjectStore(self.storeName, { keyPath: 'key' });\n                objectStore.createIndex('by_key', 'key', { unique: true });\n                objectStore.createIndex('by_timestamp', 'timestamp');\n            }\n        };\n\n        request.onsuccess = function(event) {\n            self.db = event.target.result;\n        };\n    }\n\n    get(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve(null);\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const result = event.target.result;\n                if (result) {\n                    self.updateTimestamp(key).then(() => resolve(result.value)).catch(reject);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    set(key, value) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            self.checkSize().then(() => {\n                const transaction = self.db.transaction([self.storeName], 'readwrite');\n                const objectStore = transaction.objectStore(self.storeName);\n                const request = objectStore.put({ key: key, value: value, timestamp: Date.now() });\n\n                request.onsuccess = function() {\n                    resolve();\n                };\n\n                request.onerror = function(event) {\n                    reject(event.target.error);\n                };\n            }).catch(reject);\n        });\n    }\n\n    clear() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.clear();\n\n            request.onsuccess = function() {\n                resolve();\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    checkSize() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const countRequest = objectStore.count();\n\n            countRequest.onsuccess = function() {\n                const count = countRequest.result;\n                if (count >= self.maxSize) {\n                    self.evictOldest().then(resolve).catch(reject);\n                } else {\n                    resolve();\n                }\n            };\n\n            countRequest.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    evictOldest() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const index = objectStore.index('by_timestamp');\n            const request = index.openCursor(null, 'next');\n\n            request.onsuccess = function(event) {\n                const cursor = event.target.result;\n                if (cursor) {\n                    cursor.delete().onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    updateTimestamp(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const data = event.target.result;\n                if (data) {\n                    data.timestamp = Date.now();\n                    objectStore.put(data).onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n}\n\nexport default WebStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport NodeStore from './stores/NodeStore';\nimport WebStore from './stores/WebStore';\n\nclass Memoize {\n    constructor(hamsters, maxSize) {\n        'use strict';\n\n        this.hamsters = hamsters;\n        this.store = this.hamsters.habitat.node ? new NodeStore(maxSize) : new WebStore('hamstersjs', 'cacheStore', maxSize);\n    }\n\n    memoize(func) {\n        const self = this;\n        return function(task) {\n            const key = self.generateTaskKey(task);\n\n            return new Promise(function(resolve, reject) {\n                self.store.get(key).then(function(cachedResult) {\n                    if (cachedResult !== null) {\n                        resolve(cachedResult);\n                    } else {\n                        self.applyFunc(func, task).then(function(result) {\n                            self.store.set(key, result).then(function() {\n                                resolve(result);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }\n                }).catch(reject);\n            });\n        };\n    }\n\n    generateTaskKey(task) {\n        const key = JSON.stringify({ input: task.input });\n        return this.hashCode(key);\n    }\n\n    hashCode(str) {\n        let hash = 0, i, chr;\n        if (str.length === 0) return hash;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash.toString();\n    }\n\n    applyFunc(func, args) {\n        return new Promise((resolve, reject) => {\n            try {\n                const result = func.apply(null, args);\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n\nexport default Memoize;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Distribute {\n\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.localConnection = null;\n    this.remoteConnections = new hamsters.observable({});\n    this.clientInfo = new hamsters.observable({});\n    this.sendChannels = new hamsters.observable({});\n    this.receiveChannels = new hamsters.observable({});\n    this.pcConstraint = null;\n    this.dataConstraint = null;\n    this.ws = null;\n    this.clientId = null;\n    this.pendingPromises = new hamsters.observable({});\n    this.returnDistributedOutput = this.sendDataResponse.bind(this);\n    this.establishConnection = this.initWebSocket.bind(this);\n  }\n\n  initWebSocket() {\n    this.ws = new WebSocket(`${this.hamsters.habitat.relay}`);\n\n    this.ws.onopen = () => {\n      console.info(`Hamsters.js ${this.hamsters.version} connection established`);\n      const registerMessage = {\n        type: 'register',\n        logicalCores: this.hamsters.maxThreads\n      };\n      this.ws.send(JSON.stringify(registerMessage));\n    };\n\n    this.ws.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      switch (message.type) {\n        case 'register':\n          this.handleClientReconnect(message);\n          break;\n        case 'update-client-list':\n          this.updateClientList(message.clients);\n          break;\n        case 'offer':\n          this.handleOffer(message);\n          break;\n        case 'answer':\n          this.handleAnswer(message);\n          break;\n        case 'candidate':\n          this.handleCandidate(message);\n          break;\n        case 'task-response':\n          this.handleTaskResponse(message);\n          break;\n        default:\n          if (this.hamsters.habitat.debug) {\n            console.info(`Hamsters.js ${this.hamsters.version} unknown message type: ${message.type}`);\n          }\n      }\n    };\n\n    this.ws.onerror = (error) => {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} connection error: ${error}`);\n      }\n    };\n\n    this.ws.onclose = () => {\n      if (this.hamsters.habitat.debug) {\n        console.info(`Hamsters.js ${this.hamsters.version} connection closed.`);\n      }\n    };\n  }\n\n  updateClientList(clients) {\n    clients.forEach(client => {\n      if (client.id !== this.clientId && !this.remoteConnections.get(client.id)) {\n        this.createConnection(client.id);\n      }\n    });\n  }\n\n  handleClientReconnect(message) {\n    const newClientId = message.id;\n\n    if (this.clientId === newClientId) {\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} connection error: `, error);\n      }\n      return;\n    }\n\n    if (this.remoteConnections.get(newClientId)) {\n      this.remoteConnections.get(newClientId).close();\n      this.remoteConnections.delete(newClientId);\n    }\n    if (this.sendChannels.get(newClientId)) {\n      this.sendChannels.get(newClientId).close();\n      this.sendChannels.delete(newClientId);\n    }\n    if (this.receiveChannels.get(newClientId)) {\n      this.receiveChannels.get(newClientId).close();\n      this.receiveChannels.delete(newClientId);\n    }\n    this.clientInfo.delete(newClientId);\n\n    this.clientId = newClientId;\n    this.loadClientList();\n  }\n\n  loadClientList() {\n    fetch(`/clients?currentId=${this.clientId}`)\n      .then(response => response.json())\n      .then(data => {\n        this.updateClientList(data);\n      })\n      .catch(error => {\n        if (this.hamsters.habitat.debug) {\n          console.error(`Hamsters.js ${this.hamsters.version} Error fetching client list: ${error}`);\n        }\n      });\n  }\n\n  createConnections() {\n    this.remoteConnections.forEach((_, targetClient) => {\n      this.createConnection(targetClient);\n    });\n  }\n\n  createConnection(targetClient) {\n    if (targetClient === this.clientId || this.remoteConnections.get(targetClient)) {\n      return;\n    }\n\n    const servers = {\n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n    };\n\n    const localConnection = new RTCPeerConnection(servers, this.pcConstraint);\n    const sendChannel = localConnection.createDataChannel('hamstersjs', this.dataConstraint);\n\n    localConnection.onicecandidate = (e) => {\n      if (e.candidate) {\n        this.ws.send(JSON.stringify({ \n          type: 'candidate', \n          target: targetClient, \n          from: this.clientId,\n          logicalCores: this.hamsters.maxThreads,\n          userAgent: navigator.userAgent,\n          candidate: e.candidate\n        }));\n      }\n    };\n\n    sendChannel.onopen = () => {\n      this.onSendChannelStateChange(targetClient);\n    };\n\n    sendChannel.onclose = () => {\n      this.onSendChannelStateChange(targetClient);\n    };\n\n    sendChannel.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      switch (message.type) {\n        case 'ping':\n          this.handlePing(targetClient, message.startTime);\n          break;\n        case 'pong':\n          this.handlePong(targetClient, message.startTime);\n          break;\n        default:\n          this.onReceiveMessageCallback(targetClient, event.data);\n      }\n    };\n\n    localConnection.ondatachannel = (event) => {\n      this.receiveChannelCallback(event, targetClient);\n    };\n\n    this.remoteConnections.set(targetClient, localConnection);\n    this.sendChannels.set(targetClient, sendChannel);\n    this.receiveChannels.set(targetClient, null);\n\n    localConnection.createOffer().then(desc => {\n      localConnection.setLocalDescription(desc);\n      this.ws.send(JSON.stringify({ type: 'offer', target: targetClient, offer: desc }));\n    }).catch(this.onCreateSessionDescriptionError);\n  }\n\n  handleOffer(data) {\n    const targetClient = data.from;\n\n    if (!this.remoteConnections.get(targetClient)) {\n      const servers = {\n        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n      };\n\n      const remoteConnection = new RTCPeerConnection(servers, this.pcConstraint);\n\n      remoteConnection.onicecandidate = (e) => {\n        if (e.candidate) {\n          this.ws.send(JSON.stringify({ type: 'candidate', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, candidate: e.candidate }));\n        }\n      };\n\n      remoteConnection.ondatachannel = (event) => {\n        this.receiveChannelCallback(event, targetClient);\n      };\n\n      const sendChannel = remoteConnection.createDataChannel('hamstersjs', this.dataConstraint);\n      \n      sendChannel.onopen = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onclose = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        switch (message.type) {\n          case 'ping':\n            this.handlePing(targetClient, message.startTime);\n            break;\n          case 'pong':\n            this.handlePong(targetClient, message.startTime);\n            break;\n          default:\n            this.onReceiveMessageCallback(targetClient, event.data);\n        }\n      };\n\n      remoteConnection.setRemoteDescription(new RTCSessionDescription(data.offer)).then(() => {\n        return remoteConnection.createAnswer();\n      }).then(desc => {\n        remoteConnection.setLocalDescription(desc);\n        this.ws.send(JSON.stringify({ type: 'answer', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, answer: desc }));\n      }).catch(this.onCreateSessionDescriptionError);\n\n      this.remoteConnections.set(targetClient, remoteConnection);\n      this.sendChannels.set(targetClient, sendChannel);\n    }\n  }\n\n  storeClientConnectionInfo(data) {\n    const client = {\n      logicalCores: data.logicalCores,\n      userAgent: data.userAgent,\n    };\n    console.log(\"storing client info \", client);\n    this.clientInfo.set(data.from, client);\n  }\n\n  handleAnswer(data) {\n    this.storeClientConnectionInfo(data);\n    const connection = this.remoteConnections.get(data.from);\n    connection.setRemoteDescription(new RTCSessionDescription(data.answer));\n  }\n\n  handleCandidate(data) {\n    this.storeClientConnectionInfo(data);\n    const connection = this.remoteConnections.get(data.from);\n    connection.addIceCandidate(new RTCIceCandidate(data.candidate)).catch(this.onAddIceCandidateError);\n  }\n\n  measureLatency(targetClient) {\n    const startTime = performance.now();\n    this.sendPing(targetClient, startTime);\n  }\n\n  sendPing(targetClient, startTime) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'ping', startTime }));\n    }\n  }\n\n  handlePing(targetClient, startTime) {\n    console.log(\"Remote Connections \", this.remoteConnections);\n    const sendChannel = this.receiveChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'pong', startTime }));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent ping to ${targetClient}`);\n      }\n    }\n  }\n\n  handlePong(targetClient, startTime) {\n    const latency = performance.now() - startTime;\n    this.clientInfo.set(targetClient, { ...this.clientInfo.get(targetClient), latency });\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} received pong from ${targetClient} with latency: ${latency.toFixed(2)}ms`);\n    }\n  }\n\n  fetchDistributedClient() {\n    const sendChannelKeys = Array.from(this.sendChannels.keys());\n    if (sendChannelKeys.length === 0) {\n      if (this.hamsters.habitat.debug) {\n        console.warn(`Hamsters.js ${this.hamsters.version} no send channels available.`);\n      }\n      return null;\n    }\n\n    let minLatency = Infinity;\n    let targetClient = null;\n\n    sendChannelKeys.forEach(clientId => {\n      const channel = this.sendChannels.get(clientId);\n      const client = this.clientInfo.get(clientId);\n      if (channel.readyState === 'open' && client.latency < minLatency) {\n        minLatency = client.latency;\n        targetClient = clientId;\n      }\n    });\n\n    return targetClient;\n  }\n\n  distributeTask(task, hamsterFood, resolve, reject) {\n    const targetClient = this.fetchDistributedClient();\n    if (!targetClient) {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} no target client found.`);\n      }\n      reject('No target client found.');\n      return;\n    }\n\n    const messageId = this.generateUniqueId();\n\n    const subTask = {\n      hamsterFood,\n      index: hamsterFood.index,\n      task,\n      messageId,\n    };\n\n    this.pendingPromises.set(messageId, { resolve, reject });\n\n    this.sendData({ targetClient, data: subTask });\n  }\n\n  handleTaskResponse(incomingMessage) {\n    const { messageId, output, error } = incomingMessage;\n    const pendingPromise = this.pendingPromises.get(messageId);\n\n    if (pendingPromise) {\n      if (error) {\n        pendingPromise.reject(error);\n      } else {\n        pendingPromise.resolve(output);\n      }\n\n      this.pendingPromises.delete(messageId);\n    }\n  }\n\n  sendData({ targetClient, data }) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify(data));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent data to: `, targetClient);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: `, targetClient);\n      }\n    }\n  }\n\n  sendDataResponse(data) {\n    const targetClient = data.targetClient;\n    const sendChannel = this.receiveChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify(data));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent response to: `, targetClient);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: `, targetClient);\n      }\n    }\n  }\n\n  closeDataChannels() {\n    for (const targetClient of this.sendChannels.keys()) {\n      const sendChannel = this.sendChannels.get(targetClient);\n      if (sendChannel) {\n        sendChannel.close();\n        this.sendChannels.delete(targetClient);\n      }\n      const receiveChannel = this.receiveChannels.get(targetClient);\n      if (receiveChannel) {\n        receiveChannel.close();\n        this.receiveChannels.delete(targetClient);\n      }\n      const remoteConnection = this.remoteConnections.get(targetClient);\n      if (remoteConnection) {\n        remoteConnection.close();\n        this.remoteConnections.delete(targetClient);\n      }\n      this.clientInfo.delete(targetClient);\n    }\n    this.localConnection = null;\n  }\n\n  receiveChannelCallback(event, targetClient) {\n    const receiveChannel = event.channel;\n\n    receiveChannel.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      switch (message.type) {\n        case 'ping':\n          this.handlePing(targetClient, message.startTime);\n          break;\n        case 'pong':\n          this.handlePong(targetClient, message.startTime);\n          break;\n        default:\n          this.onReceiveMessageCallback(targetClient, event.data);\n      }\n    };\n\n    receiveChannel.onopen = () => {\n      this.onReceiveChannelStateChange(targetClient);\n    };\n\n    receiveChannel.onclose = () => {\n      this.onReceiveChannelStateChange(targetClient);\n    };\n\n    this.receiveChannels.set(targetClient, receiveChannel);\n  }\n\n  onReceiveMessageCallback(targetClient, data) {\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} received message!`);\n    }\n    const incomingMessage = JSON.parse(data);\n\n    if (incomingMessage.isReply) {\n      this.handleTaskResponse(incomingMessage);\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} response received for task: `, incomingMessage);\n      }\n    } else {\n      this.hamsters.pool.runDistributedTask(incomingMessage, targetClient);\n    }\n  }\n\n  onSendChannelStateChange(targetClient) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    this.measureLatency(targetClient);\n    if (sendChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} send channel state changed for ${targetClient}: ${sendChannel.readyState}`);\n    }\n  }\n\n  onReceiveChannelStateChange(targetClient) {\n    const receiveChannel = this.receiveChannels.get(targetClient);\n    if (receiveChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} receive channel state changed for ${targetClient}: ${receiveChannel.readyState}`);\n    }\n  }\n\n  generateUniqueId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  onCreateSessionDescriptionError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to create session description: ${error}`);\n    }\n  }\n\n  onAddIceCandidateError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to add ICE candidate: ${error}`);\n    }\n  }\n}\n\nexport default Distribute;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Observable {\n  constructor(initialData = {}) {\n    this.data = Array.isArray(initialData) ? [...initialData] : { ...initialData };\n    this.events = {};\n  }\n\n  // Allow listeners to register for specific events\n  on(event, callback) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  }\n\n  // Notify listeners about the event\n  emit(event, ...args) {\n    if (this.events[event]) {\n      this.events[event].forEach(callback => callback(...args));\n    }\n  }\n\n  set(key, value) {\n    if (typeof key === 'string') {\n        const keys = key.split('.');\n        let current = this.data;\n        for (let i = 0; i < keys.length - 1; i++) {\n            current = current[keys[i]];\n        }\n        current[keys[keys.length - 1]] = value;\n    } else if (typeof key === 'object') {\n      this.data[key] = value;\n    }\n    this.emit('change', this.data);\n  }\n\n  get(key) {\n    return this.data[key];\n  }\n\n  push(...items) {\n    this.data.push(...items);\n    this.emit('change', this.data);\n  }\n\n  pop() {\n    const item = this.data.pop();\n    this.emit('change', this.data);\n    return item;\n  }\n\n  shift() {\n    const item = this.data.shift();\n    this.emit('change', this.data);\n    return item;\n  }\n\n  splice(start, deleteCount, ...items) {\n    const result = this.data.splice(start, deleteCount, ...items);\n    this.emit('change', this.data);\n    return result;\n  }\n\n  indexOf(item) {\n    return this.data.indexOf(item);\n  }\n\n  length() {\n    return this.data.length;\n  }\n\n  delete(property) {\n    if (!Array.isArray(this.data)) {\n      delete this.data[property];\n      this.emit('change', this.data);\n    }\n  }\n\n  getData() {\n    return this.data;\n  }\n}\n\nexport default Observable;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n//Core Functionality\nimport Habitat from './core/habitat';\nimport Pool from './core/pool';\nimport Data from './core/data';\nimport Task from './core/task';\n\n//Worker Scaffolds\nimport Legacy from './scaffold/legacy';\nimport Regular from './scaffold/regular';\nimport Shared from './scaffold/shared';\n\n//Features\nimport Memoize from './feature/memoize';\nimport Distribute from './feature/distribute';\nimport Observable from './feature/observable';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.version = '5.6.1';\n    this.run = this.hamstersRun.bind(this);\n    this.promise = this.hamstersPromise.bind(this);\n    this.init = this.initializeLibrary.bind(this);\n    this.data = {};\n    this.pool = {};\n    this.scaffold = {};\n    this.habitat = {};\n    this.memoize = {};\n  }\n\n  /**\n  * @function inititializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    this.observable = Observable;\n    this.data = new Data(this);\n    this.pool = new Pool(this);\n    this.scaffold = {\n      legacy: new Legacy(),\n      regular: new Regular(),\n      shared: new Shared()\n    };\n    this.habitat = new Habitat(this);\n    this.memoize = new Memoize(this, 100); //Set a maximum of 100 memoized function results, LRU cache\n    this.distribute = new Distribute(this);\n    this.processStartOptions(startOptions);\n    \n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      this.pool.spawnHamsters(this.habitat.maxThreads);\n    }\n    this.maxThreads = this.habitat.maxThreads;\n\n    if(this.habitat.relay) {\n      console.info(`Hamsters.js ${this.version} establishing connection to relay`);\n      this.distribute.establishConnection();\n    }\n\n    console.info(`Hamsters.js ${this.version} initialized using up to ${this.habitat.maxThreads} threads`);\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      for (const key of Object.keys(startOptions)) {\n        if (this.habitat.keys.includes(key.toLowerCase())) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          if(key === 'scaffold') {\n            this.scaffold.custom = startOptions[key];\n          } else {\n            this[key] = startOptions[key];\n          }\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    let forceLegacyMode = (typeof startOptions !== 'undefined' && typeof startOptions.legacy !== 'undefined');\n    if (forceLegacyMode) {\n      forceLegacyMode = startOptions.legacy;\n    }\n    if (typeof this.habitat.Worker === 'function' && !forceLegacyMode) {\n      this.habitat.legacy = this.habitat.isIE;\n    }\n  }\n\n  /**\n   * @async\n   * @function scheduleTask - Schedules a new function to be processed by the library\n   * @param {object} task - Provided library execution options\n   * @param {function} resolve - Parent function promise resolve method\n   * @param {function} reject - Parent function promise reject method\n   * @return {Promise} Promise object on completion\n   */\n  scheduleTask(task, resolve, reject) {\n    if (task.input.memoize) {\n      // Pass the task object to the memoized function\n      const memoizedFunction = this.memoize.memoize(() => this.pool.scheduleTask(task));\n      return memoizedFunction(task).then(resolve).catch(reject);\n    }\n    return this.pool.scheduleTask(task).then(resolve).catch(reject);\n  }\n\n  /**\n   * @async\n   * @function hamstersPromise - Calls library functionality using async promises\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   * @return {Promise} Promise resolving with results from functionToRun\n   */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      this.scheduleTask(new Task(this, params, functionToRun), resolve, reject);\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    this.scheduleTask(new Task(this, params, functionToRun), onSuccess, onError);\n  }\n}\n\nexport default new hamstersjs();\n"],"names":["root","factory","exports","module","define","amd","global","Legacy","constructor","hamsters","this","scaffold","params","resolve","reject","rtn","data","dataType","habitat","reactNative","self","node","isIE","eval","hamstersJob","Regular","handleDataType","sharedArray","typedArrayFromBuffer","getTransferableObjects","buffer","types","Uint32Array","Uint16Array","Uint8Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","returnResponse","buffers","length","postMessage","obj","transferableObjects","Set","typedArrayTypes","globalContext","window","allTypes","prop","hasOwnProperty","type","includes","add","Array","from","onmessage","message","index","sharedBuffer","bind","Shared","addEventListener","incomingConnection","port","ports","start","incomingMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","prototype","call","Habitat","debug","importScripts","relay","memoize","persistence","browser","isBrowser","webWorker","isWebWorker","isNode","isReactNative","shell","isShell","transferable","supportsTransferableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isInternetExplorer","selectHamsterWheel","sharedWorker","locateSharedWorkerObject","locateBlobBuilder","findAvailableBlobBuilder","legacy","isLegacyEnvironment","Worker","locateWorkerObject","maxThreads","determineGlobalThreads","keys","getHabitatKeys","max","navigator","hardwareConcurrency","isFirefox","os","cpus","userAgent","toLowerCase","indexOf","SharedWorker","process","product","isLegacy","supportsSharedWorkers","supports","workerBlob","generateWorkerBlob","e","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","createDataBlob","textContent","Blob","blob","append","getBlob","workerLogic","URL","createObjectURL","toString","SharedArrayBuffer","Proxy","custom","regular","Pool","threads","observable","running","pending","fetchHamster","getAvailableThread","addWorkToPending","hamsterFood","task","scheduler","metrics","count","enqueued_at","Date","now","push","processQueuedItem","hamster","item","id","dequeued_at","runTask","threadId","spawnHamster","keepTrackOfThread","started_at","workers","spawnHamsters","hamsterWheel","prepareMeal","subTaskId","array","input","getSubArrayFromIndex","excludedKeys","has","runDistributedTask","targetClient","handleResponse","distribute","returnDistributedOutput","messageId","isReply","pool","trainHamster","feedHamster","distributeTask","processDistributedReturn","returnOutputAndRemoveTask","output","processDataType","aggregate","aggregateThreadOutputs","sort","sortOutput","completed_at","console","info","removeFromRunning","splice","processReturn","response","messageData","JSON","parse","mixedOutput","addThreadOutputWithIndex","setOnMessage","onThreadResponse","onmessageerror","onerror","once","terminate","queueHamster","shift","scheduleTask","i","Promise","indexes","Data","getSubArrayUsingIndex","getSubArrayIndexes","calculateIndexes","sortTaskOutput","prepareFunction","prepareWorkerTask","messageWorkerThread","getBufferSize","createSharedBuffer","getDataType","setupSharedArrayBuffer","stringify","typedArrayBuffers","otherTransferables","concat","functionBody","functionString","String","substring","arr","order","a","b","reverse","byteLength","set","reduce","len","bufferLength","offset","outputLength","n","end","segmentSize","Math","floor","startIndex","endIndex","inputArray","slice","Task","functionToRun","setupLegacyTask","setupModernTask","setupDebugMetrics","created_at","setupThreadMetrics","threadMetrics","NodeStore","maxSize","cache","Map","value","delete","size","oldestKey","next","clear","WebStore","dbName","storeName","db","initDB","request","indexedDB","open","event","error","target","onupgradeneeded","result","objectStoreNames","contains","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","transaction","updateTimestamp","then","catch","checkSize","put","timestamp","countRequest","evictOldest","openCursor","cursor","Memoize","store","func","generateTaskKey","cachedResult","applyFunc","hashCode","str","chr","hash","charCodeAt","args","apply","Distribute","localConnection","remoteConnections","clientInfo","sendChannels","receiveChannels","pcConstraint","dataConstraint","ws","clientId","pendingPromises","sendDataResponse","establishConnection","initWebSocket","WebSocket","onopen","version","registerMessage","logicalCores","send","handleClientReconnect","updateClientList","clients","handleOffer","handleAnswer","handleCandidate","handleTaskResponse","onclose","forEach","client","createConnection","newClientId","close","loadClientList","log","fetch","json","createConnections","_","RTCPeerConnection","iceServers","urls","sendChannel","createDataChannel","onicecandidate","candidate","onSendChannelStateChange","handlePing","startTime","handlePong","onReceiveMessageCallback","ondatachannel","receiveChannelCallback","createOffer","desc","setLocalDescription","offer","onCreateSessionDescriptionError","remoteConnection","setRemoteDescription","RTCSessionDescription","createAnswer","answer","storeClientConnectionInfo","addIceCandidate","RTCIceCandidate","onAddIceCandidateError","measureLatency","performance","sendPing","readyState","latency","toFixed","fetchDistributedClient","sendChannelKeys","warn","minLatency","Infinity","channel","generateUniqueId","subTask","sendData","pendingPromise","_ref","closeDataChannels","receiveChannel","onReceiveChannelStateChange","random","substr","Observable","initialData","arguments","isArray","events","on","callback","emit","_len","_key","split","current","pop","deleteCount","_len2","items","_key2","property","getData","hamstersjs","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","shared","processStartOptions","forceLegacyMode","memoizedFunction","onSuccess","onError"],"sourceRoot":""}