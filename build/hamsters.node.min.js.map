{"version":3,"file":"hamsters.node.min.js","mappings":"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","sources":["webpack://hamsters/webpack/universalModuleDefinition","webpack://hamsters/./scaffold/legacy.js","webpack://hamsters/./scaffold/regular.js","webpack://hamsters/./scaffold/shared.js","webpack://hamsters/webpack/bootstrap","webpack://hamsters/webpack/runtime/define property getters","webpack://hamsters/webpack/runtime/hasOwnProperty shorthand","webpack://hamsters/./core/habitat.js","webpack://hamsters/./core/pool.js","webpack://hamsters/./core/data.js","webpack://hamsters/./core/task.js","webpack://hamsters/./feature/stores/NodeStore.js","webpack://hamsters/./feature/stores/WebStore.js","webpack://hamsters/./feature/memoize.js","webpack://hamsters/./feature/distribute.js","webpack://hamsters/./feature/observable.js","webpack://hamsters/./hamsters.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hamsters\"] = factory();\n\telse\n\t\troot[\"hamsters\"] = factory();\n})(global, () => {\nreturn ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Legacy {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor(hamsters) {\n      this.hamsters = hamsters;\n      this.scaffold = (params, resolve, reject) => {\n        var rtn = {\n          data: [],\n          dataType: (typeof params.dataType !== \"undefined\" ? params.dataType : null)\n        };\n        if(this.hamsters.habitat.reactNative) {\n          self.rtn = rtn;\n        }\n        if(this.hamsters.habitat.node || this.hamsters.habitat.isIE) {\n          eval(params.hamstersJob);\n        } else {\n          params.hamstersJob();\n        }\n        resolve(rtn.data);\n      }\n    }\n  }\n  \n  export default Legacy;\n  ","class Regular {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n        this.scaffold = function() {\n            self.params = {};\n            self.rtn = {};\n\n            self.onmessage = function (message) {\n                this.params = message.data;\n                this.rtn = {\n                    data: [],\n                    dataType: (typeof this.params.dataType !== 'undefined' ? this.params.dataType : null),\n                    index: this.params.index\n                };\n                if (this.params.sharedBuffer) {\n                    this.params.sharedArray = typedArrayFromBuffer(this.params.dataType, this.params.sharedBuffer);\n                }\n                eval(this.params.hamstersJob);\n                const buffers = handleDataType(this.rtn);\n                returnResponse(this.rtn, buffers);\n            }.bind(this);\n\n            function handleDataType(rtn) {\n                if (this.params.sharedArray) {\n                    // Do nothing here, we don't need to return a buffer rtn.data is useless here\n                } else if (this.params.dataType) {\n                    rtn.data = typedArrayFromBuffer(rtn.dataType, rtn.data);\n                }\n                return getTransferableObjects(rtn); // Return transferable objects\n            }\n\n            function typedArrayFromBuffer(dataType, buffer) {\n                const types = {\n                    'Uint32': Uint32Array,\n                    'Uint16': Uint16Array,\n                    'Uint8': Uint8Array,\n                    'Uint8clamped': Uint8ClampedArray,\n                    'Int32': Int32Array,\n                    'Int16': Int16Array,\n                    'Int8': Int8Array,\n                    'Float32': Float32Array,\n                    'Float64': Float64Array\n                };\n                return types[dataType] ? new types[dataType](buffer) : buffer;\n            }\n\n            function returnResponse(rtn, buffers) {\n                if (buffers && buffers.length > 0) {\n                    postMessage(rtn, buffers);  // PostMessage with transferable objects\n                } else {\n                    postMessage(rtn);  // PostMessage without transferable objects\n                }\n            }\n\n            function getTransferableObjects(obj) {\n                const transferableObjects = new Set();\n                const typedArrayTypes = [\n                    'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array',\n                    'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n                ];\n                const otherTransferables = [\n                    'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n                ];\n\n                const globalContext = typeof self !== 'undefined' ? self : window;\n\n                const allTypes = [...typedArrayTypes, ...otherTransferables];\n\n                for (const prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        for (const type of allTypes) {\n                            if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n                                if (typedArrayTypes.includes(type)) {\n                                    transferableObjects.add(obj[prop].buffer);\n                                } else {\n                                    transferableObjects.add(obj[prop]);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return Array.from(transferableObjects);\n            }\n        }\n    }\n}\n\nexport default Regular;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Shared {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n      this.scaffold = function() {\n        self.params = {};\n        self.rtn = {};\n    \n        addEventListener('connect', (incomingConnection) => {\n          var port = incomingConnection.ports[0];\n          port.start();\n          port.addEventListener('message', (incomingMessage) => {\n            this.params = incomingMessage.data;\n            this.rtn = {\n              data: [],\n              dataType: this.params.dataType\n            };\n            eval(\"(\" + this.params.hamstersJob + \")\")();\n            port.postMessage(this.rtn);\n          }, false);\n        }, false);\n      }\n    }\n  }\n  \n  export default Shared;\n  ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.debug = false;\n    this.importScripts = null;\n    this.relay = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferable = this.supportsTransferableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE = this.isInternetExplorer();\n    this.selectHamsterWheel = this.selectHamsterWheel.bind(this);\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.locateBlobBuilder = this.findAvailableBlobBuilder();\n    this.legacy = this.isLegacyEnvironment();\n    this.Worker = this.locateWorkerObject();\n    this.maxThreads = this.determineGlobalThreads();\n    this.keys = this.getHabitatKeys();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(this.browser && typeof navigator.hardwareConcurrency !== \"undefined\") {\n      max = navigator.hardwareConcurrency;\n      if(this.isFirefox()) {\n        max = (max > 20 ? 20 : max);\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function isFirefox - Detect firefox browser\n  */\n  isFirefox() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return (typeof Worker !== 'undefined' ? Worker : false);\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return (typeof SharedWorker !== 'undefined' ? SharedWorker : false);\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return (typeof window === \"object\");\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.indexOf(\"MSIE \") !== -1 || navigator.userAgent.indexOf(\"Trident/\") !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return (typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser);\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a web worker\n  */\n  isWebWorker() {\n    return (typeof importScripts === \"function\" && !this.isReactNative());\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is React Native\n  */\n  isReactNative() {\n    return (typeof navigator !== \"undefined\" && typeof navigator.product !== \"undefined\" && navigator.product === \"ReactNative\");\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return ((typeof navigator === \"undefined\") && !this.isNode() && !this.isWebWorker() && !this.isReactNative());\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = !!!this.Worker;\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy;\n  }\n\n  /**\n  * @function supportsSharedWorkers - Detects if execution environment supports SharedWorkers\n  */\n  supportsSharedWorkers() {\n    return (typeof SharedWorker !== 'undefined');\n  }\n\n  /**\n  * @function findAvailableBlobBuilder - Attempts to locate a data blob builder, with vendor prefixes\n  */\n  findAvailableBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return 'Environment does not support data blobs!';\n  }\n\n  /**\n  * @function createDataBlob - Creates a new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates a blob URI for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    return URL.createObjectURL(this.createDataBlob(this.generateWorkerString(workerLogic)));\n  }\n\n  generateWorkerString(workerLogic) {\n    return `(${workerLogic.toString()})();`;\n  }\n  /**\n  * @function supportsTransferableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferableObjects() {\n    return (typeof Uint8Array !== 'undefined');\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports SharedArrayBuffers\n  */\n  supportsAtomicOperations() {\n    return (typeof SharedArrayBuffer !== 'undefined');\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports Proxy objects\n  */\n  supportsProxies() {\n    return (typeof Proxy !== 'undefined');\n  }\n\n  /**\n  * @function selectHamsterWheel - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.hamsters.scaffold.custom) {\n      return this.hamsters.scaffold.custom;\n    }\n    if(this.isIE) {\n      return this.hamsters.scaffold.legacy.scaffold;\n    }\n    if(this.reactNative) {\n      return 'reactNativeHamster.js';\n    }\n    if (this.node) {\n      return './node_modules/hamsters.js/build/common/node.js';\n    }\n    return 'data:text/javascript,' + encodeURIComponent(this.generateWorkerString(this.hamsters.scaffold.regular.scaffold));\n  }\n\n  /**\n  * @function getHabitatKeys - Returns keys for this Habitat instance\n  */\n  getHabitatKeys() {\n    return [\n      'worker','sharedworker',\n      'legacy','proxies',\n      'reactnative','atomics',\n      'transferable','browser',\n      'shell','node','debug',\n      'persistence','importscripts',\n      'maxthreads', 'parentport',\n      'webworker', 'relay'\n    ];\n  }\n}\n\nexport default Habitat;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Pool {\n\t\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.threads = new hamsters.observable([]);\n    this.running = new hamsters.observable([]);\n    this.pending = new hamsters.observable([]);\n    this.fetchHamster = this.getAvailableThread;\n  }\n\n  /**\n  * @function fetchHamster - Adds task to queue waiting for available thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(index, task, resolve, reject) {\n    if(this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[task.scheduler.count].enqueued_at = Date.now();\n    }\n    this.pending.push({\n      index: index,\n      count: task.scheduler.count,  \n      task: task,\n      resolve: resolve,\n      reject: reject\n    });\n  }\n\n  /**\n  * @function processQueuedItem - Invokes processing of next item in queue\n  * @param {object} item - Task to process\n  */\n  processQueuedItem(hamster, item) {\n    if(this.hamsters.habitat.debug) {\n      item.task.scheduler.metrics.threads[item.count].dequeued_at = Date.now();\n    }\n  \treturn this.runTask(hamster, item.index, item.task, item.resolve, item.reject);\n  }\n\n  /**\n  * @function getAvailableThread- Keeps track of threads running, scoped globally and to task\n  * @param {number} threadId - Id of thread\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  */\n  getAvailableThread(threadId) {\n    if(this.hamsters.habitat.persistence) {\n      return this.threads.get(threadId);\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    // if(this.hamsters.habitat.debug) {\n    //   task.scheduler.metrics.threads[id].started_at = Date.now();\n    // }\n    task.scheduler.workers.push(id); //Keep track of threads scoped to current task\n    this.running.push(id); //Keep track of all currently running threads\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {number} maxThreds - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    for (maxThreads; maxThreads > 0; maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    const { selectHamsterWheel, Worker } = this.hamsters.habitat;\n    const hamsterWheel = selectHamsterWheel();\n    return new Worker(hamsterWheel);\n  }\n\n  /**\n   * @function prepareMeal\n   * @description Prepares message to send to a thread and invoke execution\n   * @param {number} index - Index of the subarray to process\n   * @param {number} subTaskId - Subtask ID\n   * @param {object} task - Provided library functionality options for this task\n   * @returns {object} - Prepared message to send to a thread\n   */\n  prepareMeal(index, task) {\n    // Prepare the base hamsterFood object\n    const hamsterFood = {\n      array: task.input.array && task.input.array.length !== 0 ? \n            this.hamsters.data.getSubArrayFromIndex(index, task.input.array) : [],\n      index: index\n    };\n\n    // Add sharedBuffer if it exists\n    if (typeof task.scheduler.sharedBuffer !== 'undefined') {\n      hamsterFood.sharedBuffer = task.scheduler.sharedBuffer;\n    }\n\n    // List of excluded keys\n    const excludedKeys = new Set(['array', 'threads', 'sharedArray']);\n\n    // Iterate over task.input properties and add to hamsterFood\n    for (const key in task.input) {\n      if (task.input.hasOwnProperty(key) && !excludedKeys.has(key)) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n\n    return hamsterFood;\n  }\n\n  /**\n  * @function hamsterWheel - Runs function using thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, index, task, resolve, reject) {\n  \tlet threadId = this.running.length();\n    index.id = threadId;\n    let hamsterFood = this.prepareMeal(index, task);\n    this.keepTrackOfThread(task, threadId);\n    if(this.hamsters.habitat.legacy) {\n      this.hamsters.habitat.legacyWheel(this.hamsters.habitat, hamsterFood, resolve, reject);\n    } else {\n      this.hamsters.pool.trainHamster(index, task, threadId, hamster, resolve, reject);\n      this.hamsters.data.feedHamster(hamster, hamsterFood);\n    }\n    task.scheduler.count += 1;\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {object} array - Provided library functionality options for this task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(index, task, resolve, reject) {\n    if(this.hamsters.habitat.maxThreads <= this.running.length()) {\n      return this.addWorkToPending(index, task, resolve, reject);\n    }\n    let hamster = this.fetchHamster(this.running.length());\n    return this.runTask(hamster, index, task, resolve, reject);\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - Gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    if(task.scheduler.sharedBuffer) {\n      task.output = this.hamsters.data.processDataType(task.input.dataType, task.scheduler.sharedBuffer);\n    }\n    if(task.input.aggregate) {\n      task.output = this.hamsters.data.aggregateThreadOutputs(task.output, task.input.dataType);\n    }\n    if(task.input.sort) {\n      task.output = this.hamsters.data.sortOutput(task.output, task.input.sort)\n    }\n    if (this.hamsters.habitat.debug) {\n      const completedAt = Date.now();\n      const startedAt = task.scheduler.metrics.started_at;\n      task.scheduler.metrics.completed_at = completedAt;\n      console.info(`Hamsters.js Task Completed In ${completedAt - startedAt}ms`);\n    }\n    if(task.input.distribute) {\n      resolve(task);\n    } else {\n      resolve(task.output);\n    }\n  }\n\n  removeFromRunning(task, threadId) {\n    this.running.splice(this.running.indexOf(threadId), 1); //Remove thread from running pool\n    task.scheduler.workers.splice(task.scheduler.workers.indexOf(threadId), 1); //Remove thread from task running pool\n  }\n\n  processReturn(habitat, index, message, task) {\n    let output = message.data;\n    if(habitat.reactNative) {\n      output = JSON.parse(message).data;\n    } else if(typeof message.data.data !== \"undefined\") {\n      output = message.data.data;\n    }\n    if(task.scheduler.threads !== 1) {\n      this.hamsters.data.addThreadOutputWithIndex(task, index, output);\n    } else {\n      task.output = output;\n    }\n  }\n\n  setOnMessage(hamster, onThreadResponse, habitat, reject) {\n    if (habitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onmessageerror = reject;\n      hamster.port.onerror = reject;\n    }\n    if(habitat.node) {\n      hamster.once('message', onThreadResponse);\n      hamster.once('onmessageerror', reject);\n      hamster.once('error', reject);\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = reject;\n      hamster.error = reject;\n    }\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {worker} hamster - Thread to train\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(index, task, threadId, hamster, resolve, reject) {\n    let onThreadResponse = (message) => {\n      this.hamsters.pool.processReturn(this.hamsters.habitat, index, message, task);\n      // if(this.hamsters.habitat.debug) {\n      //   task.scheduler.metrics.threads[threadId].completed_at = Date.now();\n      // }\n      this.hamsters.pool.removeFromRunning(task, threadId);\n      if (task.scheduler.workers.length === 0 && task.scheduler.count === task.scheduler.threads) {\n        this.hamsters.pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (this.hamsters.pool.pending.length() !== 0) {\n        return this.hamsters.pool.processQueuedItem(hamster, this.hamsters.pool.pending.shift());\n      }\n      if(!this.hamsters.habitat.persistence) {\n        return hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n      }\n    };\n    this.hamsters.pool.setOnMessage(hamster, onThreadResponse, this.hamsters.habitat, reject);\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Scaffold to execute login within\n  * @param {number} maxThreads - Maximum number of threads for this client\n  */\n  scheduleTask(task, resolve, reject) {\n    // if(this.hamsters.habitat.debug) {\n    //   let metrics = task.scheduler.metrics;\n    //   metrics.started_at = Date.now();\n    //   return new Promise((resolve, reject) => {\n    //     while (i < task.scheduler.threads) {\n    //       metrics.threads.push({\n    //         created_at: Date.now(),\n    //         started_at: null,\n    //         enqueued_at: null,\n    //         dequeued_at: null,\n    //         completed_at: null\n    //       });\n    //       this.hamsterWheel(task.scheduler.indexes[i], task, resolve, reject);\n    //       i += 1;\n    //     }\n    //   });\n    // }\n    //Process with debug mode disabled, no need for time stamping\n  \t// return new Promise((resolve, reject) => {\n      if(task.input.distribute && task.type !== 'task-response') {\n        this.hamsters.distribute.distributeTask(task, resolve, reject);\n      } else {\n        let i = 0;\n        while (i < task.scheduler.threads) {\n          this.hamsterWheel(task.scheduler.indexes[i], task, resolve, reject);\n          i += 1;\n        }\n      }\n    // });\n  }\n}\n\nexport default Pool;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters; // Set the hamsters object as a property of Data class\n    this.getSubArrayFromIndex = this.getSubArrayUsingIndex.bind(this); // Bind getSubArrayUsingIndex function\n    this.getSubArrayIndexes = this.calculateIndexes.bind(this); // Bind calculateIndexes function\n    this.sortOutput = this.sortTaskOutput.bind(this); // Bind sortTaskOutput function\n    this.aggregateThreadOutputs = this.aggregateThreadOutputs.bind(this);\n    this.processDataType = this.typedArrayFromBuffer;\n    this.prepareFunction = this.prepareWorkerTask.bind(this); // Bind prepareWorkerTask function\n    this.feedHamster = this.messageWorkerThread.bind(this); // Bind messageWorkerThread function\n    this.getBufferSize = this.getBufferSize;\n    this.createSharedBuffer = this.createSharedBuffer.bind(this);\n    this.getDataType = this.getDataType;\n    this.setupSharedArrayBuffer = this.setupSharedArrayBuffer.bind(this);\n  }\n\n  /**\n  * @function messageWorkerThread - Prepares message to send to thread\n  * @param {object} hamstersHabitat - Hamsters Habitat instance\n  * @param {Worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorkerThread(hamster, hamsterFood) {\n    if(this.hamsters.habitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    return hamster.postMessage(hamsterFood, this.hamsters.data.getTransferableObjects(hamsterFood));\n  }\n\n  getTransferableObjects(obj) {\n    const typedArrayBuffers = [];\n    const transferableObjects = [];\n    const typedArrayTypes = [\n      'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', \n      'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n    ];\n    const otherTransferables = [\n      'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n    ];\n    const globalContext = typeof window !== 'undefined' ? window : global;\n  \n    for (const prop in obj) {\n      for (const type of typedArrayTypes) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          typedArrayBuffers.push(obj[prop].buffer);\n          break;\n        }\n      }\n  \n      for (const type of otherTransferables) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          transferableObjects.push(obj[prop]);\n          break;\n        }\n      }\n    }\n  \n    return typedArrayBuffers.concat(transferableObjects);\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'Uint32': Uint32Array,\n      'Uint16': Uint16Array,\n      'Uint8': Uint8Array,\n      'Uint8clamped': Uint8ClampedArray,\n      'Int32': Int32Array,\n      'Int16': Int16Array,\n      'Int8': Int8Array,\n      'Float32': Float32Array,\n      'Float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return buffer;\n    }\n    return new types[dataType](buffer);\n  }\n\n  /**\n  * @function prepareWorkerTask - Prepares function for thread, strips whitespace\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareWorkerTask(functionBody) {\n    let functionString = String(functionBody);\n    let isAsync = functionString.trim().startsWith('async');\n    functionBody = functionString.substring(functionString.indexOf(\"{\") + 1, functionString.lastIndexOf(\"}\"));\n    if(isAsync) {\n      return `(async () => {\n        ${functionBody}\n      })();`;\n    }\n    return functionBody;\n  }\n\n  /**\n  * @function sortTaskOutput - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortTaskOutput(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n   * @function getBufferSize - Gets the byte length of the input array\n   * @param {TypedArray} array - The input typed array\n   * @returns {number} - The byte length of the array\n   */\n  getBufferSize(array) {\n    return array.byteLength;\n  }\n\n  /**\n   * @function createSharedBuffer - Creates a SharedArrayBuffer based on the input array's byte length\n   * @param {TypedArray} array - The input typed array\n   * @returns {SharedArrayBuffer} - The created SharedArrayBuffer\n   */\n  createSharedBuffer(array) {\n    const byteLength = this.getBufferSize(array);\n    const sharedBuffer = new SharedArrayBuffer(byteLength);\n    const sharedArray = new array.constructor(sharedBuffer);\n\n    // Copy data from the input array to the shared array\n    sharedArray.set(array);\n\n    return sharedBuffer;\n  }\n\n  /**\n   * @function setupSharedArrayBuffer - Sets up the shared buffer and corresponding typed array\n   * @param {TypedArray} array - The input typed array\n   * @returns {object} - SharedArrayBuffer;\n   */\n  setupSharedArrayBuffer(array) {\n    return this.createSharedBuffer(array);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function addThreadOutputWithIndex - Joins individual thread outputs into single result\n  * @param {object} task - Hamsters task object\n  * @param {object} index - Index information\n  * @param {array} output - Output array\n  */\n  addThreadOutputWithIndex(task, index, output) {\n    let i = 0;\n    const outputLength = output.length;\n    for (i; i < outputLength; i++) {\n      task.output[(index.start + i)] = output[i];\n    }\n  }\n\n  /**\n   * @function calculateIndexes - Splits a single array into multiple equal sized subarrays\n   * @param {array} array - Array to split\n   * @param {number} n - Number of subarrays to create\n   */\n  calculateIndexes(array, n) {\n    // If n is 1, return the whole array range\n    if (n === 1) {\n      return [{ start: 0, end: array.length - 1 }];\n    }\n\n    const indexes = [];\n    const segmentSize = Math.floor(array.length / n);\n    let startIndex = 0;\n\n    for (let i = 0; i < n; i++) {\n      const endIndex = startIndex + segmentSize - 1;\n      indexes.push({ start: startIndex, end: endIndex });\n      startIndex = endIndex + 1;\n    }\n\n    // Adjust the last segment to cover any remaining elements\n    if (startIndex < array.length) {\n      indexes[n - 1].end = array.length - 1;\n    }\n\n    return indexes;\n  }\n\n  getTransferList(task) {\n    const transferList = {};\n    const hamsterFood = task.input;\n    Object.keys(hamsterFood).forEach(item => {\n      if (Array.isArray(hamsterFood[item])) {\n        transferList[item] = hamsterFood[item];\n        task.input[item] = null;\n        hamsterFood[item] = 'Awaiting Transfer';\n      }\n    });\n    return {hamsterFood, transferList, task, transferCount: Object.keys(transferList).length};\n  }\n\n  /**\n  * @function getSubArrayUsingIndex - Slices subarray based on provided index\n  * @param {object} index - Index information\n  * @param {object} inputArray - Hamsters task object\n  */\n  getSubArrayUsingIndex(index, inputArray) {\n    return inputArray.slice(index.start, index.end + 1);\n  }\n}\n\nexport default Data;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Task {\n  /**\n   * @constructor\n   * @param {object} habitat - The environment settings\n   * @param {object} data - Data utility methods\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  constructor(hamsters, params, functionToRun) {\n    'use strict';\n\n    this.input = params;\n    this.type = 'task-local';\n    this.output = [];\n    this.scheduler = {\n      count: 0,\n      threads: params.threads || 1,\n      transfers: {\n        request: 0,\n        send: 0\n      },\n      workers: []\n    };\n\n    if (hamsters.habitat.legacy) {\n      this.setupLegacyTask(hamsters, functionToRun);\n    } else {\n      this.setupModernTask(hamsters, params, functionToRun);\n    }\n\n    if (hamsters.habitat.debug) {\n      this.setupDebugMetrics();\n    }\n  }\n\n  /**\n   * @method setupLegacyTask\n   * @description Sets up task for legacy environments\n   * @param {function} functionToRun - Function to execute\n   */\n  setupLegacyTask(hamsters, functionToRun) {\n    this.scheduler.threads = 1;\n    if (!hamsters.habitat.node && !hamsters.habitat.isIE) {\n      this.input.hamstersJob = functionToRun;\n    }\n  }\n\n  /**\n   * @method setupModernTask\n   * @description Sets up task for modern environments\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  setupModernTask(hamsters, params, functionToRun) {\n    this.input.hamstersJob = hamsters.habitat.legacy ? functionToRun : hamsters.data.prepareFunction(functionToRun);\n    if (params.sharedArray && hamsters.habitat.atomics) {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.sharedArray, this.scheduler.threads);\n      this.scheduler.sharedBuffer = hamsters.data.setupSharedArrayBuffer(params.sharedArray);\n      this.input.sharedArray = []; //Reduce ram usage on main thread, do not preserve original array its no longer needed.\n    } else {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.array, this.scheduler.threads);\n    }\n  }\n\n  /**\n   * @method setupDebugMetrics\n   * @description Sets up debug metrics if debug mode is enabled\n   */\n  setupDebugMetrics() {\n    this.scheduler.metrics = {\n      created_at: Date.now(),\n      started_at: Date.now(),\n      completed_at: null,\n      threads: this.setupThreadMetrics()\n    };\n  }\n\n  setupThreadMetrics() {\n    let i = 0;\n    let threadMetrics = [];\n    while(i < this.scheduler.threads) {\n      threadMetrics.push({\n        created_at: Date.now(),\n        started_at: null,\n        enqueued_at: null,\n        dequeued_at: null,\n        completed_at: null\n      });\n      i += 1;\n    }\n    return threadMetrics;\n  }\n}\n  \nexport default Task;\n  ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass NodeStore {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.cache = new Map();\n    }\n\n    get(key) {\n        if (this.cache.has(key)) {\n            const value = this.cache.get(key);\n            // Refresh the key\n            this.cache.delete(key);\n            this.cache.set(key, value);\n            return Promise.resolve(value);\n        }\n        return Promise.resolve(null);\n    }\n\n    set(key, value) {\n        if (this.cache.size >= this.maxSize) {\n            // Remove the oldest (least recently used) entry\n            const oldestKey = this.cache.keys().next().value;\n            this.cache.delete(oldestKey);\n        }\n        this.cache.set(key, value);\n        return Promise.resolve();\n    }\n\n    clear() {\n        this.cache.clear();\n        return Promise.resolve();\n    }\n}\n\nexport default NodeStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass WebStore {\n    constructor(dbName, storeName, maxSize) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.maxSize = maxSize;\n        this.db = null;\n        this.initDB();\n    }\n\n    initDB() {\n        const self = this;\n        const request = indexedDB.open(this.dbName, 1);\n\n        request.onerror = function(event) {\n            console.error('Error opening database:', event.target.error);\n        };\n\n        request.onupgradeneeded = function(event) {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains(self.storeName)) {\n                const objectStore = db.createObjectStore(self.storeName, { keyPath: 'key' });\n                objectStore.createIndex('by_key', 'key', { unique: true });\n                objectStore.createIndex('by_timestamp', 'timestamp');\n            }\n        };\n\n        request.onsuccess = function(event) {\n            self.db = event.target.result;\n        };\n    }\n\n    get(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve(null);\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const result = event.target.result;\n                if (result) {\n                    self.updateTimestamp(key).then(() => resolve(result.value)).catch(reject);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    set(key, value) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            self.checkSize().then(() => {\n                const transaction = self.db.transaction([self.storeName], 'readwrite');\n                const objectStore = transaction.objectStore(self.storeName);\n                const request = objectStore.put({ key: key, value: value, timestamp: Date.now() });\n\n                request.onsuccess = function() {\n                    resolve();\n                };\n\n                request.onerror = function(event) {\n                    reject(event.target.error);\n                };\n            }).catch(reject);\n        });\n    }\n\n    clear() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.clear();\n\n            request.onsuccess = function() {\n                resolve();\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    checkSize() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const countRequest = objectStore.count();\n\n            countRequest.onsuccess = function() {\n                const count = countRequest.result;\n                if (count >= self.maxSize) {\n                    self.evictOldest().then(resolve).catch(reject);\n                } else {\n                    resolve();\n                }\n            };\n\n            countRequest.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    evictOldest() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const index = objectStore.index('by_timestamp');\n            const request = index.openCursor(null, 'next');\n\n            request.onsuccess = function(event) {\n                const cursor = event.target.result;\n                if (cursor) {\n                    cursor.delete().onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    updateTimestamp(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const data = event.target.result;\n                if (data) {\n                    data.timestamp = Date.now();\n                    objectStore.put(data).onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n}\n\nexport default WebStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport NodeStore from './stores/NodeStore';\nimport WebStore from './stores/WebStore';\n\nclass Memoize {\n    constructor(hamsters, maxSize) {\n        'use strict';\n\n        this.hamsters = hamsters;\n        this.store = this.hamsters.habitat.node ? new NodeStore(maxSize) : new WebStore('hamstersjs', 'cacheStore', maxSize);\n    }\n\n    memoize(func) {\n        const self = this;\n        return function(task) {\n            const key = self.generateTaskKey(task);\n\n            return new Promise(function(resolve, reject) {\n                self.store.get(key).then(function(cachedResult) {\n                    if (cachedResult !== null) {\n                        resolve(cachedResult);\n                    } else {\n                        self.applyFunc(func, task).then(function(result) {\n                            self.store.set(key, result).then(function() {\n                                resolve(result);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }\n                }).catch(reject);\n            });\n        };\n    }\n\n    generateTaskKey(task) {\n        const key = JSON.stringify({ input: task.input });\n        return this.hashCode(key);\n    }\n\n    hashCode(str) {\n        let hash = 0, i, chr;\n        if (str.length === 0) return hash;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash.toString();\n    }\n\n    applyFunc(func, args) {\n        return new Promise((resolve, reject) => {\n            try {\n                const result = func.apply(null, args);\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n\nexport default Memoize;","class Distribute {\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.localConnection = null;\n    this.remoteConnections = new hamsters.observable({});\n    this.clientInfo = new hamsters.observable({});\n    this.sendChannels = new hamsters.observable({});\n    this.pcConstraint = null;\n    this.ws = null;\n    this.clientId = null;\n    this.pendingPromises = new hamsters.observable({});\n    this.pendingTasks = new hamsters.observable({});\n    this.pendingTransfers = new hamsters.observable({});\n    this.awaitingTransfers = new hamsters.observable({});\n    this.lastRequestedTransfers = new hamsters.observable({});\n    this.pendingOutputs = new hamsters.observable({});\n    this.returnDistributedOutput = this.sendDataResponse.bind(this);\n    this.establishConnection = this.initWebSocket.bind(this);\n    this.lastHeartbeat = {};\n    this.heartBeatInterval = 30 * 1000; //Send heartbeat message every 30 seconds\n    this.heartBeatTimeout = {};\n  }\n\n  initWebSocket() {\n    this.ws = new WebSocket(`${this.hamsters.habitat.relay}`);\n\n    this.ws.onopen = () => {\n      console.info(`Hamsters.js ${this.hamsters.version} connection established`);\n      this.ws.send(JSON.stringify({\n        type: 'register',\n        logicalCores: this.hamsters.maxThreads\n      }));\n      this.sendHeartBeat(this.heartBeatInterval);\n    };\n\n    this.ws.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      this.handleWebSocketMessage(message);\n    };\n\n    this.ws.onerror = (error) => {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} connection error:`, error);\n      }\n    };\n\n    this.ws.onclose = () => {\n      if (this.hamsters.habitat.debug) {\n        console.info(`Hamsters.js ${this.hamsters.version} connection closed. Reconnecting...`);\n      }\n      this.establishConnection();\n    };\n  }\n\n  handleWebSocketMessage(message) {\n    const handlers = {\n      'register': this.handleClientReconnect.bind(this),\n      'update-client-list': this.updateClientList.bind(this),\n      'offer': this.handleOffer.bind(this),\n      'answer': this.handleAnswer.bind(this),\n      'candidate': this.handleCandidate.bind(this)\n    };\n\n    const handler = handlers[message.type];\n    if (handler) {\n      handler(message);\n    } else if (this.hamsters.habitat.debug) {\n      console.info(`Hamsters.js ${this.hamsters.version} unknown message type: ${message.type}`);\n    }\n  }\n\n  sendHeartBeat(interval) {\n    this.heartBeatTimeout = setInterval(() => {\n      this.ws.send(JSON.stringify({\n        type: 'heartbeat'\n      }));\n      this.lastHeartbeat = Date.now();\n    }, interval);\n  }\n\n  updateClientList(clientListMessage) {\n    const clients = clientListMessage.clients;\n    const newClientIds = new Set(clients.map(client => client.id));\n    clients.forEach(client => {\n      if (client.id !== this.clientId && !this.remoteConnections.get(client.id)) {\n        this.createConnection(client.id);\n      }\n    });\n    const remoteConnections = this.remoteConnections.getData();\n    Object.keys(remoteConnections).forEach((key) => {\n      if (!newClientIds.has(key)) {\n        this.handleClientDisconnect(key);\n      }\n    });\n  }\n\n  handleClientDisconnect(clientId) {\n    if (this.remoteConnections.get(clientId)) {\n      this.remoteConnections.get(clientId).close();\n      this.remoteConnections.delete(clientId);\n    }\n    if (this.sendChannels.get(clientId)) {\n      this.sendChannels.get(clientId).close();\n      this.sendChannels.delete(clientId);\n    }\n    this.clientInfo.delete(clientId);\n  }\n\n  handleClientReconnect(message) {\n    const newClientId = message.id;\n\n    if (this.clientId === newClientId) {\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} reconnected with same ID`);\n      }\n      return;\n    }\n    this.handleClientDisconnect(newClientId);\n    this.clientId = newClientId;\n  }\n\n  createConnection(targetClient) {\n    if (targetClient === this.clientId || this.remoteConnections.get(targetClient)) {\n      return;\n    }\n\n    const servers = {\n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n    };\n\n    const localConnection = new RTCPeerConnection(servers, this.pcConstraint);\n\n    localConnection.onicecandidate = (e) => {\n      if (e.candidate) {\n        this.ws.send(JSON.stringify({ \n          type: 'candidate', \n          target: targetClient, \n          from: this.clientId,\n          logicalCores: this.hamsters.maxThreads,\n          userAgent: navigator.userAgent,\n          candidate: e.candidate\n        }));\n      }\n    };\n\n    localConnection.ondatachannel = (event) => {\n      this.dataChannelCallback(event, targetClient);\n    };\n\n    this.findOrCreateChannel(targetClient, localConnection);\n\n    this.remoteConnections.set(targetClient, localConnection);\n    localConnection.createOffer().then(desc => {\n      localConnection.setLocalDescription(desc);\n      this.ws.send(JSON.stringify({ type: 'offer', target: targetClient, offer: desc }));\n    }).catch(this.onCreateSessionDescriptionError.bind(this));\n  }\n\n  handleOffer(data) {\n    const targetClient = data.from;\n    console.log('WE HAVE A OFFER ', data);\n    if (!this.remoteConnections.get(targetClient)) {\n      const servers = {\n        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n      };\n\n      const remoteConnection = new RTCPeerConnection(servers, this.pcConstraint);\n\n      remoteConnection.onicecandidate = (e) => {\n        if (e.candidate) {\n          this.ws.send(JSON.stringify({ type: 'candidate', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, candidate: e.candidate }));\n        }\n      };\n\n      remoteConnection.ondatachannel = (event) => {\n        this.dataChannelCallback(event, targetClient);\n      };\n\n      remoteConnection.setRemoteDescription(new RTCSessionDescription(data.offer)).then(() => {\n        return remoteConnection.createAnswer();\n      }).then(desc => {\n        this.ws.send(JSON.stringify({ type: 'answer', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, answer: desc }));\n        return remoteConnection.setLocalDescription(desc);\n      }).catch(this.onCreateSessionDescriptionError.bind(this));\n\n      this.remoteConnections.set(targetClient, remoteConnection);\n      this.findOrCreateChannel(targetClient, remoteConnection);\n    }\n  }\n\n  findOrCreateChannel(targetClient, remoteConnection) {\n    let sendChannel = this.sendChannels.get(targetClient);\n    if(!sendChannel) {\n      const dataConstraint = {\n        ordered: true,\n        maxRetransmits: 3,\n        id: Math.floor(Math.random() * 65536)\n      };\n      sendChannel = remoteConnection.createDataChannel('hamstersjs', dataConstraint);\n      \n      sendChannel.onopen = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onclose = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onmessage = (event) => {\n        this.onReceiveMessageCallback(targetClient, event.data);\n      };\n\n      this.sendChannels.set(targetClient, sendChannel);\n    }\n    return sendChannel\n  }\n  \n  dataChannelCallback(event, targetClient) {\n    const dataChannel = event.channel;\n    const currentTargetClient = targetClient;\n\n    dataChannel.onmessage = (event) => {\n      this.onReceiveMessageCallback(currentTargetClient, event.data);\n    };\n\n    this.sendChannels.set(currentTargetClient, dataChannel);\n  }\n\n  storeClientConnectionInfo(data) {\n    const client = {\n      logicalCores: data.logicalCores,\n      userAgent: data.userAgent,\n    };\n    this.clientInfo.set(data.from, client);\n  }\n\n  handleAnswer(data) {\n    this.storeClientConnectionInfo(data);\n    const connection = this.remoteConnections.get(data.from);\n    connection.setRemoteDescription(new RTCSessionDescription(data.answer));\n    this.remoteConnections.set(data.from, connection);\n  }\n\n  handleCandidate(data) {\n    let connection = this.remoteConnections.get(data.from);\n    if(!connection) {\n      this.storeClientConnectionInfo(data);\n      connection = this.remoteConnections.get(data.from);\n    }\n    connection.addIceCandidate(new RTCIceCandidate(data.candidate)).catch(this.onAddIceCandidateError.bind(this));\n    this.remoteConnections.set(data.from, connection);\n  }\n\n  distributeTask(task, resolve, reject) {\n    const targetClient = task.input.client || this.getDistributedClient();\n    if (!targetClient) {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} no target client found.`);\n      }\n      reject('No target client found.');\n      return;\n    }\n\n    const messageId = this.generateUniqueId();\n    const preparedList = this.hamsters.data.getTransferList(task);\n    const distributedSubTask = {\n      hamsterFood: preparedList.hamsterFood,\n      task: preparedList.task,\n      messageId: messageId,\n      type: 'task-request'\n    };\n    const clients = [targetClient];\n    this.pendingPromises.set(messageId, { resolve, reject, clients });\n    \n    if (preparedList.transferCount > 0) {\n      this.pendingTransfers.set(messageId, preparedList.transferList);\n    }\n    this.sendData({ targetClient, data: distributedSubTask });\n  }\n\n  getDistributedClient() {\n    const sendChannelKeys = Object.keys(this.sendChannels.getData());\n    if (sendChannelKeys.length === 0) {\n      if (this.hamsters.habitat.debug) {\n        console.warn(`Hamsters.js ${this.hamsters.version} no send channels available.`);\n      }\n      return null;\n    }\n\n    let minLatency = Infinity;\n    let targetClient = null;\n\n    sendChannelKeys.forEach(clientId => {\n      const channel = this.sendChannels.get(clientId);\n      const client = this.clientInfo.get(clientId);\n      if (channel.readyState === 'open' && client && client.latency < minLatency) {\n        minLatency = client.latency;\n        targetClient = clientId;\n      }\n    });\n\n    return targetClient;\n  }\n\n  initializeDistributedTask(targetClient, task, messageId) {\n    const transferList = Object.keys(task.hamsterFood)\n    .filter(key => task.hamsterFood[key] === 'Awaiting Transfer')\n    .reduce((transfers, key) => {\n      transfers[key] = 'Awaiting Transfer';\n      return transfers;\n    }, {});\n  \n\n    if (Object.keys(transferList).length > 0) {\n      let currentAwaitingTransfers = this.awaitingTransfers.get(targetClient);\n      if(!currentAwaitingTransfers) {\n        currentAwaitingTransfers = [];\n      }\n      currentAwaitingTransfers.push({\n        messageId: messageId,\n        transferList: transferList\n      });\n      this.awaitingTransfers.set(targetClient, currentAwaitingTransfers);\n      this.requestNextTransfer(targetClient, messageId);\n    } else {\n      this.runDistributedTask(task, targetClient);\n    }\n  }\n\n  requestNextTransfer(targetClient, messageId) {\n    const requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n    let lastRequestedTransfer = null;\n    if(requestedTransfers) {\n      lastRequestedTransfer = requestedTransfers.find(item => item.messageId === messageId);\n      if (lastRequestedTransfer) {\n        console.info(\"We already requested this transfer for this task\");\n        return;\n      }\n    }\n    const currentAwaitingTransfers = this.awaitingTransfers.get(targetClient);\n    if (currentAwaitingTransfers) {\n      const awaitingTransfer = currentAwaitingTransfers.find(item => item.messageId === messageId);\n      if (awaitingTransfer) {\n        this.requestTransferFromList(awaitingTransfer, messageId, targetClient);\n      }\n    }\n  }\n  \n  requestTransferFromList(awaitingTransfer, messageId, targetClient) {\n    const transferKeys = Object.keys(awaitingTransfer.transferList);\n    if (transferKeys.length > 0) {\n      const nextKey = transferKeys.find(key => awaitingTransfer.transferList[key] === 'Awaiting Transfer');\n      if (nextKey) {\n        this.updateTransferStatus(targetClient, messageId, nextKey, 'Requested Transfer');\n        this.requestDataTransfer(nextKey, messageId, targetClient);\n      }\n    }\n  }\n  \n  updateTransferStatus(targetClient, messageId, key, status) {\n    // Get the current awaitingTransfers array for the target client\n    const currentAwaitingTransfers = this.awaitingTransfers.get(targetClient);\n    \n    if (!currentAwaitingTransfers) {\n      console.error(`Hamsters.js ${this.hamsters.version} no awaiting transfers found for ${targetClient}`);\n      return;\n    }\n  \n    // Find the correct awaitingTransfer object by messageId\n    const awaitingTransfer = currentAwaitingTransfers.find(item => item.messageId === messageId);\n  \n    if (!awaitingTransfer) {\n      console.error(`Hamsters.js ${this.hamsters.version} no awaiting transfer found for messageId ${messageId}`);\n      return;\n    }\n  \n    // Update the status of the transfer key in the transferList\n    awaitingTransfer.transferList[key] = status;\n  \n    // Set the updated awaitingTransfers back to the client\n    this.awaitingTransfers.set(targetClient, currentAwaitingTransfers);\n  }\n  \n  \n  handleTransferResponse(targetClient, transferData) {\n    const requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n  \n    if (!requestedTransfers || requestedTransfers.length === 0) {\n      console.error(`Hamsters.js ${this.hamsters.version} received transfer response but no transfer was requested for ${targetClient}`);\n      return;\n    }\n  \n    const currentRequestedTransfer = requestedTransfers[0]; // Always get the first requested transfer\n    const key = currentRequestedTransfer.key;  // Use currentRequestedTransfer consistently\n    const messageId = currentRequestedTransfer.messageId || null;\n    const responseId = currentRequestedTransfer.responseId || null;\n  \n    // Proceed with processing using currentRequestedTransfer's key, messageId, and responseId    \n  \n    if (responseId && key === 'output') {\n      // Handle task response if the key is 'output'\n      this.handleTaskResponse(targetClient, { output: this.convertFromArrayBuffer(transferData), messageId, responseId });\n    } else {\n      // Find the awaiting transfer for the specific messageId\n      const currentAwaitingTransfers = this.awaitingTransfers.get(targetClient);\n      if (!currentAwaitingTransfers) {\n        console.error(`Hamsters.js ${this.hamsters.version} no awaiting transfers found for ${targetClient}`);\n        return;\n      }\n  \n      const awaitingTransfer = currentAwaitingTransfers.find(item => item.messageId === messageId);\n      if (!awaitingTransfer) {\n        console.error(`Hamsters.js ${this.hamsters.version} no awaiting transfer found for messageId ${messageId}`);\n        return;\n      }\n  \n      // Check if the requested transfer exists and is in 'Requested Transfer' status\n      const isRequestedTransfer = awaitingTransfer.transferList[key] === 'Requested Transfer';\n      const pendingTasks = this.pendingTasks.get(targetClient); \n      const currentTaskIndex = pendingTasks ? pendingTasks.findIndex(item => item.messageId === messageId) : -1;\n      const currentTask = currentTaskIndex > -1 ? pendingTasks[currentTaskIndex] : null;\n  \n      if (currentTask && isRequestedTransfer) {\n        // Convert ArrayBuffer back to the appropriate data type and update the pending task\n        currentTask.hamsterFood[key] = this.convertFromArrayBuffer(transferData, key);\n  \n        // Remove the transferred item from the awaitingTransfer's transferList\n        delete awaitingTransfer.transferList[key];\n  \n        // Check if there are more pending transfers in the transferList\n        if (Object.keys(awaitingTransfer.transferList).length === 0) {\n          // All transfers complete for this messageId\n          currentAwaitingTransfers.splice(currentAwaitingTransfers.indexOf(awaitingTransfer), 1); // Remove only this awaitingTransfer\n  \n          if (currentAwaitingTransfers.length === 0) {\n            this.awaitingTransfers.delete(targetClient); // If no more awaiting transfers, delete the entry\n          } else {\n            this.awaitingTransfers.set(targetClient, currentAwaitingTransfers); // Update the remaining awaitingTransfers\n          }\n  \n          pendingTasks.splice(currentTaskIndex, 1); // Remove only the currentTask from pendingTasks\n  \n          if (pendingTasks.length === 0) {\n            this.pendingTasks.delete(targetClient); // If no more pending tasks, delete the entry\n          } else {\n            this.pendingTasks.set(targetClient, pendingTasks); // Update remaining pending tasks\n          }\n  \n          this.runDistributedTask(currentTask, targetClient); // Run the distributed task\n        } else {\n          // There are more transfers to be made, continue the process\n          this.awaitingTransfers.set(targetClient, currentAwaitingTransfers); // Update the awaitingTransfers\n          this.requestNextTransfer(targetClient, messageId); // Request the next transfer\n        }\n      } else {\n        console.error(`Hamsters.js ${this.hamsters.version} received unexpected transfer response for ${targetClient}`);\n      }\n    }\n  \n    // Cleanup logic to remove the processed transfer (common for both output and input)\n    // Remove the first transfer (FIFO) from the requestedTransfers array\n    requestedTransfers.shift(); // Removes the first item (currentRequestedTransfer)\n    \n    // If no more transfers are left, delete the entry from lastRequestedTransfers\n    if (requestedTransfers.length === 0) {\n      this.lastRequestedTransfers.delete(targetClient);\n    } else {\n      this.lastRequestedTransfers.set(targetClient, requestedTransfers); // Update remaining transfers\n    }\n  \n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} processed transfer response for ${key} from ${targetClient}`);\n    }\n  }  \n  \n  measureLatency(targetClient) {\n    const startTime = performance.now();\n    this.sendPing(targetClient, startTime);\n  }\n\n  sendPing(targetClient, startTime) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'ping', startTime }));\n    }\n  }\n\n  handlePing(targetClient, startTime) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'pong', startTime }));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent pong to ${targetClient}`);\n      }\n    }\n  }\n\n  handlePong(targetClient, startTime) {\n    const latency = performance.now() - startTime;\n    const clientInfo = this.clientInfo.get(targetClient) || {};\n    clientInfo.latency = latency;\n    this.clientInfo.set(targetClient, clientInfo);\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} received pong from ${targetClient} with latency: ${latency.toFixed(2)}ms`);\n    }\n  }\n\n  runDistributedTask(taskMessage, targetClient) {\n    let task = taskMessage.task;\n    task.targetClient = targetClient;\n    task.messageId = taskMessage.messageId;\n    task.input = taskMessage.hamsterFood;\n    task.type = 'task-response';\n    console.log(\"RUNNING DISTRIBUTED TASK\");\n    this.hamsters.scheduleTask(task, this.returnDistributedOutput, this.returnDistributedOutput);\n  }\n  \n  sendDataResponse(responseData) {\n    const { targetClient, messageId, output } = responseData;\n    console.log(\"SeNDING OUTPUT RESPNSE TO \", targetClient);\n    this.initializeOutputTransfer(targetClient, output, messageId);\n  }\n\n  initializeOutputTransfer(targetClient, output, messageId) {\n    const responseId = this.generateUniqueId();\n    this.pendingOutputs.set(responseId, { targetClient, output, messageId });\n\n    const initialResponse = {\n      type: 'task-response',\n      messageId,\n      responseId,\n      awaitingTransfers: true\n    };\n\n    this.sendData({ targetClient, data: initialResponse });\n\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} initialized output transfer for ${targetClient} (responseId: ${responseId})`);\n    }\n  }\n\n  handleOutputTransferRequest(targetClient, message) {\n    const { responseId } = message;\n    const pendingOutput = this.pendingOutputs.get(responseId);\n\n    if (pendingOutput && pendingOutput.targetClient === targetClient) {\n      const arrayBuffer = this.getArrayBuffer(pendingOutput.output);\n      this.sendBlobData({ targetClient, data: arrayBuffer, dataType: 'arrayBuffer' });\n      this.pendingOutputs.delete(responseId);\n\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent output transfer for ${targetClient} (responseId: ${responseId})`);\n      }\n    } else {\n      console.error(`Hamsters.js ${this.hamsters.version} received unexpected output transfer request for ${targetClient}`);\n    }\n  }\n\n  getArrayBuffer(transferredData) {\n    if (ArrayBuffer.isView(transferredData)) {\n      return transferredData.buffer;\n    }\n    if (transferredData instanceof ArrayBuffer) {\n      return transferredData;\n    }\n    return new Uint8Array(transferredData).buffer\n  }\n\n  convertFromArrayBuffer(buffer, key) {\n    const originalArray = new Uint8Array(buffer);\n    if(this.hamsters.habitat.node) { //Node.js has stricter security and won't allow the transfer of buffers sent using node.js webrtc channels, clone into new array first\n      const newArrayBuffer = new ArrayBuffer(originalArray.byteLength);\n      const newTypedArray = new Uint8Array(newArrayBuffer);\n      newTypedArray.set(originalArray);\n      return newTypedArray;\n    }\n    return originalArray;\n  }\n\n  sendData({ targetClient, data }) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify(data));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent data to: ${targetClient}`);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: ${targetClient}`);\n      }\n    }\n  }\n\n  sendBlobData({targetClient, data, dataType}) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(data);\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent blob data to: ${targetClient}`);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: ${targetClient}`);\n      }\n    }\n  }\n\n  // Function to convert Blob to ArrayBuffer using Fetch API\n  async blobToArrayBuffer(blob) {\n    if (typeof fetch === 'function') { // Check if Fetch API is available\n        const response = new Response(blob);\n        return await response.arrayBuffer();\n    } else {\n        throw new Error('Fetch API is not supported in this environment.');\n    }\n  }\n\n  async onReceiveMessageCallback(targetClient, messageData) {\n    if(messageData instanceof Blob) {\n      messageData = await this.blobToArrayBuffer(messageData);\n    }\n    if (messageData instanceof ArrayBuffer) {\n      this.handleTransferResponse(targetClient, messageData);\n    } else if (typeof messageData === 'string') {\n      let incomingMessage;\n      try {\n        incomingMessage = JSON.parse(messageData);\n        this.handleIncomingMessage(targetClient, incomingMessage);\n      } catch (error) {\n        console.error(`Hamsters.js ${this.hamsters.version} error parsing message:`, error);\n      }\n    } else {\n      console.log(\"Received unexpected data type:\", targetClient, messageData);\n    }\n  }\n\n  handleIncomingMessage(targetClient, incomingMessage) {\n    const handlers = {\n      'transfer-request': this.fulfillTransferRequest.bind(this),\n      'task-request': this.handleTaskRequest.bind(this),\n      'transfer-response': this.processTransferResponse.bind(this),\n      'output-transfer-request': this.handleOutputTransferRequest.bind(this),\n      'task-response': this.handleTaskResponse.bind(this),\n      'ping': (client, message) => this.handlePing(client, message.startTime),\n      'pong': (client, message) => this.handlePong(client, message.startTime)\n    };\n\n    const handler = handlers[incomingMessage.type];\n    if (handler) {\n      handler(targetClient, incomingMessage);\n    } else {\n      console.log(`Hamsters.js ${this.hamsters.version} unknown message received from: ${targetClient}`);\n    }\n  }\n\n  handleTaskRequest(targetClient, incomingMessage) {\n    let currentPendingTasks = this.pendingTasks.get(targetClient);\n    if(!currentPendingTasks) {\n      currentPendingTasks = [];\n    }\n    currentPendingTasks.push(incomingMessage);\n    this.pendingTasks.set(targetClient, currentPendingTasks);\n    const awaitingTransfers = Object.values(incomingMessage.hamsterFood).some(value => value === 'Awaiting Transfer');\n    if (awaitingTransfers) {\n      this.initializeDistributedTask(targetClient, incomingMessage, incomingMessage.messageId);\n    } else {\n      this.runDistributedTask(incomingMessage, targetClient);\n    }\n  }\n\n  handleTaskResponse(targetClient, message) {\n    const { messageId, responseId, awaitingTransfers } = message;\n    const pendingPromise = this.pendingPromises.get(messageId);\n    \n    if (pendingPromise) {\n      if (awaitingTransfers) {\n        this.requestOutputTransfer(targetClient, responseId, messageId); // Independent request for each output\n      } else {\n        pendingPromise.resolve(message.output);\n        this.pendingPromises.delete(messageId);\n      }\n    } else {\n      console.warn(`Received a message from ${targetClient} but no matching promise found with messageId ${messageId}`);\n    }\n  }  \n\n  requestOutputTransfer(targetClient, responseId, messageId) {\n    let requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n    if(!requestedTransfers) {\n      requestedTransfers = [];\n    }\n    const outputTransferRequest = {\n      type: 'output-transfer-request',\n      key: 'output',\n      responseId,\n      messageId\n    };\n    requestedTransfers.push(outputTransferRequest);\n    this.lastRequestedTransfers.set(targetClient, requestedTransfers);\n    this.sendData({ targetClient, data: outputTransferRequest });\n  }\n\n  requestDataTransfer(key, messageId, targetClient) {\n    let requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n    if(!requestedTransfers) {\n      requestedTransfers = [];\n    }\n    const message = {\n      type: 'transfer-request',\n      key: key,\n      messageId: messageId\n    };\n    requestedTransfers.push(message);\n    this.lastRequestedTransfers.set(targetClient, requestedTransfers);\n    this.sendData({targetClient, data: message});\n\n    // Update the status of the transfer item\n    const awaitingTransfersData = this.awaitingTransfers.get(targetClient);\n    if (awaitingTransfersData && awaitingTransfersData.messageId === messageId) {\n      awaitingTransfersData.transfers[key] = 'Requested Transfer';\n      this.awaitingTransfers.set(targetClient, awaitingTransfersData);\n    }\n\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} requested transfer for ${key} from ${targetClient} (messageId: ${messageId})`);\n    }\n  }\n\n  fulfillTransferRequest(targetClient, incomingMessage) {\n    const { key, messageId, responseId } = incomingMessage;\n    const transferId = responseId || messageId;\n    const pendingTransferItems = this.pendingTransfers.get(transferId);\n\n    if (pendingTransferItems && pendingTransferItems[key]) {\n      const data = pendingTransferItems[key];\n      \n      // Get the ArrayBuffer efficiently based on data type\n      const arrayBuffer = this.getArrayBuffer(data);\n\n      // Send the data as ArrayBuffer\n      this.sendBlobData({ targetClient, data: arrayBuffer, dataType: 'arrayBuffer' });\n\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent transfer response for ${key} (${responseId ? 'output' : 'input'}) to ${targetClient} (messageId: ${messageId})`);\n      }\n\n      // Clean up after sending\n      delete pendingTransferItems[key];\n      if (Object.keys(pendingTransferItems).length === 0) {\n        this.pendingTransfers.delete(transferId);\n      }\n    } else {\n      console.error(`No pending transfer found for ${key} (${responseId ? 'output' : 'input'}) for ${targetClient} (messageId: ${messageId})`);\n    }\n  }\n\n  processTransferResponse(targetClient, incomingMessage) {\n    const { key, data, messageId, responseId } = incomingMessage;\n  \n    if (responseId) {\n      // This is an output transfer\n      const pendingPromise = this.pendingPromises.get(messageId);\n      if (pendingPromise) {\n        pendingPromise.resolve(data);\n        this.pendingPromises.delete(messageId);\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending promise found for messageId: ${messageId}`);\n      }\n    } else {\n      // This is an input transfer\n      const pendingTasks = this.pendingTasks.get(targetClient);\n      if (pendingTasks) {\n        const currentTaskIndex = pendingTasks.findIndex(item => item.messageId === messageId);\n  \n        if (currentTaskIndex > -1) {\n          const currentTask = pendingTasks[currentTaskIndex];\n          currentTask.hamsterFood[key] = this.convertFromArrayBuffer(data);\n  \n          const stillAwaiting = Object.values(currentTask.hamsterFood).some(value => value === 'Awaiting Transfer');\n  \n          if (stillAwaiting) {\n            this.requestNextTransfer(targetClient, messageId);\n          } else {\n            // Remove only the current task from the pendingTasks array\n            pendingTasks.splice(currentTaskIndex, 1);\n  \n            // If there are no more tasks for this client, clean up the pendingTasks map\n            if (pendingTasks.length === 0) {\n              this.pendingTasks.delete(targetClient);\n            } else {\n              this.pendingTasks.set(targetClient, pendingTasks); // Update remaining pending tasks\n            }\n  \n            // Run the task after all transfers have been completed\n            this.runDistributedTask(currentTask, targetClient);\n          }\n        } else {\n          console.warn(`Hamsters.js ${this.hamsters.version} no pending task found for targetClient: ${targetClient} and messageId: ${messageId}`);\n        }\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending task found for targetClient: ${targetClient} and messageId: ${messageId}`);\n      }\n    }\n  \n    // Cleanup requested transfers\n    const requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n    if (requestedTransfers) {\n      requestedTransfers.shift(); // Remove the first item (FIFO)\n      if (requestedTransfers.length === 0) {\n        this.lastRequestedTransfers.delete(targetClient);\n      } else {\n        this.lastRequestedTransfers.set(targetClient, requestedTransfers); // Update remaining transfers\n      }\n    }\n  \n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} processed transfer response for ${key} from ${targetClient}`);\n    }\n  }  \n\n  onSendChannelStateChange(targetClient) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      this.measureLatency(targetClient);\n    }\n    if (sendChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} send channel state changed for ${targetClient}: ${sendChannel.readyState}`);\n    }\n  }\n\n  generateUniqueId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  onCreateSessionDescriptionError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to create session description: ${error}`);\n    }\n  }\n\n  onAddIceCandidateError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to add ICE candidate: ${error}`);\n    }\n  }\n}\n\nexport default Distribute;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Observable {\n  constructor(initialData = {}) {\n    this.data = Array.isArray(initialData) ? [...initialData] : { ...initialData };\n    this.events = {};\n  }\n\n  // Allow listeners to register for specific events\n  on(event, callback) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  }\n\n  // Notify listeners about the event\n  emit(event, ...args) {\n    if (this.events[event]) {\n      this.events[event].forEach(callback => callback(...args));\n    }\n  }\n\n  set(key, value) {\n    if (typeof key === 'string') {\n        const keys = key.split('.');\n        let current = this.data;\n        for (let i = 0; i < keys.length - 1; i++) {\n            current = current[keys[i]];\n        }\n        current[keys[keys.length - 1]] = value;\n    } else if (typeof key === 'object') {\n      this.data[key] = value;\n    }\n    this.emit('change', this.data);\n    return value;\n  }\n\n  setAll(data) {\n    this.data = data;\n  }\n\n  get(key) {\n    return this.data[key];\n  }\n\n  push(...items) {\n    this.data.push(...items);\n    this.emit('change', this.data);\n  }\n\n  pop() {\n    const item = this.data.pop();\n    this.emit('change', this.data);\n    return item;\n  }\n\n  shift() {\n    let item = this.data.shift();\n    this.emit('change', this.data);\n    return item;\n  }\n\n  splice(start, deleteCount, ...items) {\n    const result = this.data.splice(start, deleteCount, ...items);\n    this.emit('change', this.data);\n    return result;\n  }\n\n  indexOf(item) {\n    return this.data.indexOf(item);\n  }\n\n  length() {\n    return this.data.length;\n  }\n\n  delete(property) {\n    if (!Array.isArray(this.data)) {\n      delete this.data[property];\n      this.emit('change', this.data);\n    }\n  }\n\n  getData() {\n    return this.data;\n  }\n}\n\nexport default Observable;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n//Core Functionality\nimport Habitat from './core/habitat';\nimport Pool from './core/pool';\nimport Data from './core/data';\nimport Task from './core/task';\n\n//Worker Scaffolds\nimport Legacy from './scaffold/legacy';\nimport Regular from './scaffold/regular';\nimport Shared from './scaffold/shared';\n\n//Features\nimport Memoize from './feature/memoize';\nimport Distribute from './feature/distribute';\nimport Observable from './feature/observable';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.version = '5.6.3';\n    this.run = this.hamstersRun.bind(this);\n    this.promise = this.hamstersPromise.bind(this);\n    this.init = this.initializeLibrary.bind(this);\n    this.data = {};\n    this.pool = {};\n    this.scaffold = {};\n    this.habitat = {};\n    this.memoize = {};\n  }\n\n  /**\n  * @function inititializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    const start = performance.now();\n    this.observable = Observable;\n    this.data = new Data(this);\n    this.pool = new Pool(this);\n    this.scaffold = {\n      legacy: new Legacy(),\n      regular: new Regular(),\n      shared: new Shared()\n    };\n    this.habitat = new Habitat(this);\n    this.memoize = new Memoize(this, 100); //Set a maximum of 100 memoized function results, LRU cache\n    this.distribute = new Distribute(this);\n    this.processStartOptions(startOptions);\n    \n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      this.pool.spawnHamsters(this.habitat.maxThreads);\n    }\n    this.maxThreads = this.habitat.maxThreads;\n\n    if(this.habitat.relay) {\n      console.info(`Hamsters.js ${this.version} establishing connection to relay`);\n      this.distribute.establishConnection();\n    }\n    const end = performance.now();\n    console.info(`Hamsters.js ${this.version} initialized using up to ${this.habitat.maxThreads} threads in ${end - start}ms`);\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      for (const key of Object.keys(startOptions)) {\n        if (this.habitat.keys.includes(key.toLowerCase())) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          if(key === 'scaffold') {\n            this.scaffold.custom = startOptions[key];\n          } else {\n            this[key] = startOptions[key];\n          }\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    let forceLegacyMode = (typeof startOptions !== 'undefined' && typeof startOptions.legacy !== 'undefined');\n    if (forceLegacyMode) {\n      forceLegacyMode = startOptions.legacy;\n    }\n    if (typeof this.habitat.Worker === 'function' && !forceLegacyMode) {\n      this.habitat.legacy = this.habitat.isIE;\n    }\n  }\n\n  /**\n   * @async\n   * @function scheduleTask - Schedules a new function to be processed by the library\n   * @param {object} task - Provided library execution options\n   * @param {function} resolve - Parent function promise resolve method\n   * @param {function} reject - Parent function promise reject method\n   * @return {Promise} Promise object on completion\n   */\n  scheduleTask(task, resolve, reject) {\n    if (task.input.memoize) {\n      // Pass the task object to the memoized function\n      const memoizedFunction = this.memoize.memoize(() => this.pool.scheduleTask(task, resolve, reject));\n      return memoizedFunction(task).then(resolve).catch(reject);\n    }\n    return this.pool.scheduleTask(task, resolve, reject);\n  }\n\n  /**\n   * @async\n   * @function hamstersPromise - Calls library functionality using async promises\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   * @return {Promise} Promise resolving with results from functionToRun\n   */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      this.scheduleTask(new Task(this, params, functionToRun), resolve, reject);\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    this.scheduleTask(new Task(this, params, functionToRun), onSuccess, onError);\n  }\n}\n\nexport default new hamstersjs();\n"],"names":["root","factory","exports","module","define","amd","global","Legacy","constructor","hamsters","this","scaffold","params","resolve","reject","rtn","data","dataType","habitat","reactNative","self","node","isIE","eval","hamstersJob","Regular","handleDataType","sharedArray","typedArrayFromBuffer","getTransferableObjects","buffer","types","Uint32Array","Uint16Array","Uint8Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","returnResponse","buffers","length","postMessage","obj","transferableObjects","Set","typedArrayTypes","globalContext","window","allTypes","prop","hasOwnProperty","type","includes","add","Array","from","onmessage","message","index","sharedBuffer","bind","Shared","addEventListener","incomingConnection","port","ports","start","incomingMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","prototype","call","Habitat","debug","importScripts","relay","memoize","persistence","browser","isBrowser","webWorker","isWebWorker","isNode","isReactNative","shell","isShell","transferable","supportsTransferableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isInternetExplorer","selectHamsterWheel","sharedWorker","locateSharedWorkerObject","locateBlobBuilder","findAvailableBlobBuilder","legacy","isLegacyEnvironment","Worker","locateWorkerObject","maxThreads","determineGlobalThreads","keys","getHabitatKeys","max","navigator","hardwareConcurrency","isFirefox","os","cpus","userAgent","toLowerCase","indexOf","SharedWorker","process","product","isLegacy","supportsSharedWorkers","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","createDataBlob","textContent","Blob","blob","append","getBlob","generateWorkerBlob","workerLogic","URL","createObjectURL","generateWorkerString","toString","SharedArrayBuffer","Proxy","custom","encodeURIComponent","regular","Pool","threads","observable","running","pending","fetchHamster","getAvailableThread","addWorkToPending","task","scheduler","metrics","count","enqueued_at","Date","now","push","processQueuedItem","hamster","item","dequeued_at","runTask","threadId","spawnHamster","keepTrackOfThread","id","workers","spawnHamsters","prepareMeal","hamsterFood","array","input","getSubArrayFromIndex","excludedKeys","has","legacyWheel","pool","trainHamster","feedHamster","hamsterWheel","returnOutputAndRemoveTask","output","processDataType","aggregate","aggregateThreadOutputs","sort","sortOutput","completedAt","startedAt","started_at","completed_at","console","info","distribute","removeFromRunning","splice","processReturn","JSON","parse","addThreadOutputWithIndex","setOnMessage","onThreadResponse","onmessageerror","onerror","once","error","shift","terminate","scheduleTask","distributeTask","i","indexes","Data","getSubArrayUsingIndex","getSubArrayIndexes","calculateIndexes","sortTaskOutput","prepareFunction","prepareWorkerTask","messageWorkerThread","getBufferSize","createSharedBuffer","getDataType","setupSharedArrayBuffer","stringify","typedArrayBuffers","otherTransferables","concat","functionBody","functionString","String","isAsync","trim","startsWith","substring","lastIndexOf","arr","order","a","b","reverse","byteLength","set","reduce","len","bufferLength","offset","outputLength","n","end","segmentSize","Math","floor","startIndex","endIndex","getTransferList","transferList","forEach","isArray","transferCount","inputArray","slice","Task","functionToRun","transfers","request","send","setupLegacyTask","setupModernTask","setupDebugMetrics","created_at","setupThreadMetrics","threadMetrics","NodeStore","maxSize","cache","Map","value","delete","Promise","size","oldestKey","next","clear","WebStore","dbName","storeName","db","initDB","indexedDB","open","event","target","onupgradeneeded","result","objectStoreNames","contains","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","transaction","updateTimestamp","then","catch","checkSize","put","timestamp","countRequest","evictOldest","openCursor","cursor","Memoize","store","func","generateTaskKey","cachedResult","applyFunc","hashCode","str","chr","hash","charCodeAt","args","apply","Distribute","localConnection","remoteConnections","clientInfo","sendChannels","pcConstraint","ws","clientId","pendingPromises","pendingTasks","pendingTransfers","awaitingTransfers","lastRequestedTransfers","pendingOutputs","returnDistributedOutput","sendDataResponse","establishConnection","initWebSocket","lastHeartbeat","heartBeatInterval","heartBeatTimeout","WebSocket","onopen","version","logicalCores","sendHeartBeat","handleWebSocketMessage","onclose","handler","handleClientReconnect","updateClientList","handleOffer","handleAnswer","handleCandidate","interval","setInterval","clientListMessage","clients","newClientIds","map","client","createConnection","getData","handleClientDisconnect","close","newClientId","log","targetClient","RTCPeerConnection","iceServers","urls","onicecandidate","e","candidate","ondatachannel","dataChannelCallback","findOrCreateChannel","createOffer","desc","setLocalDescription","offer","onCreateSessionDescriptionError","remoteConnection","setRemoteDescription","RTCSessionDescription","createAnswer","answer","sendChannel","dataConstraint","ordered","maxRetransmits","random","createDataChannel","onSendChannelStateChange","onReceiveMessageCallback","dataChannel","channel","currentTargetClient","storeClientConnectionInfo","connection","addIceCandidate","RTCIceCandidate","onAddIceCandidateError","getDistributedClient","messageId","generateUniqueId","preparedList","distributedSubTask","sendData","sendChannelKeys","warn","minLatency","Infinity","readyState","latency","initializeDistributedTask","filter","currentAwaitingTransfers","requestNextTransfer","runDistributedTask","requestedTransfers","lastRequestedTransfer","find","awaitingTransfer","requestTransferFromList","transferKeys","nextKey","updateTransferStatus","requestDataTransfer","status","handleTransferResponse","transferData","currentRequestedTransfer","responseId","handleTaskResponse","convertFromArrayBuffer","isRequestedTransfer","currentTaskIndex","findIndex","currentTask","measureLatency","startTime","performance","sendPing","handlePing","handlePong","toFixed","taskMessage","responseData","initializeOutputTransfer","initialResponse","handleOutputTransferRequest","pendingOutput","arrayBuffer","getArrayBuffer","sendBlobData","transferredData","ArrayBuffer","isView","originalArray","newArrayBuffer","newTypedArray","_ref","_ref2","blobToArrayBuffer","fetch","response","Response","Error","messageData","handleIncomingMessage","fulfillTransferRequest","handleTaskRequest","processTransferResponse","ping","pong","currentPendingTasks","values","some","pendingPromise","requestOutputTransfer","outputTransferRequest","awaitingTransfersData","transferId","pendingTransferItems","substr","Observable","initialData","arguments","events","on","callback","emit","_len","_key","split","current","setAll","pop","deleteCount","_len2","items","_key2","property","hamstersjs","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","shared","processStartOptions","forceLegacyMode","memoizedFunction","onSuccess","onError"],"sourceRoot":""}