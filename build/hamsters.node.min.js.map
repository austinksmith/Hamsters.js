{"version":3,"file":"hamsters.node.min.js","mappings":"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","sources":["webpack://hamsters/webpack/universalModuleDefinition","webpack://hamsters/./scaffold/legacy.js","webpack://hamsters/./scaffold/regular.js","webpack://hamsters/./scaffold/shared.js","webpack://hamsters/webpack/bootstrap","webpack://hamsters/webpack/runtime/define property getters","webpack://hamsters/webpack/runtime/hasOwnProperty shorthand","webpack://hamsters/./core/habitat.js","webpack://hamsters/./core/pool.js","webpack://hamsters/./core/data.js","webpack://hamsters/./core/task.js","webpack://hamsters/./feature/stores/NodeStore.js","webpack://hamsters/./feature/stores/WebStore.js","webpack://hamsters/./feature/memoize.js","webpack://hamsters/./feature/distribute.js","webpack://hamsters/./feature/observable.js","webpack://hamsters/./hamsters.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hamsters\"] = factory();\n\telse\n\t\troot[\"hamsters\"] = factory();\n})(global, () => {\nreturn ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Legacy {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor(hamsters) {\n      this.hamsters = hamsters;\n      this.scaffold = (params, resolve, reject) => {\n        var rtn = {\n          data: [],\n          dataType: (typeof params.dataType !== \"undefined\" ? params.dataType : null)\n        };\n        if(this.hamsters.habitat.reactNative) {\n          self.rtn = rtn;\n        }\n        if(this.hamsters.habitat.node || this.hamsters.habitat.isIE) {\n          eval(params.hamstersJob);\n        } else {\n          params.hamstersJob();\n        }\n        resolve(rtn.data);\n      }\n    }\n  }\n  \n  export default Legacy;\n  ","class Regular {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n        this.scaffold = function() {\n            self.params = {};\n            self.rtn = {};\n\n            self.onmessage = function (message) {\n                this.params = message.data;\n                this.rtn = {\n                    data: [],\n                    dataType: (typeof this.params.dataType !== 'undefined' ? this.params.dataType : null),\n                    index: this.params.index\n                };\n                if (this.params.sharedBuffer) {\n                    this.params.sharedArray = typedArrayFromBuffer(this.params.dataType, this.params.sharedBuffer);\n                }\n                eval(this.params.hamstersJob);\n                const buffers = handleDataType(this.rtn);\n                returnResponse(this.rtn, buffers);\n            }.bind(this);\n\n            function handleDataType(rtn) {\n                if (this.params.sharedArray) {\n                    // Do nothing here, we don't need to return a buffer rtn.data is useless here\n                } else if (this.params.dataType) {\n                    rtn.data = typedArrayFromBuffer(rtn.dataType, rtn.data);\n                }\n                return getTransferableObjects(rtn); // Return transferable objects\n            }\n\n            function typedArrayFromBuffer(dataType, buffer) {\n                const types = {\n                    'Uint32': Uint32Array,\n                    'Uint16': Uint16Array,\n                    'Uint8': Uint8Array,\n                    'Uint8clamped': Uint8ClampedArray,\n                    'Int32': Int32Array,\n                    'Int16': Int16Array,\n                    'Int8': Int8Array,\n                    'Float32': Float32Array,\n                    'Float64': Float64Array\n                };\n                return types[dataType] ? new types[dataType](buffer) : buffer;\n            }\n\n            function returnResponse(rtn, buffers) {\n                if (buffers && buffers.length > 0) {\n                    postMessage(rtn, buffers);  // PostMessage with transferable objects\n                } else {\n                    postMessage(rtn);  // PostMessage without transferable objects\n                }\n            }\n\n            function getTransferableObjects(obj) {\n                const transferableObjects = new Set();\n                const typedArrayTypes = [\n                    'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array',\n                    'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n                ];\n                const otherTransferables = [\n                    'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n                ];\n\n                const globalContext = typeof self !== 'undefined' ? self : window;\n\n                const allTypes = [...typedArrayTypes, ...otherTransferables];\n\n                for (const prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        for (const type of allTypes) {\n                            if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n                                if (typedArrayTypes.includes(type)) {\n                                    transferableObjects.add(obj[prop].buffer);\n                                } else {\n                                    transferableObjects.add(obj[prop]);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return Array.from(transferableObjects);\n            }\n        }\n    }\n}\n\nexport default Regular;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Shared {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n      this.scaffold = function() {\n        self.params = {};\n        self.rtn = {};\n    \n        addEventListener('connect', (incomingConnection) => {\n          var port = incomingConnection.ports[0];\n          port.start();\n          port.addEventListener('message', (incomingMessage) => {\n            this.params = incomingMessage.data;\n            this.rtn = {\n              data: [],\n              dataType: this.params.dataType\n            };\n            eval(\"(\" + this.params.hamstersJob + \")\")();\n            port.postMessage(this.rtn);\n          }, false);\n        }, false);\n      }\n    }\n  }\n  \n  export default Shared;\n  ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.debug = false;\n    this.importScripts = null;\n    this.relay = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferable = this.supportsTransferableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE = this.isInternetExplorer();\n    this.selectHamsterWheel = this.selectHamsterWheel.bind(this);\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.locateBlobBuilder = this.findAvailableBlobBuilder();\n    this.legacy = this.isLegacyEnvironment();\n    this.Worker = this.locateWorkerObject();\n    this.maxThreads = this.determineGlobalThreads();\n    this.keys = this.getHabitatKeys();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(this.browser && typeof navigator.hardwareConcurrency !== \"undefined\") {\n      max = navigator.hardwareConcurrency;\n      if(this.isFirefox()) {\n        max = (max > 20 ? 20 : max);\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function isFirefox - Detect firefox browser\n  */\n  isFirefox() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return (typeof Worker !== 'undefined' ? Worker : false);\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return (typeof SharedWorker !== 'undefined' ? SharedWorker : false);\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return (typeof window === \"object\");\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.indexOf(\"MSIE \") !== -1 || navigator.userAgent.indexOf(\"Trident/\") !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return (typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser);\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a web worker\n  */\n  isWebWorker() {\n    return (typeof importScripts === \"function\" && !this.isReactNative());\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is React Native\n  */\n  isReactNative() {\n    return (typeof navigator !== \"undefined\" && typeof navigator.product !== \"undefined\" && navigator.product === \"ReactNative\");\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return ((typeof navigator === \"undefined\") && !this.isNode() && !this.isWebWorker() && !this.isReactNative());\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = !!!this.Worker;\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy;\n  }\n\n  /**\n  * @function supportsSharedWorkers - Detects if execution environment supports SharedWorkers\n  */\n  supportsSharedWorkers() {\n    return (typeof SharedWorker !== 'undefined');\n  }\n\n  /**\n  * @function findAvailableBlobBuilder - Attempts to locate a data blob builder, with vendor prefixes\n  */\n  findAvailableBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return 'Environment does not support data blobs!';\n  }\n\n  /**\n  * @function createDataBlob - Creates a new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates a blob URI for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    return URL.createObjectURL(this.createDataBlob(this.generateWorkerString(workerLogic)));\n  }\n\n  generateWorkerString(workerLogic) {\n    return `(${workerLogic.toString()})();`;\n  }\n  /**\n  * @function supportsTransferableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferableObjects() {\n    return (typeof Uint8Array !== 'undefined');\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports SharedArrayBuffers\n  */\n  supportsAtomicOperations() {\n    return (typeof SharedArrayBuffer !== 'undefined');\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports Proxy objects\n  */\n  supportsProxies() {\n    return (typeof Proxy !== 'undefined');\n  }\n\n  /**\n  * @function selectHamsterWheel - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.hamsters.scaffold.custom) {\n      return this.hamsters.scaffold.custom;\n    }\n    if(this.isIE) {\n      return this.hamsters.scaffold.legacy.scaffold;\n    }\n    if(this.reactNative) {\n      return 'reactNativeHamster.js';\n    }\n    if (this.node) {\n      return './node_modules/hamsters.js/build/common/node.js';\n    }\n    return 'data:text/javascript,' + encodeURIComponent(this.generateWorkerString(this.hamsters.scaffold.regular.scaffold));\n  }\n\n  /**\n  * @function getHabitatKeys - Returns keys for this Habitat instance\n  */\n  getHabitatKeys() {\n    return [\n      'worker','sharedworker',\n      'legacy','proxies',\n      'reactnative','atomics',\n      'transferable','browser',\n      'shell','node','debug',\n      'persistence','importscripts',\n      'maxthreads', 'parentport',\n      'webworker', 'relay'\n    ];\n  }\n}\n\nexport default Habitat;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Pool {\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.threads = new hamsters.observable([]);\n    this.running = new hamsters.observable([]);\n    this.pending = new hamsters.observable([]);\n    this.fetchHamster = this.getAvailableThread.bind(this);\n  }\n\n  /**\n  * @function addWorkToPending - Adds task to queue waiting for available thread\n  * @param {number} index - Index of the task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(index, hamsterFood, task, resolve, reject) {\n    if (this.hamsters.habitat.debug) {\n      \n      task.scheduler.metrics.threads[task.scheduler.count].enqueued_at = Date.now();\n    }\n    this.pending.push({\n      index,\n      hamsterFood,  \n      task,\n      resolve,\n      reject\n    });\n  }\n\n  /**\n  * @function processQueuedItem - Invokes processing of next item in queue\n  * @param {object} hamster - The thread to run the task\n  * @param {object} item - Task to process\n  */\n  processQueuedItem(hamster, item) {\n    if (this.hamsters.habitat.debug) {\n      item.task.scheduler.metrics.threads[item.index.id].dequeued_at = Date.now();\n    }\n    return this.runTask(hamster, item.index, item.hamsterFood, item.task, item.resolve, item.reject);\n  }\n\n  /**\n  * @function getAvailableThread - Gets an available thread\n  * @param {number} threadId - Id of the thread\n  * @returns {object} - The available thread\n  */\n  getAvailableThread(threadId) {\n    if (this.hamsters.habitat.persistence) {\n      return this.threads.get(threadId);\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[id].started_at = Date.now();\n    }\n    task.scheduler.workers.push(id);\n    this.running.push(id);\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {number} maxThreads - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    while (maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    const { selectHamsterWheel, Worker } = this.hamsters.habitat;\n    const hamsterWheel = selectHamsterWheel();\n    return new Worker(hamsterWheel);\n  }\n    \n  /**\n   * @function prepareMeal\n   * @description Prepares message to send to a thread and invoke execution\n   * @param {number} index - Index of the subarray to process\n   * @param {number} subTaskId - Subtask ID\n   * @param {object} task - Provided library functionality options for this task\n   * @returns {object} - Prepared message to send to a thread\n   */\n  prepareMeal(index, subTaskId, task) {\n    index.id = subTaskId;\n\n    // Prepare the base hamsterFood object\n    const hamsterFood = {\n      array: task.input.array && task.input.array.length !== 0 ? \n            this.hamsters.data.getSubArrayFromIndex(index, task.input.array) : [],\n      index: index\n    };\n\n    // Add sharedBuffer if it exists\n    if (typeof task.scheduler.sharedBuffer !== 'undefined') {\n      hamsterFood.sharedBuffer = task.scheduler.sharedBuffer;\n    }\n\n    // List of excluded keys\n    const excludedKeys = new Set(['array', 'threads', 'sharedArray']);\n\n    // Iterate over task.input properties and add to hamsterFood\n    for (const key in task.input) {\n      if (task.input.hasOwnProperty(key) && !excludedKeys.has(key)) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n\n    return hamsterFood;\n  }\n\n  /**\n  * @function runDistributedTask - Runs incoming distributed function using thread\n  * @param {object} incomingMessage - The incoming subTask object\n  */\n  runDistributedTask(incomingMessage, targetClient) {\n    const hamster = this.fetchHamster(this.running.length());\n    let task = incomingMessage.task;\n    let index = incomingMessage.hamsterFood.index;\n    let handleResponse = this.hamsters.distribute.returnDistributedOutput;\n    task.targetClient = targetClient;\n    task.messageId = incomingMessage.messageId;\n    task.type = 'task-response';\n    this.runTask(hamster, index, incomingMessage.hamsterFood, incomingMessage.task, handleResponse, handleResponse);\n  }\n\n  /**\n  * @function runTask - Runs function using thread\n  * @param {object} hamster - The thread to run the task\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, index, hamsterFood, task, resolve, reject) {\n    const threadId = this.running.length();\n    this.hamsters.pool.keepTrackOfThread(task, threadId);\n    if (this.hamsters.habitat.legacy) {\n      this.hamsters.scaffold.legacy.scaffold(hamsterFood, resolve, reject);\n    } else {\n      if(this.hamsters.trainer) {\n        this.hamsters.trainer(index, task, threadId, hamster, resolve, reject);\n      } else {\n        this.hamsters.pool.trainHamster(index, task, threadId, hamster, resolve, reject);\n      }\n      this.hamsters.data.feedHamster(hamster, hamsterFood);\n    }\n    task.scheduler.count += 1;\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(index, subTaskId, task, resolve, reject) {\n    const hamsterFood = this.prepareMeal(index, subTaskId, task);\n    if (this.hamsters.habitat.maxThreads <= this.running.length()) {\n      this.addWorkToPending(index, hamsterFood, task, resolve, reject);\n    } else {\n      if(task.input.distribute) {\n        this.hamsters.distribute.distributeTask(task, hamsterFood, resolve, reject);\n      } else {\n        const hamster = this.fetchHamster(this.running.length());\n        this.runTask(hamster, index, hamsterFood, task, resolve, reject);\n      }\n    }\n  }\n\n  processDistributedReturn(data) {\n    debugger;\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - Gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    if(task.scheduler.sharedBuffer) {\n      task.output = hamsters.data.processDataType(task.input.dataType, task.scheduler.sharedBuffer);\n    }\n    if(task.input.aggregate) {\n      task.output = this.hamsters.data.aggregateThreadOutputs(task.output, task.input.dataType);\n    }\n    if(task.input.sort) {\n      task.output = this.hamsters.data.sortOutput(task.output, task.input.sort)\n    }\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.completed_at = Date.now();\n      console.info(\"Hamsters.js Task Completed: \", task);\n    }\n    if(task.input.distribute) {\n      resolve(task);\n    } else {\n      resolve(task.output);\n    }\n  }\n\n  /**\n  * @function removeFromRunning - Removes a thread from the running pool\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Id of the thread to remove\n  */\n  removeFromRunning(task, threadId) {\n    this.running.splice(this.running.indexOf(threadId), 1);\n    task.scheduler.workers.splice(task.scheduler.workers.indexOf(threadId), 1);\n  }\n\n  /**\n   * @function processReturn - Processes the returned message from a thread\n   * @param {number} index - Index of the subarray processed\n   * @param {object} message - Message returned from the thread\n   * @param {object} task - Provided library functionality options for this task\n   */\n  processReturn(index, message, task) {\n    const isReactNative = this.hamsters.habitat.reactNative;\n    const isNode = this.hamsters.habitat.node;\n    const response = message.data;\n    const messageData = isReactNative ? JSON.parse(message).data : (response.data !== undefined ? response.data : response);\n    const threadId = isNode ? message.index.id : response.index.id;\n\n    if (task.scheduler.threads !== 1) {\n      if (isReactNative || task.input.mixedOutput) {\n          task.output[threadId] = messageData;\n      } else {\n        this.hamsters.data.addThreadOutputWithIndex(task, index, messageData);\n      }\n    } else {\n      task.output = messageData;\n    }\n  }\n\n  /**\n  * @function setOnMessage - Sets the message handlers for a thread\n  * @param {object} hamster - The thread to set the handlers on\n  * @param {function} onThreadResponse - Handler for thread response\n  * @param {object} habitat - Habitat configuration\n  * @param {function} reject - onError method\n  */\n  setOnMessage(hamster, onThreadResponse, reject) {\n    if (this.hamsters.habitat.node) {\n      hamster.on('message', onThreadResponse);\n      hamster.on('onmessageerror', reject);\n      hamster.on('error', reject);\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = reject;\n      hamster.onerror = reject;\n    }\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Id of the thread to train\n  * @param {object} hamster - The thread to train\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(index, task, threadId, hamster, resolve, reject) {\n    const onThreadResponse = (message) => {\n      this.hamsters.pool.processReturn(index, message, task);\n      if (this.hamsters.habitat.debug) {\n        task.scheduler.metrics.threads[threadId].completed_at = Date.now();\n      }\n      this.hamsters.pool.removeFromRunning(task, threadId);\n      if (task.scheduler.workers.length === 0 && task.scheduler.count === task.scheduler.threads) {\n        this.hamsters.pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (!this.hamsters.habitat.persistence) {\n        hamster.terminate();\n      }\n      if (this.hamsters.pool.pending.length() !== 0) {\n        const queueHamster = this.hamsters.pool.fetchHamster(this.hamsters.pool.running.length());\n        this.hamsters.pool.processQueuedItem(queueHamster, this.hamsters.pool.pending.shift());\n      }\n    };\n    this.hamsters.pool.setOnMessage(hamster, onThreadResponse, reject);\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  */\n  scheduleTask(task) {\n    let i = 0;\n  \treturn new Promise((resolve, reject) => {\n      if(this.hamsters.debug) {\n        task.scheduler.metrics.started_at = Date.now();\n      }\n      while (i < task.scheduler.threads) {\n        this.hamsterWheel(task.scheduler.indexes[i], i, task, resolve, reject);\n        i += 1;\n      }\n    });\n  }\n}\n\nexport default Pool;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters; // Set the hamsters object as a property of Data class\n    this.getSubArrayFromIndex = this.getSubArrayUsingIndex.bind(this); // Bind getSubArrayUsingIndex function\n    this.getSubArrayIndexes = this.calculateIndexes.bind(this); // Bind calculateIndexes function\n    this.sortOutput = this.sortTaskOutput.bind(this); // Bind sortTaskOutput function\n    this.aggregateThreadOutputs = this.aggregateThreadOutputs.bind(this);\n    this.processDataType = this.typedArrayFromBuffer;\n    this.prepareFunction = this.prepareWorkerTask.bind(this); // Bind prepareWorkerTask function\n    this.feedHamster = this.messageWorkerThread.bind(this); // Bind messageWorkerThread function\n    this.getBufferSize = this.getBufferSize;\n    this.createSharedBuffer = this.createSharedBuffer.bind(this);\n    this.getDataType = this.getDataType;\n    this.setupSharedArrayBuffer = this.setupSharedArrayBuffer.bind(this);\n  }\n\n  /**\n  * @function messageWorkerThread - Prepares message to send to thread\n  * @param {object} hamstersHabitat - Hamsters Habitat instance\n  * @param {Worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorkerThread(hamster, hamsterFood) {\n    if(this.hamsters.habitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    return hamster.postMessage(hamsterFood, this.hamsters.data.getTransferableObjects(hamsterFood));\n  }\n\n  getTransferableObjects(obj) {\n    const typedArrayBuffers = [];\n    const transferableObjects = [];\n    const typedArrayTypes = [\n      'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', \n      'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n    ];\n    const otherTransferables = [\n      'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n    ];\n    const globalContext = typeof window !== 'undefined' ? window : global;\n  \n    for (const prop in obj) {\n      for (const type of typedArrayTypes) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          typedArrayBuffers.push(obj[prop].buffer);\n          break;\n        }\n      }\n  \n      for (const type of otherTransferables) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          transferableObjects.push(obj[prop]);\n          break;\n        }\n      }\n    }\n  \n    return typedArrayBuffers.concat(transferableObjects);\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'Uint32': Uint32Array,\n      'Uint16': Uint16Array,\n      'Uint8': Uint8Array,\n      'Uint8clamped': Uint8ClampedArray,\n      'Int32': Int32Array,\n      'Int16': Int16Array,\n      'Int8': Int8Array,\n      'Float32': Float32Array,\n      'Float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return buffer;\n    }\n    return new types[dataType](buffer);\n  }\n\n  /**\n  * @function prepareWorkerTask - Prepares function for thread, strips whitespace\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareWorkerTask(functionBody) {\n    let functionString = String(functionBody);\n    let isAsync = functionString.trim().startsWith('async');\n    functionBody = functionString.substring(functionString.indexOf(\"{\") + 1, functionString.lastIndexOf(\"}\"));\n    if(isAsync) {\n      return `(async () => {\n        ${functionBody}\n      })();`;\n    }\n    return functionBody;\n  }\n\n  /**\n  * @function sortTaskOutput - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortTaskOutput(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n   * @function getBufferSize - Gets the byte length of the input array\n   * @param {TypedArray} array - The input typed array\n   * @returns {number} - The byte length of the array\n   */\n  getBufferSize(array) {\n    return array.byteLength;\n  }\n\n  /**\n   * @function createSharedBuffer - Creates a SharedArrayBuffer based on the input array's byte length\n   * @param {TypedArray} array - The input typed array\n   * @returns {SharedArrayBuffer} - The created SharedArrayBuffer\n   */\n  createSharedBuffer(array) {\n    const byteLength = this.getBufferSize(array);\n    const sharedBuffer = new SharedArrayBuffer(byteLength);\n    const sharedArray = new array.constructor(sharedBuffer);\n\n    // Copy data from the input array to the shared array\n    sharedArray.set(array);\n\n    return sharedBuffer;\n  }\n\n  /**\n   * @function setupSharedArrayBuffer - Sets up the shared buffer and corresponding typed array\n   * @param {TypedArray} array - The input typed array\n   * @returns {object} - SharedArrayBuffer;\n   */\n  setupSharedArrayBuffer(array) {\n    return this.createSharedBuffer(array);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function addThreadOutputWithIndex - Joins individual thread outputs into single result\n  * @param {object} task - Hamsters task object\n  * @param {object} index - Index information\n  * @param {array} output - Output array\n  */\n  addThreadOutputWithIndex(task, index, output) {\n    let i = 0;\n    const outputLength = output.length;\n    for (i; i < outputLength; i++) {\n      task.output[(index.start + i)] = output[i];\n    }\n  }\n\n  /**\n   * @function calculateIndexes - Splits a single array into multiple equal sized subarrays\n   * @param {array} array - Array to split\n   * @param {number} n - Number of subarrays to create\n   */\n  calculateIndexes(array, n) {\n    // If n is 1, return the whole array range\n    if (n === 1) {\n      return [{ start: 0, end: array.length - 1 }];\n    }\n\n    const indexes = [];\n    const segmentSize = Math.floor(array.length / n);\n    let startIndex = 0;\n\n    for (let i = 0; i < n; i++) {\n      const endIndex = startIndex + segmentSize - 1;\n      indexes.push({ start: startIndex, end: endIndex });\n      startIndex = endIndex + 1;\n    }\n\n    // Adjust the last segment to cover any remaining elements\n    if (startIndex < array.length) {\n      indexes[n - 1].end = array.length - 1;\n    }\n\n    return indexes;\n  }\n\n  prepareDistributedTask(task) {\n    Object.keys(task.input).forEach(key => {\n      if(Array.isArray(task.input[key])) {\n        task.input[key] = null;\n      }\n    });\n    return task;\n  }\n\n  getTransferList(hamsterFood, task) {\n    const transferList = {};\n    task = this.prepareDistributedTask(task);\n    Object.keys(hamsterFood).forEach(item => {\n      if (Array.isArray(hamsterFood[item])) {\n        transferList[item] = hamsterFood[item];\n        hamsterFood[item] = 'Awaiting Transfer';\n      }\n    });\n    return {hamsterFood, transferList, task, transferCount: Object.keys(transferList).length};\n  }\n\n  /**\n  * @function getSubArrayUsingIndex - Slices subarray based on provided index\n  * @param {object} index - Index information\n  * @param {object} inputArray - Hamsters task object\n  */\n  getSubArrayUsingIndex(index, inputArray) {\n    return inputArray.slice(index.start, index.end + 1);\n  }\n}\n\nexport default Data;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Task {\n  /**\n   * @constructor\n   * @param {object} habitat - The environment settings\n   * @param {object} data - Data utility methods\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  constructor(hamsters, params, functionToRun) {\n    'use strict';\n\n    this.input = params;\n    this.output = [];\n    this.scheduler = {\n      count: 0,\n      threads: params.threads || 1,\n      transfers: {\n        request: 0,\n        send: 0\n      },\n      workers: []\n    };\n\n    if (hamsters.habitat.legacy) {\n      this.setupLegacyTask(hamsters, functionToRun);\n    } else {\n      this.setupModernTask(hamsters, params, functionToRun);\n    }\n\n    if (hamsters.habitat.debug) {\n      this.setupDebugMetrics();\n    }\n  }\n\n  /**\n   * @method setupLegacyTask\n   * @description Sets up task for legacy environments\n   * @param {function} functionToRun - Function to execute\n   */\n  setupLegacyTask(hamsters, functionToRun) {\n    this.scheduler.threads = 1;\n    if (!hamsters.habitat.node && !hamsters.habitat.isIE) {\n      this.input.hamstersJob = functionToRun;\n    }\n  }\n\n  /**\n   * @method setupModernTask\n   * @description Sets up task for modern environments\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  setupModernTask(hamsters, params, functionToRun) {\n    this.input.hamstersJob = hamsters.habitat.legacy ? functionToRun : hamsters.data.prepareFunction(functionToRun);\n    if (params.sharedArray && hamsters.habitat.atomics) {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.sharedArray, this.scheduler.threads);\n      this.scheduler.sharedBuffer = hamsters.data.setupSharedArrayBuffer(params.sharedArray);\n      this.input.sharedArray = []; //Reduce ram usage on main thread, do not preserve original array its no longer needed.\n    } else {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.array, this.scheduler.threads);\n    }\n  }\n\n  /**\n   * @method setupDebugMetrics\n   * @description Sets up debug metrics if debug mode is enabled\n   */\n  setupDebugMetrics() {\n    this.scheduler.metrics = {\n      created_at: Date.now(),\n      started_at: null,\n      completed_at: null,\n      threads: this.setupThreadMetrics()\n    };\n  }\n\n  setupThreadMetrics() {\n    let i = 0;\n    let threadMetrics = [];\n    while(i < this.scheduler.threads) {\n      threadMetrics.push({\n        created_at: Date.now(),\n        started_at: null,\n        enqueued_at: null,\n        dequeued_at: null,\n        completed_at: null\n      });\n      i += 1;\n    }\n    return threadMetrics;\n  }\n}\n  \nexport default Task;\n  ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass NodeStore {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.cache = new Map();\n    }\n\n    get(key) {\n        if (this.cache.has(key)) {\n            const value = this.cache.get(key);\n            // Refresh the key\n            this.cache.delete(key);\n            this.cache.set(key, value);\n            return Promise.resolve(value);\n        }\n        return Promise.resolve(null);\n    }\n\n    set(key, value) {\n        if (this.cache.size >= this.maxSize) {\n            // Remove the oldest (least recently used) entry\n            const oldestKey = this.cache.keys().next().value;\n            this.cache.delete(oldestKey);\n        }\n        this.cache.set(key, value);\n        return Promise.resolve();\n    }\n\n    clear() {\n        this.cache.clear();\n        return Promise.resolve();\n    }\n}\n\nexport default NodeStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass WebStore {\n    constructor(dbName, storeName, maxSize) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.maxSize = maxSize;\n        this.db = null;\n        this.initDB();\n    }\n\n    initDB() {\n        const self = this;\n        const request = indexedDB.open(this.dbName, 1);\n\n        request.onerror = function(event) {\n            console.error('Error opening database:', event.target.error);\n        };\n\n        request.onupgradeneeded = function(event) {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains(self.storeName)) {\n                const objectStore = db.createObjectStore(self.storeName, { keyPath: 'key' });\n                objectStore.createIndex('by_key', 'key', { unique: true });\n                objectStore.createIndex('by_timestamp', 'timestamp');\n            }\n        };\n\n        request.onsuccess = function(event) {\n            self.db = event.target.result;\n        };\n    }\n\n    get(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve(null);\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const result = event.target.result;\n                if (result) {\n                    self.updateTimestamp(key).then(() => resolve(result.value)).catch(reject);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    set(key, value) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            self.checkSize().then(() => {\n                const transaction = self.db.transaction([self.storeName], 'readwrite');\n                const objectStore = transaction.objectStore(self.storeName);\n                const request = objectStore.put({ key: key, value: value, timestamp: Date.now() });\n\n                request.onsuccess = function() {\n                    resolve();\n                };\n\n                request.onerror = function(event) {\n                    reject(event.target.error);\n                };\n            }).catch(reject);\n        });\n    }\n\n    clear() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.clear();\n\n            request.onsuccess = function() {\n                resolve();\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    checkSize() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const countRequest = objectStore.count();\n\n            countRequest.onsuccess = function() {\n                const count = countRequest.result;\n                if (count >= self.maxSize) {\n                    self.evictOldest().then(resolve).catch(reject);\n                } else {\n                    resolve();\n                }\n            };\n\n            countRequest.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    evictOldest() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const index = objectStore.index('by_timestamp');\n            const request = index.openCursor(null, 'next');\n\n            request.onsuccess = function(event) {\n                const cursor = event.target.result;\n                if (cursor) {\n                    cursor.delete().onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    updateTimestamp(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const data = event.target.result;\n                if (data) {\n                    data.timestamp = Date.now();\n                    objectStore.put(data).onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n}\n\nexport default WebStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport NodeStore from './stores/NodeStore';\nimport WebStore from './stores/WebStore';\n\nclass Memoize {\n    constructor(hamsters, maxSize) {\n        'use strict';\n\n        this.hamsters = hamsters;\n        this.store = this.hamsters.habitat.node ? new NodeStore(maxSize) : new WebStore('hamstersjs', 'cacheStore', maxSize);\n    }\n\n    memoize(func) {\n        const self = this;\n        return function(task) {\n            const key = self.generateTaskKey(task);\n\n            return new Promise(function(resolve, reject) {\n                self.store.get(key).then(function(cachedResult) {\n                    if (cachedResult !== null) {\n                        resolve(cachedResult);\n                    } else {\n                        self.applyFunc(func, task).then(function(result) {\n                            self.store.set(key, result).then(function() {\n                                resolve(result);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }\n                }).catch(reject);\n            });\n        };\n    }\n\n    generateTaskKey(task) {\n        const key = JSON.stringify({ input: task.input });\n        return this.hashCode(key);\n    }\n\n    hashCode(str) {\n        let hash = 0, i, chr;\n        if (str.length === 0) return hash;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash.toString();\n    }\n\n    applyFunc(func, args) {\n        return new Promise((resolve, reject) => {\n            try {\n                const result = func.apply(null, args);\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n\nexport default Memoize;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Distribute {\n\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.localConnection = null;\n    this.remoteConnections = new hamsters.observable({});\n    this.clientInfo = new hamsters.observable({});\n    this.sendChannels = new hamsters.observable({});\n    this.receiveChannels = new hamsters.observable({});\n    this.pcConstraint = null;\n    this.dataConstraint = null;\n    this.ws = null;\n    this.clientId = null;\n    this.pendingPromises = new hamsters.observable({});\n    this.pendingTasks = new hamsters.observable({});\n    this.pendingTransfers = new hamsters.observable({});\n    this.awaitingTransfers = new hamsters.observable({});\n    this.returnDistributedOutput = this.sendDataResponse.bind(this);\n    this.establishConnection = this.initWebSocket.bind(this);\n    this.lastHeartbeat = {};\n    this.heartBeatInterval = 30 * 1000; //Send heartbeat message every 30 seconds, keep socket connection open\n    this.heartBeatTimeout = {};\n    //Listen for changes to transfers and tasks\n    this.setRealTimeListeners();\n  }\n\n  initWebSocket() {\n    this.ws = new WebSocket(`${this.hamsters.habitat.relay}`);\n\n    this.ws.onopen = () => {\n      console.info(`Hamsters.js ${this.hamsters.version} connection established`);\n      const registerMessage = {\n        type: 'register',\n        logicalCores: this.hamsters.maxThreads\n      };\n      this.ws.send(JSON.stringify(registerMessage));\n      this.sendHeartBeat(this.heartBeatInterval);\n    };\n\n    this.ws.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      switch (message.type) {\n        case 'register':\n          this.handleClientReconnect(message);\n          break;\n        case 'update-client-list':\n          this.updateClientList(message.clients);\n          break;\n        case 'offer':\n          this.handleOffer(message);\n          break;\n        case 'answer':\n          this.handleAnswer(message);\n          break;\n        case 'candidate':\n          this.handleCandidate(message);\n          break;\n        case 'task-response':\n          this.handleTaskResponse(message);\n          break;\n        default:\n          if (this.hamsters.habitat.debug) {\n            console.info(`Hamsters.js ${this.hamsters.version} unknown message type: ${message.type}`);\n          }\n      }\n    };\n\n    this.ws.onerror = (error) => {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} connection error: ${error}`);\n      }\n    };\n\n    this.ws.onclose = () => {\n      if (this.hamsters.habitat.debug) {\n        console.info(`Hamsters.js ${this.hamsters.version} connection closed. Reconnecting...`);\n      }\n      this.establishConnection();\n    };\n  }\n\n  updateClientList(clients) {\n    const newClientIds = new Set(clients.map(client => client.id));\n    clients.forEach(client => {\n        if (client.id !== this.clientId && !this.remoteConnections.get(client.id)) {\n            this.createConnection(client.id);\n        }\n    });\n    const remoteConnections = this.remoteConnections.getData();\n    Object.keys(remoteConnections).forEach((key) => {\n        if (!newClientIds.has(key)) {\n          this.handleClientDisconnect(key);\n        }\n    });\n  }\n\n  handleClientDisconnect(clientId) {\n    if (this.remoteConnections.get(clientId)) {\n      this.remoteConnections.get(clientId).close();\n      this.remoteConnections.delete(clientId);\n    }\n    if (this.sendChannels.get(clientId)) {\n      this.sendChannels.get(clientId).close();\n      this.sendChannels.delete(clientId);\n    }\n    if (this.receiveChannels.get(clientId)) {\n      this.receiveChannels.get(clientId).close();\n      this.receiveChannels.delete(clientId);\n    }\n    this.clientInfo.delete(clientId);\n  };\n\n  handleClientReconnect(message) {\n    const newClientId = message.id;\n\n    if (this.clientId === newClientId) {\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} connection error: `, error);\n      }\n      return;\n    }\n    this.handleClientDisconnect(newClientId);\n    this.clientId = newClientId;\n  }\n\n  sendHeartBeat(interval) {\n    this.heartBeatTimeout = setInterval(() => {\n      this.ws.send(JSON.stringify({\n        type: 'heartbeat'\n      }));\n      this.lastHeartbeat = Date.now();\n    }, interval);\n  }  \n\n  createConnections() {\n    this.remoteConnections.forEach((_, targetClient) => {\n      this.createConnection(targetClient);\n    });\n  }\n\n  createConnection(targetClient) {\n    if (targetClient === this.clientId || this.remoteConnections.get(targetClient)) {\n      return;\n    }\n\n    const servers = {\n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n    };\n\n    const localConnection = new RTCPeerConnection(servers, this.pcConstraint);\n    const sendChannel = localConnection.createDataChannel('hamstersjs', this.dataConstraint);\n\n    localConnection.onicecandidate = (e) => {\n      if (e.candidate) {\n        this.ws.send(JSON.stringify({ \n          type: 'candidate', \n          target: targetClient, \n          from: this.clientId,\n          logicalCores: this.hamsters.maxThreads,\n          userAgent: navigator.userAgent,\n          candidate: e.candidate\n        }));\n      }\n    };\n\n    sendChannel.onopen = () => {\n      this.onSendChannelStateChange(targetClient);\n    };\n\n    sendChannel.onclose = () => {\n      this.onSendChannelStateChange(targetClient);\n    };\n\n    sendChannel.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      switch (message.type) {\n        case 'ping':\n          this.handlePing(targetClient, message.startTime);\n          break;\n        case 'pong':\n          this.handlePong(targetClient, message.startTime);\n          break;\n        default:\n          this.onReceiveMessageCallback(targetClient, event.data);\n      }\n    };\n\n    localConnection.ondatachannel = (event) => {\n      this.receiveChannelCallback(event, targetClient);\n    };\n\n    this.remoteConnections.set(targetClient, localConnection);\n    this.sendChannels.set(targetClient, sendChannel);\n    this.receiveChannels.set(targetClient, null);\n\n    localConnection.createOffer().then(desc => {\n      localConnection.setLocalDescription(desc);\n      this.ws.send(JSON.stringify({ type: 'offer', target: targetClient, offer: desc }));\n    }).catch(this.onCreateSessionDescriptionError);\n  }\n\n  handleOffer(data) {\n    const targetClient = data.from;\n\n    if (!this.remoteConnections.get(targetClient)) {\n      const servers = {\n        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n      };\n\n      const remoteConnection = new RTCPeerConnection(servers, this.pcConstraint);\n\n      remoteConnection.onicecandidate = (e) => {\n        if (e.candidate) {\n          this.ws.send(JSON.stringify({ type: 'candidate', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, candidate: e.candidate }));\n        }\n      };\n\n      remoteConnection.ondatachannel = (event) => {\n        this.receiveChannelCallback(event, targetClient);\n      };\n\n      const sendChannel = remoteConnection.createDataChannel('hamstersjs', this.dataConstraint);\n      \n      sendChannel.onopen = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onclose = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        switch (message.type) {\n          case 'ping':\n            this.handlePing(targetClient, message.startTime);\n            break;\n          case 'pong':\n            this.handlePong(targetClient, message.startTime);\n            break;\n          default:\n            this.onReceiveMessageCallback(targetClient, event.data);\n        }\n      };\n\n      remoteConnection.setRemoteDescription(new RTCSessionDescription(data.offer)).then(() => {\n        return remoteConnection.createAnswer();\n      }).then(desc => {\n        remoteConnection.setLocalDescription(desc);\n        this.ws.send(JSON.stringify({ type: 'answer', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, answer: desc }));\n      }).catch(this.onCreateSessionDescriptionError);\n\n      this.remoteConnections.set(targetClient, remoteConnection);\n      this.sendChannels.set(targetClient, sendChannel);\n    }\n  }\n\n  storeClientConnectionInfo(data) {\n    const client = {\n      logicalCores: data.logicalCores,\n      userAgent: data.userAgent,\n    };\n    this.clientInfo.set(data.from, client);\n  }\n\n  handleAnswer(data) {\n    this.storeClientConnectionInfo(data);\n    const connection = this.remoteConnections.get(data.from);\n    connection.setRemoteDescription(new RTCSessionDescription(data.answer));\n  }\n\n  handleCandidate(data) {\n    let connection = this.remoteConnections.get(data.from) || {};\n    if(!connection) {\n      this.storeClientConnectionInfo(data);\n      connection = this.remoteConnections.get(data.from);\n    }\n    connection.addIceCandidate(new RTCIceCandidate(data.candidate)).catch(this.onAddIceCandidateError);\n  }\n\n\n  measureLatency(targetClient) {\n    const startTime = performance.now();\n    this.sendPing(targetClient, startTime);\n  }\n\n  sendPing(targetClient, startTime) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'ping', startTime }));\n    }\n  }\n\n  handlePing(targetClient, startTime) {\n    const sendChannel = this.receiveChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'pong', startTime }));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent ping to ${targetClient}`);\n      }\n    }\n  }\n\n  handlePong(targetClient, startTime) {\n    const latency = performance.now() - startTime;\n    this.clientInfo.set(targetClient, { ...this.clientInfo.get(targetClient), latency });\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} received pong from ${targetClient} with latency: ${latency.toFixed(2)}ms`);\n    }\n  }\n\n  getDistributedClient() {\n    const sendChannelKeys = Object.keys(this.sendChannels.getData());\n    if (sendChannelKeys.length === 0) {\n      if (this.hamsters.habitat.debug) {\n        console.warn(`Hamsters.js ${this.hamsters.version} no send channels available.`);\n      }\n      return null;\n    }\n\n    let minLatency = Infinity;\n    let targetClient = null;\n\n    sendChannelKeys.forEach(clientId => {\n      const channel = this.sendChannels.get(clientId);\n      const client = this.clientInfo.get(clientId);\n      if (channel.readyState === 'open' && client.latency < minLatency) {\n        minLatency = client.latency;\n        targetClient = clientId;\n      }\n    });\n\n    return targetClient;\n  }\n\n  distributeTask(task, hamsterFood, resolve, reject) {\n    const targetClient = this.getDistributedClient();\n    if (!targetClient) {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} no target client found.`);\n      }\n      reject('No target client found.');\n      return;\n    }\n\n    const messageId = this.generateUniqueId();\n    const preparedList = this.hamsters.data.getTransferList(hamsterFood, task);\n    const distributedSubTask = {\n      hamsterFood: preparedList.hamsterFood,\n      index: hamsterFood.index,\n      task: preparedList.task,\n      messageId: messageId,\n      awaitingTransfers: preparedList.transferCount > 0,\n      type: 'task-request'\n    };\n\n    this.pendingPromises.set(messageId, { resolve, reject });\n    this.pendingTransfers.set(messageId, preparedList.transferList);\n\n    this.sendData({ targetClient, data: distributedSubTask });\n  }\n\n  handleTaskResponse(incomingMessage) {\n    const { messageId, output, error } = incomingMessage;\n    const pendingPromise = this.pendingPromises.get(messageId);\n\n    if (pendingPromise) {\n      if (error) {\n        pendingPromise.reject(error);\n      } else {\n        pendingPromise.resolve(output);\n      }\n\n      this.pendingPromises.delete(messageId);\n    }\n  }\n\n  requestDataTransfer(key, messageId, targetClient) {\n    const message = {\n      type: 'transfer-request',\n      key: key,\n      messageId, messageId\n    };\n    this.awaitingTransfers.set(targetClient, message);\n    this.sendData({targetClient, message});\n  }\n\n  sendData({ targetClient, data }) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify(data));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent data to: `, targetClient);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: `, targetClient);\n      }\n    }\n  }\n\n  sendBlobData({targetClient, data, dataType}) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      if(!data.buffer) {\n        data = this.hamsters.data.processDataType(dataType, data);\n      }\n      sendChannel.send(data.buffer);\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent data to: `, targetClient);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: `, targetClient);\n      }\n    }\n  }\n\n  sendDataResponse(data) {\n    const targetClient = data.targetClient;\n    const sendChannel = this.receiveChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify(data));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent response to: `, targetClient);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: `, targetClient);\n      }\n    }\n  }\n\n  closeDataChannels() {\n    for (const targetClient of this.sendChannels.getData().keys()) {\n      const sendChannel = this.sendChannels.get(targetClient);\n      if (sendChannel) {\n        sendChannel.close();\n        this.sendChannels.delete(targetClient);\n      }\n      const receiveChannel = this.receiveChannels.get(targetClient);\n      if (receiveChannel) {\n        receiveChannel.close();\n        this.receiveChannels.delete(targetClient);\n      }\n      const remoteConnection = this.remoteConnections.get(targetClient);\n      if (remoteConnection) {\n        remoteConnection.close();\n        this.remoteConnections.delete(targetClient);\n      }\n      this.clientInfo.delete(targetClient);\n    }\n    this.localConnection = null;\n  }\n\n  receiveChannelCallback(event, targetClient) {\n    const receiveChannel = event.channel;\n\n    receiveChannel.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      switch (message.type) {\n        case 'ping':\n          this.handlePing(targetClient, message.startTime);\n          break;\n        case 'pong':\n          this.handlePong(targetClient, message.startTime);\n          break;\n        default:\n          this.onReceiveMessageCallback(targetClient, event.data);\n      }\n    };\n\n    receiveChannel.onopen = () => {\n      this.onReceiveChannelStateChange(targetClient);\n    };\n\n    receiveChannel.onclose = () => {\n      this.onReceiveChannelStateChange(targetClient);\n    };\n\n    this.receiveChannels.set(targetClient, receiveChannel);\n  }\n\n  onReceiveMessageCallback(targetClient, data) {\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} received message!`);\n    }\n    let incomingMessage = data;\n    if(typeof data === 'string') {\n      incomingMessage = JSON.parse(data);\n      \n      switch (incomingMessage.type) {\n        case 'transfer-request':\n            this.fulfillTransferRequest(targetClient, incomingMessage);\n          break;\n        case 'task-response':\n          this.handleTaskResponse(incomingMessage);\n          if (this.hamsters.habitat.debug) {\n            console.log(`Hamsters.js ${this.hamsters.version} response received for task: `, incomingMessage);\n          }\n          break;\n        case 'task-request':\n          if(incomingMessage.awaitingTransfers) {\n            this.pendingTasks.set(targetClient, incomingMessage);\n          } else {\n            this.hamsters.pool.runDistributedTask(incomingMessage, targetClient);\n          }\n          break;\n        default:\n          this.processTransferResponse(targetClient, incomingMessage);\n          console.log(`Hamsters.js ${this.hamsters.version} unknown message received from: ${targetClient}`);\n          break;\n      }\n    } else {\n      console.log(\"We have a transfer request response\", data);\n    }\n  }\n\n  processTransferResponse(targetClient, incomingMessage) {\n    const awaitingTransfer = this.awaitingTransfers.get(targetClient);\n    const pendingTask = this.pendingTasks.get(targetClient);\n    const hamsterFood = pendingTask.hamsterFood;\n    const hamsterFoodKeys = Object.keys(hamsterFood);\n    for (const item of hamsterFoodKeys) {\n      if ((awaitingTransfer[item] && awaitingTransfer[item].status === 'Requested') && hamsterFood[item] === 'Awaiting Transfer') {\n        hamsterFood[item] = incomingMessage;\n        break;\n      }\n    }\n    const stillAwaiting = hamsterFoodKeys.filter(key => ['Awaiting Transfer', 'Requested'].indexOf(hamsterFood[key]) !== -1);\n    pendingTask.awaitingTransfers = stillAwaiting.length > 0;\n    this.pendingTasks.set(targetClient, pendingTask);\n    console.log(\"WE HAVE A PENDING TASK WITH A DATA RESPONSE \", pendingTask);\n  }\n  \n\n  fulfillTransferRequest(targetClient, incomingMessage) {\n    const pendingTransferItems = this.pendingTransfers.get(incomingMessage.messageId);\n    const pendingTask = this.pendingTasks.get(targetClient);\n    if(pendingTransferItems) {\n      const pendingTransferItem = pendingTransferItems[incomingMessage.key];\n      if(typeof pendingTransferItem !== 'undefined') {\n        this.sendData({targetClient, data: pendingTransferItem});\n      }\n    }\n    console.log(incomingMessage, \"WE HAVE TRANSFER REQUEST!\", pendingTask);\n  }\n\n  onSendChannelStateChange(targetClient) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    this.measureLatency(targetClient);\n    if (sendChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} send channel state changed for ${targetClient}: ${sendChannel.readyState}`);\n    }\n  }\n\n  onReceiveChannelStateChange(targetClient) {\n    const receiveChannel = this.receiveChannels.get(targetClient);\n    if (receiveChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} receive channel state changed for ${targetClient}: ${receiveChannel.readyState}`);\n    }\n  }\n\n  generateUniqueId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  onCreateSessionDescriptionError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to create session description: ${error}`);\n    }\n  }\n\n  onAddIceCandidateError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to add ICE candidate: ${error}`);\n    }\n  }\n\n  initializeAwaitingTransfersListener() {\n    this.awaitingTransfers.on('change', (awaitingTransfers) => {\n      let updatedAwaitingTransfers = {};\n      Object.keys(awaitingTransfers).forEach((clientId) => {\n        let updatedTransferItems = {};\n        const transferObject = awaitingTransfers[clientId];\n        Object.keys(transferObject).forEach((item) => {\n          const awaitingTransfer = transferObject[item]; // Correct access\n          if (awaitingTransfer.status === 'Pending Request') {\n            const requestTransferMessage = {\n              type: 'transfer-request',\n              key: item,\n              messageId: awaitingTransfer.messageId // Assuming this is defined in the class scope\n            };\n            this.sendData({targetClient: clientId, data: requestTransferMessage}); // Correct the function call\n            awaitingTransfer.status = 'Requested';\n            updatedTransferItems[item] = awaitingTransfer; // Use item as key for updated transfers\n  \n            // Check if pendingTasks and its structure exist before updating\n            if (this.pendingTasks[clientId]) {\n              this.pendingTasks[clientId].task.scheduler.transfers.request += 1;\n            } else {\n              console.error(`Invalid structure for clientId: ${clientId}`);\n            }\n          }\n        });\n        updatedAwaitingTransfers[clientId] = updatedTransferItems;\n      });\n      // Set awaiting transfers with updated information\n      this.awaitingTransfers.setAll(updatedAwaitingTransfers);\n    },  { passive: true });\n  }\n\n  initializePendingTasksListener() {\n    this.pendingTasks.on('change', (pendingTasks) => {\n      let pendingTaskId = 0;\n      let updatedTasks = {};\n      Object.keys(pendingTasks).forEach((targetClient) => {\n        const pendingTask = pendingTasks[targetClient];\n        if (pendingTask.awaitingTransfers) {\n          const pendingTask = pendingTasks[targetClient];\n          let transferStatus = pendingTask.hamsterFood; // Consider renaming for clarity\n          let transfers = {}; // Use an object or array to hold transfers\n    \n          Object.keys(transferStatus).forEach((item) => {\n            if (transferStatus[item] === 'Awaiting Transfer') {\n              transfers[item] = { // Use bracket notation to assign multiple transfers\n                taskId: pendingTaskId,\n                messageId: pendingTask.messageId, // Ensure this is defined\n                status: 'Pending Request'\n              };\n            }\n          });\n    \n          // Add transfers to awaiting transfers for the specific client\n          if (Object.keys(transfers).length > 0) {  \n            this.awaitingTransfers.set(targetClient, transfers); // Save transfers for this client\n          }\n          pendingTaskId += 1;\n        } else { //We are not waiting for data anymore, we can start processing the task\n          this.hamsters.pool.runDistributedTask(pendingTask, targetClient);\n        }\n      });\n    }, { passive: true });\n  }\n\n  setRealTimeListeners() {\n    this.initializeAwaitingTransfersListener();\n    this.initializePendingTasksListener();\n  }  \n}\n\nexport default Distribute;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Observable {\n  constructor(initialData = {}) {\n    this.data = Array.isArray(initialData) ? [...initialData] : { ...initialData };\n    this.events = {};\n  }\n\n  // Allow listeners to register for specific events\n  on(event, callback) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  }\n\n  // Notify listeners about the event\n  emit(event, ...args) {\n    if (this.events[event]) {\n      this.events[event].forEach(callback => callback(...args));\n    }\n  }\n\n  set(key, value) {\n    if (typeof key === 'string') {\n        const keys = key.split('.');\n        let current = this.data;\n        for (let i = 0; i < keys.length - 1; i++) {\n            current = current[keys[i]];\n        }\n        current[keys[keys.length - 1]] = value;\n    } else if (typeof key === 'object') {\n      this.data[key] = value;\n    }\n    this.emit('change', this.data);\n  }\n\n  setAll(data) {\n    this.data = data;\n  }\n\n  get(key) {\n    return this.data[key];\n  }\n\n  push(...items) {\n    this.data.push(...items);\n    this.emit('change', this.data);\n  }\n\n  pop() {\n    const item = this.data.pop();\n    this.emit('change', this.data);\n    return item;\n  }\n\n  shift() {\n    const item = this.data.shift();\n    this.emit('change', this.data);\n    return item;\n  }\n\n  splice(start, deleteCount, ...items) {\n    const result = this.data.splice(start, deleteCount, ...items);\n    this.emit('change', this.data);\n    return result;\n  }\n\n  indexOf(item) {\n    return this.data.indexOf(item);\n  }\n\n  length() {\n    return this.data.length;\n  }\n\n  delete(property) {\n    if (!Array.isArray(this.data)) {\n      delete this.data[property];\n      this.emit('change', this.data);\n    }\n  }\n\n  getData() {\n    return this.data;\n  }\n}\n\nexport default Observable;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n//Core Functionality\nimport Habitat from './core/habitat';\nimport Pool from './core/pool';\nimport Data from './core/data';\nimport Task from './core/task';\n\n//Worker Scaffolds\nimport Legacy from './scaffold/legacy';\nimport Regular from './scaffold/regular';\nimport Shared from './scaffold/shared';\n\n//Features\nimport Memoize from './feature/memoize';\nimport Distribute from './feature/distribute';\nimport Observable from './feature/observable';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.version = '5.6.3';\n    this.run = this.hamstersRun.bind(this);\n    this.promise = this.hamstersPromise.bind(this);\n    this.init = this.initializeLibrary.bind(this);\n    this.data = {};\n    this.pool = {};\n    this.scaffold = {};\n    this.habitat = {};\n    this.memoize = {};\n  }\n\n  /**\n  * @function inititializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    const start = performance.now();\n    this.observable = Observable;\n    this.data = new Data(this);\n    this.pool = new Pool(this);\n    this.scaffold = {\n      legacy: new Legacy(),\n      regular: new Regular(),\n      shared: new Shared()\n    };\n    this.habitat = new Habitat(this);\n    this.memoize = new Memoize(this, 100); //Set a maximum of 100 memoized function results, LRU cache\n    this.distribute = new Distribute(this);\n    this.processStartOptions(startOptions);\n    \n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      this.pool.spawnHamsters(this.habitat.maxThreads);\n    }\n    this.maxThreads = this.habitat.maxThreads;\n\n    if(this.habitat.relay) {\n      console.info(`Hamsters.js ${this.version} establishing connection to relay`);\n      this.distribute.establishConnection();\n    }\n    const end = performance.now();\n    console.info(`Hamsters.js ${this.version} initialized using up to ${this.habitat.maxThreads} threads in ${end - start}ms`);\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      for (const key of Object.keys(startOptions)) {\n        if (this.habitat.keys.includes(key.toLowerCase())) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          if(key === 'scaffold') {\n            this.scaffold.custom = startOptions[key];\n          } else {\n            this[key] = startOptions[key];\n          }\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    let forceLegacyMode = (typeof startOptions !== 'undefined' && typeof startOptions.legacy !== 'undefined');\n    if (forceLegacyMode) {\n      forceLegacyMode = startOptions.legacy;\n    }\n    if (typeof this.habitat.Worker === 'function' && !forceLegacyMode) {\n      this.habitat.legacy = this.habitat.isIE;\n    }\n  }\n\n  /**\n   * @async\n   * @function scheduleTask - Schedules a new function to be processed by the library\n   * @param {object} task - Provided library execution options\n   * @param {function} resolve - Parent function promise resolve method\n   * @param {function} reject - Parent function promise reject method\n   * @return {Promise} Promise object on completion\n   */\n  scheduleTask(task, resolve, reject) {\n    if (task.input.memoize) {\n      // Pass the task object to the memoized function\n      const memoizedFunction = this.memoize.memoize(() => this.pool.scheduleTask(task));\n      return memoizedFunction(task).then(resolve).catch(reject);\n    }\n    return this.pool.scheduleTask(task).then(resolve).catch(reject);\n  }\n\n  /**\n   * @async\n   * @function hamstersPromise - Calls library functionality using async promises\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   * @return {Promise} Promise resolving with results from functionToRun\n   */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      this.scheduleTask(new Task(this, params, functionToRun), resolve, reject);\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    this.scheduleTask(new Task(this, params, functionToRun), onSuccess, onError);\n  }\n}\n\nexport default new hamstersjs();\n"],"names":["root","factory","exports","module","define","amd","global","Legacy","constructor","hamsters","this","scaffold","params","resolve","reject","rtn","data","dataType","habitat","reactNative","self","node","isIE","eval","hamstersJob","Regular","handleDataType","sharedArray","typedArrayFromBuffer","getTransferableObjects","buffer","types","Uint32Array","Uint16Array","Uint8Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","returnResponse","buffers","length","postMessage","obj","transferableObjects","Set","typedArrayTypes","globalContext","window","allTypes","prop","hasOwnProperty","type","includes","add","Array","from","onmessage","message","index","sharedBuffer","bind","Shared","addEventListener","incomingConnection","port","ports","start","incomingMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","prototype","call","Habitat","debug","importScripts","relay","memoize","persistence","browser","isBrowser","webWorker","isWebWorker","isNode","isReactNative","shell","isShell","transferable","supportsTransferableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isInternetExplorer","selectHamsterWheel","sharedWorker","locateSharedWorkerObject","locateBlobBuilder","findAvailableBlobBuilder","legacy","isLegacyEnvironment","Worker","locateWorkerObject","maxThreads","determineGlobalThreads","keys","getHabitatKeys","max","navigator","hardwareConcurrency","isFirefox","os","cpus","userAgent","toLowerCase","indexOf","SharedWorker","process","product","isLegacy","supportsSharedWorkers","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","createDataBlob","textContent","Blob","blob","append","getBlob","generateWorkerBlob","workerLogic","URL","createObjectURL","generateWorkerString","toString","SharedArrayBuffer","Proxy","custom","encodeURIComponent","regular","Pool","threads","observable","running","pending","fetchHamster","getAvailableThread","addWorkToPending","hamsterFood","task","scheduler","metrics","count","enqueued_at","Date","now","push","processQueuedItem","hamster","item","id","dequeued_at","runTask","threadId","spawnHamster","keepTrackOfThread","started_at","workers","spawnHamsters","prepareMeal","subTaskId","array","input","getSubArrayFromIndex","excludedKeys","has","runDistributedTask","targetClient","handleResponse","distribute","returnDistributedOutput","messageId","pool","trainer","trainHamster","feedHamster","hamsterWheel","distributeTask","processDistributedReturn","returnOutputAndRemoveTask","output","processDataType","aggregate","aggregateThreadOutputs","sort","sortOutput","completed_at","console","info","removeFromRunning","splice","processReturn","response","messageData","JSON","parse","mixedOutput","addThreadOutputWithIndex","setOnMessage","onThreadResponse","on","onmessageerror","onerror","terminate","queueHamster","shift","scheduleTask","i","Promise","indexes","Data","getSubArrayUsingIndex","getSubArrayIndexes","calculateIndexes","sortTaskOutput","prepareFunction","prepareWorkerTask","messageWorkerThread","getBufferSize","createSharedBuffer","getDataType","setupSharedArrayBuffer","stringify","typedArrayBuffers","otherTransferables","concat","functionBody","functionString","String","isAsync","trim","startsWith","substring","lastIndexOf","arr","order","a","b","reverse","byteLength","set","reduce","len","bufferLength","offset","outputLength","n","end","segmentSize","Math","floor","startIndex","endIndex","prepareDistributedTask","forEach","isArray","getTransferList","transferList","transferCount","inputArray","slice","Task","functionToRun","transfers","request","send","setupLegacyTask","setupModernTask","setupDebugMetrics","created_at","setupThreadMetrics","threadMetrics","NodeStore","maxSize","cache","Map","value","delete","size","oldestKey","next","clear","WebStore","dbName","storeName","db","initDB","indexedDB","open","event","error","target","onupgradeneeded","result","objectStoreNames","contains","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","transaction","updateTimestamp","then","catch","checkSize","put","timestamp","countRequest","evictOldest","openCursor","cursor","Memoize","store","func","generateTaskKey","cachedResult","applyFunc","hashCode","str","chr","hash","charCodeAt","args","apply","Distribute","localConnection","remoteConnections","clientInfo","sendChannels","receiveChannels","pcConstraint","dataConstraint","ws","clientId","pendingPromises","pendingTasks","pendingTransfers","awaitingTransfers","sendDataResponse","establishConnection","initWebSocket","lastHeartbeat","heartBeatInterval","heartBeatTimeout","setRealTimeListeners","WebSocket","onopen","version","registerMessage","logicalCores","sendHeartBeat","handleClientReconnect","updateClientList","clients","handleOffer","handleAnswer","handleCandidate","handleTaskResponse","onclose","newClientIds","map","client","createConnection","getData","handleClientDisconnect","close","newClientId","log","interval","setInterval","createConnections","_","RTCPeerConnection","iceServers","urls","sendChannel","createDataChannel","onicecandidate","e","candidate","onSendChannelStateChange","handlePing","startTime","handlePong","onReceiveMessageCallback","ondatachannel","receiveChannelCallback","createOffer","desc","setLocalDescription","offer","onCreateSessionDescriptionError","remoteConnection","setRemoteDescription","RTCSessionDescription","createAnswer","answer","storeClientConnectionInfo","connection","addIceCandidate","RTCIceCandidate","onAddIceCandidateError","measureLatency","performance","sendPing","readyState","latency","toFixed","getDistributedClient","sendChannelKeys","warn","minLatency","Infinity","channel","generateUniqueId","preparedList","distributedSubTask","sendData","pendingPromise","requestDataTransfer","_ref","sendBlobData","_ref2","closeDataChannels","receiveChannel","onReceiveChannelStateChange","fulfillTransferRequest","processTransferResponse","awaitingTransfer","pendingTask","hamsterFoodKeys","status","stillAwaiting","filter","pendingTransferItems","pendingTransferItem","random","substr","initializeAwaitingTransfersListener","updatedAwaitingTransfers","updatedTransferItems","transferObject","requestTransferMessage","setAll","passive","initializePendingTasksListener","pendingTaskId","transferStatus","taskId","Observable","initialData","arguments","events","callback","emit","_len","_key","split","current","pop","deleteCount","_len2","items","_key2","property","hamstersjs","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","shared","processStartOptions","forceLegacyMode","memoizedFunction","onSuccess","onError"],"sourceRoot":""}