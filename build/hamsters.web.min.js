!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.hamsters=t():e.hamsters=t()}(this,(()=>(()=>{"use strict";var __webpack_modules__={327:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});class Legacy{constructor(hamsters){this.hamsters=hamsters,this.scaffold=(params,resolve,reject)=>{var rtn={data:[],dataType:void 0!==params.dataType?params.dataType:null};this.hamsters.habitat.reactNative&&(self.rtn=rtn),this.hamsters.habitat.node||this.hamsters.habitat.isIE?eval(params.hamstersJob):params.hamstersJob(),resolve(rtn.data)}}}const __WEBPACK_DEFAULT_EXPORT__=Legacy},386:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});class Regular{constructor(){this.scaffold=function(){function handleDataType(e){return this.params.sharedArray||this.params.dataType&&(e.data=typedArrayFromBuffer(e.dataType,e.data)),getTransferableObjects(e)}function typedArrayFromBuffer(e,t){const s={Uint32:Uint32Array,Uint16:Uint16Array,Uint8:Uint8Array,Uint8clamped:Uint8ClampedArray,Int32:Int32Array,Int16:Int16Array,Int8:Int8Array,Float32:Float32Array,Float64:Float64Array};return s[e]?new s[e](t):t}function returnResponse(e,t){t&&t.length>0?postMessage(e,t):postMessage(e)}function getTransferableObjects(e){const t=new Set,s=["Int32Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Uint32Array","Float32Array","Float64Array"],r="undefined"!=typeof self?self:window,a=[...s,"ArrayBuffer","MessagePort","ImageBitmap","OffscreenCanvas"];for(const n in e)if(e.hasOwnProperty(n))for(const i of a)void 0!==r[i]&&e[n]instanceof r[i]&&(s.includes(i)?t.add(e[n].buffer):t.add(e[n]));return Array.from(t)}self.params={},self.rtn={},self.onmessage=function(message){this.params=message.data,this.rtn={data:[],dataType:void 0!==this.params.dataType?this.params.dataType:null,index:this.params.index},this.params.sharedBuffer&&(this.params.sharedArray=typedArrayFromBuffer(this.params.dataType,this.params.sharedBuffer)),eval(this.params.hamstersJob);const buffers=handleDataType(this.rtn);returnResponse(this.rtn,buffers)}.bind(this)}}}const __WEBPACK_DEFAULT_EXPORT__=Regular},817:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});class Shared{constructor(){this.scaffold=function(){self.params={},self.rtn={},addEventListener("connect",(incomingConnection=>{var port=incomingConnection.ports[0];port.start(),port.addEventListener("message",(incomingMessage=>{this.params=incomingMessage.data,this.rtn={data:[],dataType:this.params.dataType},eval("("+this.params.hamstersJob+")")(),port.postMessage(this.rtn)}),!1)}),!1)}}}const __WEBPACK_DEFAULT_EXPORT__=Shared}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var s=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](s,s.exports,__webpack_require__),s.exports}__webpack_require__.d=(e,t)=>{for(var s in t)__webpack_require__.o(t,s)&&!__webpack_require__.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var __webpack_exports__={};__webpack_require__.d(__webpack_exports__,{default:()=>hamsters_0});class Habitat{constructor(e){this.hamsters=e,this.debug=!1,this.importScripts=null,this.relay=null,this.memoize=!1,this.persistence=!0,this.browser=this.isBrowser(),this.webWorker=this.isWebWorker(),this.node=this.isNode(),this.reactNative=this.isReactNative(),this.shell=this.isShell(),this.transferable=this.supportsTransferableObjects(),this.atomics=this.supportsAtomicOperations(),this.proxies=this.supportsProxies(),this.isIE=this.isInternetExplorer(),this.selectHamsterWheel=this.selectHamsterWheel.bind(this),this.sharedWorker=this.locateSharedWorkerObject(),this.locateBlobBuilder=this.findAvailableBlobBuilder(),this.legacy=this.isLegacyEnvironment(),this.Worker=this.locateWorkerObject(),this.maxThreads=this.determineGlobalThreads(),this.keys=this.getHabitatKeys()}determineGlobalThreads(){let e=4;return this.browser&&void 0!==navigator.hardwareConcurrency&&(e=navigator.hardwareConcurrency,this.isFirefox()&&(e=e>20?20:e)),this.node&&"undefined"!=typeof os&&(e=os.cpus().length),e}isFirefox(){return"undefined"!=typeof navigator&&void 0!==navigator.userAgent&&-1!==navigator.userAgent.toLowerCase().indexOf("firefox")}locateWorkerObject(){return"undefined"!=typeof Worker&&Worker}locateSharedWorkerObject(){return"undefined"!=typeof SharedWorker&&SharedWorker}isBrowser(){return"object"==typeof window}isInternetExplorer(){return"undefined"!=typeof navigator&&void 0!==navigator.userAgent&&(-1!==navigator.userAgent.indexOf("MSIE ")||-1!==navigator.userAgent.indexOf("Trident/"))}isNode(){return"object"==typeof process&&!this.isWebWorker()&&!this.browser}isWebWorker(){return"function"==typeof importScripts&&!this.isReactNative()}isReactNative(){return"undefined"!=typeof navigator&&void 0!==navigator.product&&"ReactNative"===navigator.product}isShell(){return"undefined"==typeof navigator&&!this.isNode()&&!this.isWebWorker()&&!this.isReactNative()}isLegacyEnvironment(){let e=!this.Worker;return this.isWebWorker()&&void 0!==this.SharedWorker&&(e=!this.supportsSharedWorkers()),e}supportsSharedWorkers(){let e=!1;try{let t=this.generateWorkerBlob(this.selectHamsterWheel());new this.SharedWorker(t,"SharedHamsterWheel"),e=!0}catch(t){e=!1}return e}findAvailableBlobBuilder(){return"undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"Environment does not support data blobs!"}createDataBlob(e){if("undefined"==typeof Blob){let t=new(this.locateBlobBuilder());return t.append([e],{type:"application/javascript"}),t.getBlob()}return new Blob([e],{type:"application/javascript"})}generateWorkerBlob(e){return URL.createObjectURL(this.createDataBlob(`(${e.toString()})();`))}supportsTransferableObjects(){return"undefined"!=typeof Uint8Array}supportsAtomicOperations(){return"undefined"!=typeof SharedArrayBuffer}supportsProxies(){return"undefined"!=typeof Proxy}selectHamsterWheel(){return this.isIE?this.hamsters.scaffold.legacy.scaffold:this.reactNative?"reactNativeHamster.js":this.node?"./node_modules/hamsters.js/build/common/node.js":this.generateWorkerBlob(this.hamsters.scaffold.regular.scaffold)}getHabitatKeys(){return["worker","sharedworker","legacy","proxies","reactnative","atomics","transferable","browser","shell","node","debug","persistence","importscripts","maxthreads","parentport","webworker","relay"]}}const habitat=Habitat;class Pool{constructor(e){this.hamsters=e,this.threads=[],this.running=[],this.pending=[],this.fetchHamster=this.getAvailableThread.bind(this)}addWorkToPending(e,t,s,r,a){this.hamsters.habitat.debug&&(s.scheduler.metrics.threads[s.scheduler.count].enqueued_at=Date.now()),this.pending.push({index:e,hamsterFood:t,task:s,resolve:r,reject:a})}processQueuedItem(e,t){return this.hamsters.habitat.debug&&(t.task.scheduler.metrics.threads[t.index.id].dequeued_at=Date.now()),this.runTask(e,t.index,t.hamsterFood,t.task,t.resolve,t.reject)}getAvailableThread(e){return this.hamsters.habitat.persistence?this.threads[e]:this.spawnHamster()}keepTrackOfThread(e,t){this.hamsters.habitat.debug&&(e.scheduler.metrics.threads[t].started_at=Date.now()),e.scheduler.workers.push(t),this.running.push(t)}spawnHamsters(e){for(;e--;)this.threads.push(this.spawnHamster())}spawnHamster(){const{selectHamsterWheel:e,SharedWorker:t,Worker:s}=this.hamsters.habitat,r=e();return this.hamsters.habitat.webWorker?new t(r,"SharedHamsterWheel"):new s(r)}prepareMeal(e,t,s){e.id=t;const r={array:s.input.array&&0!==s.input.array.length?this.hamsters.data.getSubArrayFromIndex(e,s.input.array):[],index:e};void 0!==s.scheduler.sharedBuffer&&(r.sharedBuffer=s.scheduler.sharedBuffer);const a=new Set(["array","threads","sharedArray"]);for(const e in s.input)s.input.hasOwnProperty(e)&&!a.has(e)&&(r[e]=s.input[e]);return r}runDistributedTask(e,t){const s=this.fetchHamster(this.running.length);let r=e.task,a=e.hamsterFood.index,n=this.hamsters.distribute.returnDistributedOutput;r.targetClient=t,r.messageId=e.messageId,r.isReply=!0,this.runTask(s,a,e.hamsterFood,e.task,n,n)}runTask(e,t,s,r,a,n){const i=this.running.length;this.hamsters.pool.keepTrackOfThread(r,i),this.hamsters.habitat.legacy?this.hamsters.scaffold.legacy.scaffold(s,a,n):(this.hamsters.pool.trainHamster(t,r,i,e,a,n),this.hamsters.data.feedHamster(e,s)),r.scheduler.count+=1}hamsterWheel(e,t,s,r,a){const n=this.prepareMeal(e,t,s);if(this.hamsters.habitat.maxThreads<=this.running.length)this.addWorkToPending(e,n,s,r,a);else if(s.input.distribute)this.hamsters.distribute.distributeTask(s,n,r,a);else{const t=this.fetchHamster(this.running.length);this.runTask(t,e,n,s,r,a)}}processDistributedReturn(e){}returnOutputAndRemoveTask(e,t){e.scheduler.sharedBuffer&&(e.output=hamsters.data.processDataType(e.input.dataType,e.scheduler.sharedBuffer)),e.input.aggregate&&(e.output=this.hamsters.data.aggregateThreadOutputs(e.output,e.input.dataType)),e.input.sort&&(e.output=this.hamsters.data.sortOutput(e.output,e.input.sort)),this.hamsters.habitat.debug&&(e.scheduler.metrics.completed_at=Date.now(),console.info("Hamsters.js Task Completed: ",e)),e.input.distribute?t(e):t(e.output)}removeFromRunning(e,t){this.running.splice(this.running.indexOf(t),1),e.scheduler.workers.splice(e.scheduler.workers.indexOf(t),1)}processReturn(e,t,s){const r=this.hamsters.habitat.reactNative,a=this.hamsters.habitat.node,n=t.data,i=r?JSON.parse(t).data:void 0!==n.data?n.data:n,o=a?t.index.id:n.index.id;1!==s.scheduler.threads?r||s.input.mixedOutput?s.output[o]=i:this.hamsters.data.addThreadOutputWithIndex(s,e,i):s.output=i}setOnMessage(e,t,s){this.hamsters.habitat.webWorker?(e.port.onmessage=t,e.port.onmessageerror=s,e.port.onerror=s):this.hamsters.habitat.node?(e.once("message",t),e.once("onmessageerror",s),e.once("error",s)):(e.onmessage=t,e.onmessageerror=s,e.onerror=s)}trainHamster(e,t,s,r,a,n){this.hamsters.pool.setOnMessage(r,(n=>{if(this.hamsters.pool.processReturn(e,n,t),this.hamsters.habitat.debug&&(t.scheduler.metrics.threads[s].completed_at=Date.now()),this.hamsters.pool.removeFromRunning(t,s),0===t.scheduler.workers.length&&t.scheduler.count===t.scheduler.threads&&this.hamsters.pool.returnOutputAndRemoveTask(t,a),this.hamsters.habitat.persistence||r.terminate(),0!==this.hamsters.pool.pending.length){const e=this.hamsters.pool.fetchHamster(this.hamsters.pool.running.length);this.hamsters.pool.processQueuedItem(e,this.hamsters.pool.pending.shift())}}),n)}scheduleTask(e){let t=0;return new Promise(((s,r)=>{for(this.hamsters.debug&&(e.scheduler.metrics.started_at=Date.now());t<e.scheduler.threads;)this.hamsterWheel(e.scheduler.indexes[t],t,e,s,r),t+=1}))}}const pool=Pool;class Data{constructor(e){this.hamsters=e,this.getSubArrayFromIndex=this.getSubArrayUsingIndex.bind(this),this.getSubArrayIndexes=this.calculateIndexes.bind(this),this.sortOutput=this.sortTaskOutput.bind(this),this.aggregateThreadOutputs=this.aggregateThreadOutputs.bind(this),this.processDataType=this.typedArrayFromBuffer,this.prepareFunction=this.prepareWorkerTask.bind(this),this.feedHamster=this.messageWorkerThread.bind(this),this.getBufferSize=this.getBufferSize,this.createSharedBuffer=this.createSharedBuffer.bind(this),this.getDataType=this.getDataType,this.setupSharedArrayBuffer=this.setupSharedArrayBuffer.bind(this)}messageWorkerThread(e,t){return this.hamsters.habitat.reactNative?e.postMessage(JSON.stringify(t)):this.hamsters.habitat.webWorker?e.port.postMessage(t):e.postMessage(t,this.hamsters.data.getTransferableObjects(t))}getTransferableObjects(e){const t=[],s=[],r=["Int32Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Uint32Array","Float32Array","Float64Array"],a=["ArrayBuffer","MessagePort","ImageBitmap","OffscreenCanvas"],n="undefined"!=typeof window?window:__webpack_require__.g;for(const i in e){for(const s of r)if(void 0!==n[s]&&e[i]instanceof n[s]){t.push(e[i].buffer);break}for(const t of a)if(void 0!==n[t]&&e[i]instanceof n[t]){s.push(e[i]);break}}return t.concat(s)}typedArrayFromBuffer(e,t){const s={Uint32:Uint32Array,Uint16:Uint16Array,Uint8:Uint8Array,Uint8clamped:Uint8ClampedArray,Int32:Int32Array,Int16:Int16Array,Int8:Int8Array,Float32:Float32Array,Float64:Float64Array};return s[e]?new s[e](t):t}prepareWorkerTask(e){let t=String(e);return t.substring(t.indexOf("{")+1,t.length-1)}sortTaskOutput(e,t){switch(t){case"desc":case"asc":return Array.prototype.sort.call(e,(function(e,s){return"asc"===t?e-s:s-e}));case"ascAlpha":return e.sort();case"descAlpha":return e.reverse();default:return e}}getBufferSize(e){return e.byteLength}createSharedBuffer(e){const t=this.getBufferSize(e),s=new SharedArrayBuffer(t);return new e.constructor(s).set(e),s}setupSharedArrayBuffer(e){return this.createSharedBuffer(e)}aggregateThreadOutputs(e,t){if(!t)return e.reduce((function(e,t){return e.concat(t)}));let s=0,r=e.length,a=0;for(;s<r;s+=1)a+=e[s].length;let n=this.processDataType(t,a),i=0;for(s=0;s<r;s+=1)n.set(e[s],i),i+=e[s].length;return n}addThreadOutputWithIndex(e,t,s){let r=0;const a=s.length;for(;r<a;r++)e.output[t.start+r]=s[r]}calculateIndexes(e,t){if(1===t)return[{start:0,end:e.length-1}];const s=[],r=Math.floor(e.length/t);let a=0;for(let e=0;e<t;e++){const e=a+r-1;s.push({start:a,end:e}),a=e+1}return a<e.length&&(s[t-1].end=e.length-1),s}getSubArrayUsingIndex(e,t){return t.slice(e.start,e.end+1)}}const data=Data;class Task{constructor(e,t,s){this.input=t,this.output=[],this.scheduler={count:0,threads:t.threads||1,workers:[]},e.habitat.legacy?this.setupLegacyTask(e,s):this.setupModernTask(e,t,s),e.habitat.debug&&this.setupDebugMetrics()}setupLegacyTask(e,t){this.scheduler.threads=1,e.habitat.node||e.habitat.isIE||(this.input.hamstersJob=t)}setupModernTask(e,t,s){this.input.hamstersJob=e.habitat.legacy?s:e.data.prepareFunction(s),t.sharedArray&&e.habitat.atomics?(this.scheduler.indexes=t.indexes||e.data.getSubArrayIndexes(t.sharedArray,this.scheduler.threads),this.scheduler.sharedBuffer=e.data.setupSharedArrayBuffer(t.sharedArray),this.input.sharedArray=[]):this.scheduler.indexes=t.indexes||e.data.getSubArrayIndexes(t.array,this.scheduler.threads)}setupDebugMetrics(){this.scheduler.metrics={created_at:Date.now(),started_at:null,completed_at:null,threads:this.setupThreadMetrics()}}setupThreadMetrics(){let e=0,t=[];for(;e<this.scheduler.threads;)t.push({created_at:Date.now(),started_at:null,enqueued_at:null,dequeued_at:null,completed_at:null}),e+=1;return t}}const task=Task;var legacy=__webpack_require__(327),regular=__webpack_require__(386),shared=__webpack_require__(817);class NodeStore{constructor(e){this.maxSize=e,this.cache=new Map}get(e){if(this.cache.has(e)){const t=this.cache.get(e);return this.cache.delete(e),this.cache.set(e,t),Promise.resolve(t)}return Promise.resolve(null)}set(e,t){if(this.cache.size>=this.maxSize){const e=this.cache.keys().next().value;this.cache.delete(e)}return this.cache.set(e,t),Promise.resolve()}clear(){return this.cache.clear(),Promise.resolve()}}const stores_NodeStore=NodeStore;class WebStore{constructor(e,t,s){this.dbName=e,this.storeName=t,this.maxSize=s,this.db=null,this.initDB()}initDB(){const e=this,t=indexedDB.open(this.dbName,1);t.onerror=function(e){console.error("Error opening database:",e.target.error)},t.onupgradeneeded=function(t){const s=t.target.result;if(!s.objectStoreNames.contains(e.storeName)){const t=s.createObjectStore(e.storeName,{keyPath:"key"});t.createIndex("by_key","key",{unique:!0}),t.createIndex("by_timestamp","timestamp")}},t.onsuccess=function(t){e.db=t.target.result}}get(e){const t=this;return new Promise((function(s,r){if(!t.db)return console.error("Database not initialized"),void s(null);const a=t.db.transaction([t.storeName],"readonly").objectStore(t.storeName).get(e);a.onsuccess=function(a){const n=a.target.result;n?t.updateTimestamp(e).then((()=>s(n.value))).catch(r):s(null)},a.onerror=function(e){r(e.target.error)}}))}set(e,t){const s=this;return new Promise((function(r,a){if(!s.db)return console.error("Database not initialized"),void r();s.checkSize().then((()=>{const n=s.db.transaction([s.storeName],"readwrite").objectStore(s.storeName).put({key:e,value:t,timestamp:Date.now()});n.onsuccess=function(){r()},n.onerror=function(e){a(e.target.error)}})).catch(a)}))}clear(){const e=this;return new Promise((function(t,s){if(!e.db)return console.error("Database not initialized"),void t();const r=e.db.transaction([e.storeName],"readwrite").objectStore(e.storeName).clear();r.onsuccess=function(){t()},r.onerror=function(e){s(e.target.error)}}))}checkSize(){const e=this;return new Promise((function(t,s){const r=e.db.transaction([e.storeName],"readonly").objectStore(e.storeName).count();r.onsuccess=function(){r.result>=e.maxSize?e.evictOldest().then(t).catch(s):t()},r.onerror=function(e){s(e.target.error)}}))}evictOldest(){const e=this;return new Promise((function(t,s){const r=e.db.transaction([e.storeName],"readwrite").objectStore(e.storeName).index("by_timestamp").openCursor(null,"next");r.onsuccess=function(e){const s=e.target.result;s?s.delete().onsuccess=function(){t()}:t()},r.onerror=function(e){s(e.target.error)}}))}updateTimestamp(e){const t=this;return new Promise((function(s,r){const a=t.db.transaction([t.storeName],"readwrite").objectStore(t.storeName),n=a.get(e);n.onsuccess=function(e){const t=e.target.result;t?(t.timestamp=Date.now(),a.put(t).onsuccess=function(){s()}):s()},n.onerror=function(e){r(e.target.error)}}))}}const stores_WebStore=WebStore;class Memoize{constructor(e,t){this.hamsters=e,this.store=this.hamsters.habitat.node?new stores_NodeStore(t):new stores_WebStore("hamstersjs","cacheStore",t)}memoize(e){const t=this;return function(s){const r=t.generateTaskKey(s);return new Promise((function(a,n){t.store.get(r).then((function(i){null!==i?a(i):t.applyFunc(e,s).then((function(e){t.store.set(r,e).then((function(){a(e)})).catch(n)})).catch(n)})).catch(n)}))}}generateTaskKey(e){const t=JSON.stringify({input:e.input});return this.hashCode(t)}hashCode(e){let t,s,r=0;if(0===e.length)return r;for(t=0;t<e.length;t++)s=e.charCodeAt(t),r=(r<<5)-r+s,r|=0;return r.toString()}applyFunc(e,t){return new Promise(((s,r)=>{try{s(e.apply(null,t))}catch(e){r(e)}}))}}const memoize=Memoize;class Distribute{constructor(e){this.hamsters=e,this.localConnection=null,this.remoteConnections={},this.sendChannels={},this.receiveChannels={},this.pcConstraint=null,this.dataConstraint=null,this.ws=null,this.clientId=null,this.pendingPromises={},this.returnDistributedOutput=this.sendDataResponse.bind(this),this.latencies={},this.establishConnection=this.initWebSocket.bind(this)}initWebSocket(){this.ws=new WebSocket(`${this.hamsters.habitat.relay}`),this.ws.onopen=()=>{console.info(`Hamsters.js ${this.hamsters.version} connection established`);const e={type:"register",logicalCores:this.hamsters.maxThreads};this.ws.send(JSON.stringify(e))},this.ws.onmessage=e=>{const t=JSON.parse(e.data);switch(t.type){case"register":this.handleClientReconnect(t);break;case"update-client-list":this.updateClientList(t.clients);break;case"offer":this.handleOffer(t);break;case"answer":this.handleAnswer(t);break;case"candidate":this.handleCandidate(t);break;case"task-response":this.handleTaskResponse(t);break;default:this.hamsters.habitat.debug&&console.info(`Hamsters.js ${this.hamsters.version} unknown message type: ${t.type}`)}},this.ws.onerror=e=>{this.hamsters.habitat.debug&&console.error(`Hamsters.js ${this.hamsters.version} connection error: ${e}`)},this.ws.onclose=()=>{this.hamsters.habitat.debug&&console.info(`Hamsters.js ${this.hamsters.version} connection closed.`)}}updateClientList(e){e.forEach((e=>{e.id===this.clientId||this.remoteConnections[e.id]||this.createConnection(e.id)}))}handleClientReconnect(e){const t=e.id;this.clientId!==t?(this.remoteConnections[t]&&(this.remoteConnections[t].close(),delete this.remoteConnections[t]),this.sendChannels[t]&&(this.sendChannels[t].close(),delete this.sendChannels[t]),this.receiveChannels[t]&&(this.receiveChannels[t].close(),delete this.receiveChannels[t]),delete this.latencies[t],this.clientId=t,this.loadClientList()):this.hamsters.habitat.debug&&console.log(`Hamsters.js ${this.hamsters.version} connection error: `,error)}loadClientList(){fetch(`/clients?currentId=${this.clientId}`).then((e=>e.json())).then((e=>{this.updateClientList(e)})).catch((e=>{this.hamsters.habitat.debug&&console.error(`Hamsters.js ${this.hamsters.version} Error fetching client list: ${e}`)}))}createConnections(){Object.keys(this.remoteConnections).forEach((e=>{this.createConnection(e)}))}createConnection(e){if(e===this.clientId||this.remoteConnections[e])return;const t=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}]},this.pcConstraint),s=t.createDataChannel("hamstersjs",this.dataConstraint);t.onicecandidate=t=>{t.candidate&&this.ws.send(JSON.stringify({type:"candidate",target:e,candidate:t.candidate}))},s.onopen=()=>{this.onSendChannelStateChange(e)},s.onclose=()=>{this.onSendChannelStateChange(e)},s.onmessage=t=>{const s=JSON.parse(t.data);switch(s.type){case"ping":this.handlePing(e,s.startTime);break;case"pong":this.handlePong(e,s.startTime);break;default:this.onReceiveMessageCallback(e,t.data)}},t.ondatachannel=t=>{this.receiveChannelCallback(t,e)},this.remoteConnections[e]=t,this.sendChannels[e]=s,this.receiveChannels[e]=null,t.createOffer().then((s=>{t.setLocalDescription(s),this.ws.send(JSON.stringify({type:"offer",target:e,offer:s}))})).catch(this.onCreateSessionDescriptionError)}handleOffer(e){const t=e.from;if(!this.remoteConnections[t]){const s=new RTCPeerConnection({iceServers:[{urls:"stun:stun.l.google.com:19302"}]},this.pcConstraint);s.onicecandidate=e=>{e.candidate&&this.ws.send(JSON.stringify({type:"candidate",target:t,candidate:e.candidate}))},s.ondatachannel=e=>{this.receiveChannelCallback(e,t)};const r=s.createDataChannel("hamstersjs",this.dataConstraint);r.onopen=()=>{this.onSendChannelStateChange(t)},r.onclose=()=>{this.onSendChannelStateChange(t)},r.onmessage=e=>{const s=JSON.parse(e.data);switch(s.type){case"ping":this.handlePing(t,s.startTime);break;case"pong":this.handlePong(t,s.startTime);break;default:this.onReceiveMessageCallback(t,e.data)}},s.setRemoteDescription(new RTCSessionDescription(e.offer)).then((()=>s.createAnswer())).then((e=>{s.setLocalDescription(e),this.ws.send(JSON.stringify({type:"answer",target:t,answer:e}))})).catch(this.onCreateSessionDescriptionError),this.remoteConnections[t]=s,this.sendChannels[t]=r}}handleAnswer(e){this.remoteConnections[e.from].setRemoteDescription(new RTCSessionDescription(e.answer))}handleCandidate(e){this.remoteConnections[e.from].addIceCandidate(new RTCIceCandidate(e.candidate)).catch(this.onAddIceCandidateError)}measureLatency(e){const t=performance.now();this.sendPing(e,t)}sendPing(e,t){const s=this.sendChannels[e];s&&"open"===s.readyState&&s.send(JSON.stringify({type:"ping",startTime:t}))}handlePing(e,t){console.log("Remote Connections ",this.remoteConnections);const s=this.receiveChannels[e];s&&"open"===s.readyState&&(s.send(JSON.stringify({type:"pong",startTime:t})),this.hamsters.habitat.debug&&console.log(`Hamsters.js ${this.hamsters.version} sent ping to ${e}`))}handlePong(e,t){const s=performance.now()-t;this.latencies[e]=s,this.hamsters.habitat.debug&&console.log(`Hamsters.js ${this.hamsters.version} received pong from ${e} with latency: ${s.toFixed(2)}ms`)}fetchDistributedClient(){const e=Object.keys(this.sendChannels);if(0===e.length)return this.hamsters.habitat.debug&&console.warn(`Hamsters.js ${this.hamsters.version} no send channels available.`),null;let t=1/0,s=null;return e.forEach((e=>{"open"===this.sendChannels[e].readyState&&this.latencies[e]<t&&(t=this.latencies[e],s=e)})),s}distributeTask(e,t,s,r){const a=this.fetchDistributedClient();if(!a)return this.hamsters.habitat.debug&&console.error(`Hamsters.js ${this.hamsters.version} no target client found.`),void r("No target client found.");const n=this.generateUniqueId(),i={hamsterFood:t,index:t.index,task:e,messageId:n};this.pendingPromises[n]={resolve:s,reject:r},this.sendData({targetClient:a,data:i})}handleTaskResponse(e){const{messageId:t,output:s,error:r}=e,a=this.pendingPromises[t];a&&(r?a.reject(r):a.resolve(s),delete this.pendingPromises[t])}sendData(e){let{targetClient:t,data:s}=e;const r=this.sendChannels[t];r&&"open"===r.readyState?(r.send(JSON.stringify(s)),this.hamsters.habitat.debug&&console.log(`Hamsters.js ${this.hamsters.version} sent data to: `,t)):this.hamsters.habitat.debug&&console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: `,t)}sendDataResponse(e){const t=e.targetClient,s=this.receiveChannels[t];s&&"open"===s.readyState?(s.send(JSON.stringify(e)),this.hamsters.habitat.debug&&console.log(`Hamsters.js ${this.hamsters.version} sent response to: `,t)):this.hamsters.habitat.debug&&console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: `,t)}closeDataChannels(){for(const e in this.sendChannels)this.sendChannels[e]&&(this.sendChannels[e].close(),delete this.sendChannels[e]),this.receiveChannels[e]&&(this.receiveChannels[e].close(),delete this.receiveChannels[e]),this.remoteConnections[e]&&(this.remoteConnections[e].close(),delete this.remoteConnections[e]),delete this.latencies[e];this.localConnection=null}receiveChannelCallback(e,t){const s=e.channel;s.onmessage=e=>{const s=JSON.parse(e.data);switch(s.type){case"ping":this.handlePing(t,s.startTime);break;case"pong":this.handlePong(t,s.startTime);break;default:this.onReceiveMessageCallback(t,e.data)}},s.onopen=()=>{this.onReceiveChannelStateChange(t)},s.onclose=()=>{this.onReceiveChannelStateChange(t)},this.receiveChannels[t]=s}onReceiveMessageCallback(e,t){this.hamsters.habitat.debug&&console.log(`Hamsters.js ${this.hamsters.version} received message!`);const s=JSON.parse(t);s.isReply?(this.handleTaskResponse(s),this.hamsters.habitat.debug&&console.log(`Hamsters.js ${this.hamsters.version} response received for task: `,s)):this.hamsters.pool.runDistributedTask(s,e)}onSendChannelStateChange(e){const t=this.sendChannels[e];this.measureLatency(e),t&&this.hamsters.habitat.debug&&console.log(`Hamsters.js ${this.hamsters.version} send channel state changed for ${e}: ${t.readyState}`)}onReceiveChannelStateChange(e){const t=this.receiveChannels[e];t&&this.hamsters.habitat.debug&&console.log(`Hamsters.js ${this.hamsters.version} receive channel state changed for ${e}: ${t.readyState}`)}generateUniqueId(){return Date.now().toString(36)+Math.random().toString(36).substr(2)}onCreateSessionDescriptionError(e){this.hamsters.habitat.debug&&console.error(`Hamsters.js ${this.hamsters.version} failed to create session description: ${e}`)}onAddIceCandidateError(e){this.hamsters.habitat.debug&&console.error(`Hamsters.js ${this.hamsters.version} failed to add ICE candidate: ${e}`)}}const distribute=Distribute;class hamstersjs{constructor(){this.version="5.6.0",this.run=this.hamstersRun.bind(this),this.promise=this.hamstersPromise.bind(this),this.init=this.initializeLibrary.bind(this),this.data={},this.pool={},this.scaffold={},this.habitat={},this.memoize={}}initializeLibrary(e){this.data=new data(this),this.pool=new pool(this),this.scaffold={legacy:new legacy.A,regular:new regular.A,shared:new shared.A},this.habitat=new habitat(this),this.memoize=new memoize(this,100),this.distribute=new distribute(this),this.processStartOptions(e),this.habitat.legacy||!0!==this.habitat.persistence||this.pool.spawnHamsters(this.habitat.maxThreads),this.maxThreads=this.habitat.maxThreads,this.habitat.relay&&(console.info(`Hamsters.js ${this.version} establishing connection to relay`),this.distribute.establishConnection()),console.info(`Hamsters.js ${this.version} initialized using up to ${this.habitat.maxThreads} threads`)}processStartOptions(e){if(void 0!==e)for(const t of Object.keys(e))this.habitat.keys.includes(t.toLowerCase())?this.habitat[t]=e[t]:this[t]=e[t];let t=void 0!==e&&void 0!==e.legacy;t&&(t=e.legacy),"function"!=typeof this.habitat.Worker||t||(this.habitat.legacy=this.habitat.isIE)}scheduleTask(e,t,s){return e.input.memoize?this.memoize.memoize((()=>this.pool.scheduleTask(e)))(e).then(t).catch(s):this.pool.scheduleTask(e).then(t).catch(s)}hamstersPromise(e,t){return new Promise(((s,r)=>{this.scheduleTask(new task(this,e,t),s,r)}))}hamstersRun(e,t,s,r){this.scheduleTask(new task(this,e,t),s,r)}}const hamsters_0=new hamstersjs;return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));
//# sourceMappingURL=hamsters.web.min.js.map