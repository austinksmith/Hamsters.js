{"version":3,"file":"hamsters.web.min.js","mappings":"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","sources":["webpack://hamsters/webpack/universalModuleDefinition","webpack://hamsters/webpack/bootstrap","webpack://hamsters/./scaffold/legacy.js","webpack://hamsters/./scaffold/shared.js","webpack://hamsters/webpack/runtime/define property getters","webpack://hamsters/webpack/runtime/global","webpack://hamsters/webpack/runtime/hasOwnProperty shorthand","webpack://hamsters/./core/habitat.js","webpack://hamsters/./core/pool.js","webpack://hamsters/./core/data.js","webpack://hamsters/./core/task.js","webpack://hamsters/./scaffold/regular.js","webpack://hamsters/./feature/stores/NodeStore.js","webpack://hamsters/./feature/stores/WebStore.js","webpack://hamsters/./feature/memoize.js","webpack://hamsters/./feature/distribute.js","webpack://hamsters/./feature/observable.js","webpack://hamsters/./hamsters.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hamsters\"] = factory();\n\telse\n\t\troot[\"hamsters\"] = factory();\n})(this, () => {\nreturn ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Legacy {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor(hamsters) {\n      this.hamsters = hamsters;\n      this.scaffold = (params, resolve, reject) => {\n        var rtn = {\n          data: [],\n          dataType: (typeof params.dataType !== \"undefined\" ? params.dataType : null)\n        };\n        if(this.hamsters.habitat.reactNative) {\n          self.rtn = rtn;\n        }\n        if(this.hamsters.habitat.node || this.hamsters.habitat.isIE) {\n          eval(params.hamstersJob);\n        } else {\n          params.hamstersJob();\n        }\n        resolve(rtn.data);\n      }\n    }\n  }\n  \n  export default Legacy;\n  ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Shared {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n      this.scaffold = function() {\n        self.params = {};\n        self.rtn = {};\n    \n        addEventListener('connect', (incomingConnection) => {\n          var port = incomingConnection.ports[0];\n          port.start();\n          port.addEventListener('message', (incomingMessage) => {\n            this.params = incomingMessage.data;\n            this.rtn = {\n              data: [],\n              dataType: this.params.dataType\n            };\n            eval(\"(\" + this.params.hamstersJob + \")\")();\n            port.postMessage(this.rtn);\n          }, false);\n        }, false);\n      }\n    }\n  }\n  \n  export default Shared;\n  ","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.debug = false;\n    this.importScripts = null;\n    this.relay = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferable = this.supportsTransferableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE = this.isInternetExplorer();\n    this.selectHamsterWheel = this.selectHamsterWheel.bind(this);\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.locateBlobBuilder = this.findAvailableBlobBuilder();\n    this.legacy = this.isLegacyEnvironment();\n    this.Worker = this.locateWorkerObject();\n    this.maxThreads = this.determineGlobalThreads();\n    this.keys = this.getHabitatKeys();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(this.browser && typeof navigator.hardwareConcurrency !== \"undefined\") {\n      max = navigator.hardwareConcurrency;\n      if(this.isFirefox()) {\n        max = (max > 20 ? 20 : max);\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function isFirefox - Detect firefox browser\n  */\n  isFirefox() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return (typeof Worker !== 'undefined' ? Worker : false);\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return (typeof SharedWorker !== 'undefined' ? SharedWorker : false);\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return (typeof window === \"object\");\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.indexOf(\"MSIE \") !== -1 || navigator.userAgent.indexOf(\"Trident/\") !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return (typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser);\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a web worker\n  */\n  isWebWorker() {\n    return (typeof importScripts === \"function\" && !this.isReactNative());\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is React Native\n  */\n  isReactNative() {\n    return (typeof navigator !== \"undefined\" && typeof navigator.product !== \"undefined\" && navigator.product === \"ReactNative\");\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return ((typeof navigator === \"undefined\") && !this.isNode() && !this.isWebWorker() && !this.isReactNative());\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = !!!this.Worker;\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy;\n  }\n\n  /**\n  * @function supportsSharedWorkers - Detects if execution environment supports SharedWorkers\n  */\n  supportsSharedWorkers() {\n    return (typeof SharedWorker !== 'undefined');\n  }\n\n  /**\n  * @function findAvailableBlobBuilder - Attempts to locate a data blob builder, with vendor prefixes\n  */\n  findAvailableBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return 'Environment does not support data blobs!';\n  }\n\n  /**\n  * @function createDataBlob - Creates a new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates a blob URI for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    return URL.createObjectURL(this.createDataBlob(this.generateWorkerString(workerLogic)));\n  }\n\n  generateWorkerString(workerLogic) {\n    return `(${workerLogic.toString()})();`;\n  }\n  /**\n  * @function supportsTransferableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferableObjects() {\n    return (typeof Uint8Array !== 'undefined');\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports SharedArrayBuffers\n  */\n  supportsAtomicOperations() {\n    return (typeof SharedArrayBuffer !== 'undefined');\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports Proxy objects\n  */\n  supportsProxies() {\n    return (typeof Proxy !== 'undefined');\n  }\n\n  /**\n  * @function selectHamsterWheel - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.hamsters.scaffold.custom) {\n      return this.hamsters.scaffold.custom;\n    }\n    if(this.isIE) {\n      return this.hamsters.scaffold.legacy.scaffold;\n    }\n    if(this.reactNative) {\n      return 'reactNativeHamster.js';\n    }\n    if (this.node) {\n      return './node_modules/hamsters.js/build/common/node.js';\n    }\n    return 'data:text/javascript,' + encodeURIComponent(this.generateWorkerString(this.hamsters.scaffold.regular.scaffold));\n  }\n\n  /**\n  * @function getHabitatKeys - Returns keys for this Habitat instance\n  */\n  getHabitatKeys() {\n    return [\n      'worker','sharedworker',\n      'legacy','proxies',\n      'reactnative','atomics',\n      'transferable','browser',\n      'shell','node','debug',\n      'persistence','importscripts',\n      'maxthreads', 'parentport',\n      'webworker', 'relay'\n    ];\n  }\n}\n\nexport default Habitat;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Pool {\n\t\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.threads = new hamsters.observable([]);\n    this.running = new hamsters.observable([]);\n    this.pending = new hamsters.observable([]);\n    this.fetchHamster = this.getAvailableThread;\n  }\n\n  /**\n  * @function fetchHamster - Adds task to queue waiting for available thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(index, task, resolve, reject) {\n    if(this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[task.scheduler.count].enqueued_at = Date.now();\n    }\n    this.pending.push({\n      index: index,\n      count: task.scheduler.count,  \n      task: task,\n      resolve: resolve,\n      reject: reject\n    });\n  }\n\n  /**\n  * @function processQueuedItem - Invokes processing of next item in queue\n  * @param {object} item - Task to process\n  */\n  processQueuedItem(hamster, item) {\n    if(this.hamsters.habitat.debug) {\n      item.task.scheduler.metrics.threads[item.count].dequeued_at = Date.now();\n    }\n  \treturn this.runTask(hamster, item.index, item.task, item.resolve, item.reject);\n  }\n\n  /**\n  * @function getAvailableThread- Keeps track of threads running, scoped globally and to task\n  * @param {number} threadId - Id of thread\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  */\n  getAvailableThread(threadId) {\n    if(this.hamsters.habitat.persistence) {\n      return this.threads.get(threadId);\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    // if(this.hamsters.habitat.debug) {\n    //   task.scheduler.metrics.threads[id].started_at = Date.now();\n    // }\n    task.scheduler.workers.push(id); //Keep track of threads scoped to current task\n    this.running.push(id); //Keep track of all currently running threads\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {number} maxThreds - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    for (maxThreads; maxThreads > 0; maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    const { selectHamsterWheel, Worker } = this.hamsters.habitat;\n    const hamsterWheel = selectHamsterWheel();\n    return new Worker(hamsterWheel);\n  }\n\n  /**\n   * @function prepareMeal\n   * @description Prepares message to send to a thread and invoke execution\n   * @param {number} index - Index of the subarray to process\n   * @param {number} subTaskId - Subtask ID\n   * @param {object} task - Provided library functionality options for this task\n   * @returns {object} - Prepared message to send to a thread\n   */\n  prepareMeal(index, task) {\n    // Prepare the base hamsterFood object\n    const hamsterFood = {\n      array: task.input.array && task.input.array.length !== 0 ? \n            this.hamsters.data.getSubArrayFromIndex(index, task.input.array) : [],\n      index: index\n    };\n\n    // Add sharedBuffer if it exists\n    if (typeof task.scheduler.sharedBuffer !== 'undefined') {\n      hamsterFood.sharedBuffer = task.scheduler.sharedBuffer;\n    }\n\n    // List of excluded keys\n    const excludedKeys = new Set(['array', 'threads', 'sharedArray']);\n\n    // Iterate over task.input properties and add to hamsterFood\n    for (const key in task.input) {\n      if (task.input.hasOwnProperty(key) && !excludedKeys.has(key)) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n\n    return hamsterFood;\n  }\n\n  /**\n  * @function hamsterWheel - Runs function using thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, index, task, resolve, reject) {\n  \tlet threadId = this.running.length();\n    index.id = threadId;\n    let hamsterFood = this.prepareMeal(index, task);\n    this.keepTrackOfThread(task, threadId);\n    if(this.hamsters.habitat.legacy) {\n      this.hamsters.habitat.legacyWheel(this.hamsters.habitat, hamsterFood, resolve, reject);\n    } else {\n      this.hamsters.pool.trainHamster(index, task, threadId, hamster, resolve, reject);\n      this.hamsters.data.feedHamster(hamster, hamsterFood);\n    }\n    task.scheduler.count += 1;\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {object} array - Provided library functionality options for this task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(index, task, resolve, reject) {\n    if(this.hamsters.habitat.maxThreads <= this.running.length()) {\n      return this.addWorkToPending(index, task, resolve, reject);\n    }\n    let hamster = this.fetchHamster(this.running.length());\n    return this.runTask(hamster, index, task, resolve, reject);\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - Gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    if(task.scheduler.sharedBuffer) {\n      task.output = this.hamsters.data.processDataType(task.input.dataType, task.scheduler.sharedBuffer);\n    }\n    if(task.input.aggregate) {\n      task.output = this.hamsters.data.aggregateThreadOutputs(task.output, task.input.dataType);\n    }\n    if(task.input.sort) {\n      task.output = this.hamsters.data.sortOutput(task.output, task.input.sort)\n    }\n    if (this.hamsters.habitat.debug) {\n      const completedAt = Date.now();\n      const startedAt = task.scheduler.metrics.started_at;\n      task.scheduler.metrics.completed_at = completedAt;\n      console.info(`Hamsters.js Task Completed In ${completedAt - startedAt}ms`);\n    }\n    if(task.input.distribute) {\n      resolve(task);\n    } else {\n      resolve(task.output);\n    }\n  }\n\n  removeFromRunning(task, threadId) {\n    this.running.splice(this.running.indexOf(threadId), 1); //Remove thread from running pool\n    task.scheduler.workers.splice(task.scheduler.workers.indexOf(threadId), 1); //Remove thread from task running pool\n  }\n\n  processReturn(habitat, index, message, task) {\n    let output = message.data;\n    if(habitat.reactNative) {\n      output = JSON.parse(message).data;\n    } else if(typeof message.data.data !== \"undefined\") {\n      output = message.data.data;\n    }\n    if(task.scheduler.threads !== 1) {\n      this.hamsters.data.addThreadOutputWithIndex(task, index, output);\n    } else {\n      task.output = output;\n    }\n  }\n\n  setOnMessage(hamster, onThreadResponse, habitat, reject) {\n    if (habitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onmessageerror = reject;\n      hamster.port.onerror = reject;\n    }\n    if(habitat.node) {\n      hamster.once('message', onThreadResponse);\n      hamster.once('onmessageerror', reject);\n      hamster.once('error', reject);\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = reject;\n      hamster.error = reject;\n    }\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {worker} hamster - Thread to train\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(index, task, threadId, hamster, resolve, reject) {\n    let onThreadResponse = (message) => {\n      this.hamsters.pool.processReturn(this.hamsters.habitat, index, message, task);\n      // if(this.hamsters.habitat.debug) {\n      //   task.scheduler.metrics.threads[threadId].completed_at = Date.now();\n      // }\n      this.hamsters.pool.removeFromRunning(task, threadId);\n      if (task.scheduler.workers.length === 0 && task.scheduler.count === task.scheduler.threads) {\n        this.hamsters.pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (this.hamsters.pool.pending.length() !== 0) {\n        return this.hamsters.pool.processQueuedItem(hamster, this.hamsters.pool.pending.shift());\n      }\n      if(!this.hamsters.habitat.persistence) {\n        return hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n      }\n    };\n    this.hamsters.pool.setOnMessage(hamster, onThreadResponse, this.hamsters.habitat, reject);\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Scaffold to execute login within\n  * @param {number} maxThreads - Maximum number of threads for this client\n  */\n  scheduleTask(task, resolve, reject) {\n    // if(this.hamsters.habitat.debug) {\n    //   let metrics = task.scheduler.metrics;\n    //   metrics.started_at = Date.now();\n    //   return new Promise((resolve, reject) => {\n    //     while (i < task.scheduler.threads) {\n    //       metrics.threads.push({\n    //         created_at: Date.now(),\n    //         started_at: null,\n    //         enqueued_at: null,\n    //         dequeued_at: null,\n    //         completed_at: null\n    //       });\n    //       this.hamsterWheel(task.scheduler.indexes[i], task, resolve, reject);\n    //       i += 1;\n    //     }\n    //   });\n    // }\n    //Process with debug mode disabled, no need for time stamping\n  \t// return new Promise((resolve, reject) => {\n      if(task.input.distribute && task.type !== 'task-response') {\n        this.hamsters.distribute.distributeTask(task, resolve, reject);\n      } else {\n        let i = 0;\n        while (i < task.scheduler.threads) {\n          this.hamsterWheel(task.scheduler.indexes[i], task, resolve, reject);\n          i += 1;\n        }\n      }\n    // });\n  }\n}\n\nexport default Pool;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters; // Set the hamsters object as a property of Data class\n    this.getSubArrayFromIndex = this.getSubArrayUsingIndex.bind(this); // Bind getSubArrayUsingIndex function\n    this.getSubArrayIndexes = this.calculateIndexes.bind(this); // Bind calculateIndexes function\n    this.sortOutput = this.sortTaskOutput.bind(this); // Bind sortTaskOutput function\n    this.aggregateThreadOutputs = this.aggregateThreadOutputs.bind(this);\n    this.processDataType = this.typedArrayFromBuffer;\n    this.prepareFunction = this.prepareWorkerTask.bind(this); // Bind prepareWorkerTask function\n    this.feedHamster = this.messageWorkerThread.bind(this); // Bind messageWorkerThread function\n    this.getBufferSize = this.getBufferSize;\n    this.createSharedBuffer = this.createSharedBuffer.bind(this);\n    this.getDataType = this.getDataType;\n    this.setupSharedArrayBuffer = this.setupSharedArrayBuffer.bind(this);\n  }\n\n  /**\n  * @function messageWorkerThread - Prepares message to send to thread\n  * @param {object} hamstersHabitat - Hamsters Habitat instance\n  * @param {Worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorkerThread(hamster, hamsterFood) {\n    if(this.hamsters.habitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    return hamster.postMessage(hamsterFood, this.hamsters.data.getTransferableObjects(hamsterFood));\n  }\n\n  getTransferableObjects(obj) {\n    const typedArrayBuffers = [];\n    const transferableObjects = [];\n    const typedArrayTypes = [\n      'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', \n      'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n    ];\n    const otherTransferables = [\n      'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n    ];\n    const globalContext = typeof window !== 'undefined' ? window : global;\n  \n    for (const prop in obj) {\n      for (const type of typedArrayTypes) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          typedArrayBuffers.push(obj[prop].buffer);\n          break;\n        }\n      }\n  \n      for (const type of otherTransferables) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          transferableObjects.push(obj[prop]);\n          break;\n        }\n      }\n    }\n  \n    return typedArrayBuffers.concat(transferableObjects);\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'Uint32': Uint32Array,\n      'Uint16': Uint16Array,\n      'Uint8': Uint8Array,\n      'Uint8clamped': Uint8ClampedArray,\n      'Int32': Int32Array,\n      'Int16': Int16Array,\n      'Int8': Int8Array,\n      'Float32': Float32Array,\n      'Float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return buffer;\n    }\n    return new types[dataType](buffer);\n  }\n\n  /**\n  * @function prepareWorkerTask - Prepares function for thread, strips whitespace\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareWorkerTask(functionBody) {\n    let functionString = String(functionBody);\n    let isAsync = functionString.trim().startsWith('async');\n    functionBody = functionString.substring(functionString.indexOf(\"{\") + 1, functionString.lastIndexOf(\"}\"));\n    if(isAsync) {\n      return `(async () => {\n        ${functionBody}\n      })();`;\n    }\n    return functionBody;\n  }\n\n  /**\n  * @function sortTaskOutput - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortTaskOutput(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n   * @function getBufferSize - Gets the byte length of the input array\n   * @param {TypedArray} array - The input typed array\n   * @returns {number} - The byte length of the array\n   */\n  getBufferSize(array) {\n    return array.byteLength;\n  }\n\n  /**\n   * @function createSharedBuffer - Creates a SharedArrayBuffer based on the input array's byte length\n   * @param {TypedArray} array - The input typed array\n   * @returns {SharedArrayBuffer} - The created SharedArrayBuffer\n   */\n  createSharedBuffer(array) {\n    const byteLength = this.getBufferSize(array);\n    const sharedBuffer = new SharedArrayBuffer(byteLength);\n    const sharedArray = new array.constructor(sharedBuffer);\n\n    // Copy data from the input array to the shared array\n    sharedArray.set(array);\n\n    return sharedBuffer;\n  }\n\n  /**\n   * @function setupSharedArrayBuffer - Sets up the shared buffer and corresponding typed array\n   * @param {TypedArray} array - The input typed array\n   * @returns {object} - SharedArrayBuffer;\n   */\n  setupSharedArrayBuffer(array) {\n    return this.createSharedBuffer(array);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function addThreadOutputWithIndex - Joins individual thread outputs into single result\n  * @param {object} task - Hamsters task object\n  * @param {object} index - Index information\n  * @param {array} output - Output array\n  */\n  addThreadOutputWithIndex(task, index, output) {\n    let i = 0;\n    const outputLength = output.length;\n    for (i; i < outputLength; i++) {\n      task.output[(index.start + i)] = output[i];\n    }\n  }\n\n  /**\n   * @function calculateIndexes - Splits a single array into multiple equal sized subarrays\n   * @param {array} array - Array to split\n   * @param {number} n - Number of subarrays to create\n   */\n  calculateIndexes(array, n) {\n    // If n is 1, return the whole array range\n    if (n === 1) {\n      return [{ start: 0, end: array.length - 1 }];\n    }\n\n    const indexes = [];\n    const segmentSize = Math.floor(array.length / n);\n    let startIndex = 0;\n\n    for (let i = 0; i < n; i++) {\n      const endIndex = startIndex + segmentSize - 1;\n      indexes.push({ start: startIndex, end: endIndex });\n      startIndex = endIndex + 1;\n    }\n\n    // Adjust the last segment to cover any remaining elements\n    if (startIndex < array.length) {\n      indexes[n - 1].end = array.length - 1;\n    }\n\n    return indexes;\n  }\n\n  getTransferList(task) {\n    const transferList = {};\n    const hamsterFood = task.input;\n    Object.keys(hamsterFood).forEach(item => {\n      if (Array.isArray(hamsterFood[item])) {\n        transferList[item] = hamsterFood[item];\n        task.input[item] = null;\n        hamsterFood[item] = 'Awaiting Transfer';\n      }\n    });\n    return {hamsterFood, transferList, task, transferCount: Object.keys(transferList).length};\n  }\n\n  /**\n  * @function getSubArrayUsingIndex - Slices subarray based on provided index\n  * @param {object} index - Index information\n  * @param {object} inputArray - Hamsters task object\n  */\n  getSubArrayUsingIndex(index, inputArray) {\n    return inputArray.slice(index.start, index.end + 1);\n  }\n}\n\nexport default Data;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Task {\n  /**\n   * @constructor\n   * @param {object} habitat - The environment settings\n   * @param {object} data - Data utility methods\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  constructor(hamsters, params, functionToRun) {\n    'use strict';\n\n    this.input = params;\n    this.type = 'task-local';\n    this.output = [];\n    this.scheduler = {\n      count: 0,\n      threads: params.threads || 1,\n      transfers: {\n        request: 0,\n        send: 0\n      },\n      workers: []\n    };\n\n    if (hamsters.habitat.legacy) {\n      this.setupLegacyTask(hamsters, functionToRun);\n    } else {\n      this.setupModernTask(hamsters, params, functionToRun);\n    }\n\n    if (hamsters.habitat.debug || params.distribute) {\n      this.setupDebugMetrics();\n    }\n  }\n\n  /**\n   * @method setupLegacyTask\n   * @description Sets up task for legacy environments\n   * @param {function} functionToRun - Function to execute\n   */\n  setupLegacyTask(hamsters, functionToRun) {\n    this.scheduler.threads = 1;\n    if (!hamsters.habitat.node && !hamsters.habitat.isIE) {\n      this.input.hamstersJob = functionToRun;\n    }\n  }\n\n  /**\n   * @method setupModernTask\n   * @description Sets up task for modern environments\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  setupModernTask(hamsters, params, functionToRun) {\n    this.input.hamstersJob = hamsters.habitat.legacy ? functionToRun : hamsters.data.prepareFunction(functionToRun);\n    if (params.sharedArray && hamsters.habitat.atomics) {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.sharedArray, this.scheduler.threads);\n      this.scheduler.sharedBuffer = hamsters.data.setupSharedArrayBuffer(params.sharedArray);\n      this.input.sharedArray = []; //Reduce ram usage on main thread, do not preserve original array its no longer needed.\n    } else {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.array, this.scheduler.threads);\n    }\n  }\n\n  /**\n   * @method setupDebugMetrics\n   * @description Sets up debug metrics if debug mode is enabled\n   */\n  setupDebugMetrics() {\n    this.scheduler.metrics = {\n      created_at: Date.now(),\n      started_at: Date.now(),\n      completed_at: null,\n      threads: this.setupThreadMetrics()\n    };\n  }\n\n  setupThreadMetrics() {\n    let i = 0;\n    let threadMetrics = [];\n    while(i < this.scheduler.threads) {\n      threadMetrics.push({\n        created_at: Date.now(),\n        started_at: null,\n        enqueued_at: null,\n        dequeued_at: null,\n        completed_at: null\n      });\n      i += 1;\n    }\n    return threadMetrics;\n  }\n}\n  \nexport default Task;\n  ","class Regular {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n        this.scaffold = function() {\n            self.params = {};\n            self.rtn = {};\n\n            self.onmessage = function (message) {\n                this.params = message.data;\n                this.rtn = {\n                    data: [],\n                    dataType: (typeof this.params.dataType !== 'undefined' ? this.params.dataType : null),\n                    index: this.params.index\n                };\n                if (this.params.sharedBuffer) {\n                    this.params.sharedArray = typedArrayFromBuffer(this.params.dataType, this.params.sharedBuffer);\n                }\n                try {\n                  new Function(this.params.hamstersJob)();\n                  const buffers = handleDataType(this.rtn);\n                  returnResponse(this.rtn, buffers);\n                } catch(e) {\n                  returnResponse([{error: e.message}]);\n                }\n            }.bind(this);\n\n            function handleDataType(rtn) {\n                if (this.params.sharedArray) {\n                    // Do nothing here, we don't need to return a buffer rtn.data is useless here\n                } else if (this.params.dataType) {\n                    rtn.data = typedArrayFromBuffer(rtn.dataType, rtn.data);\n                }\n                return getTransferableObjects(rtn); // Return transferable objects\n            }\n\n            function typedArrayFromBuffer(dataType, buffer) {\n                const types = {\n                    'Uint32': Uint32Array,\n                    'Uint16': Uint16Array,\n                    'Uint8': Uint8Array,\n                    'Uint8clamped': Uint8ClampedArray,\n                    'Int32': Int32Array,\n                    'Int16': Int16Array,\n                    'Int8': Int8Array,\n                    'Float32': Float32Array,\n                    'Float64': Float64Array\n                };\n                return types[dataType] ? new types[dataType](buffer) : buffer;\n            }\n\n            function returnResponse(rtn, buffers) {\n                if (buffers && buffers.length > 0) {\n                    postMessage(rtn, buffers);  // PostMessage with transferable objects\n                } else {\n                    postMessage(rtn);  // PostMessage without transferable objects\n                }\n            }\n\n            function getTransferableObjects(obj) {\n                const transferableObjects = new Set();\n                const typedArrayTypes = [\n                    'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array',\n                    'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n                ];\n                const otherTransferables = [\n                    'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n                ];\n\n                const globalContext = typeof self !== 'undefined' ? self : window;\n\n                const allTypes = [...typedArrayTypes, ...otherTransferables];\n\n                for (const prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        for (const type of allTypes) {\n                            if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n                                if (typedArrayTypes.includes(type)) {\n                                    transferableObjects.add(obj[prop].buffer);\n                                } else {\n                                    transferableObjects.add(obj[prop]);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return Array.from(transferableObjects);\n            }\n        }\n    }\n}\n\nexport default Regular;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass NodeStore {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.cache = new Map();\n    }\n\n    get(key) {\n        if (this.cache.has(key)) {\n            const value = this.cache.get(key);\n            // Refresh the key\n            this.cache.delete(key);\n            this.cache.set(key, value);\n            return Promise.resolve(value);\n        }\n        return Promise.resolve(null);\n    }\n\n    set(key, value) {\n        if (this.cache.size >= this.maxSize) {\n            // Remove the oldest (least recently used) entry\n            const oldestKey = this.cache.keys().next().value;\n            this.cache.delete(oldestKey);\n        }\n        this.cache.set(key, value);\n        return Promise.resolve();\n    }\n\n    clear() {\n        this.cache.clear();\n        return Promise.resolve();\n    }\n}\n\nexport default NodeStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass WebStore {\n    constructor(dbName, storeName, maxSize) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.maxSize = maxSize;\n        this.db = null;\n        this.initDB();\n    }\n\n    initDB() {\n        const self = this;\n        const request = indexedDB.open(this.dbName, 1);\n\n        request.onerror = function(event) {\n            console.error('Error opening database:', event.target.error);\n        };\n\n        request.onupgradeneeded = function(event) {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains(self.storeName)) {\n                const objectStore = db.createObjectStore(self.storeName, { keyPath: 'key' });\n                objectStore.createIndex('by_key', 'key', { unique: true });\n                objectStore.createIndex('by_timestamp', 'timestamp');\n            }\n        };\n\n        request.onsuccess = function(event) {\n            self.db = event.target.result;\n        };\n    }\n\n    get(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve(null);\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const result = event.target.result;\n                if (result) {\n                    self.updateTimestamp(key).then(() => resolve(result.value)).catch(reject);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    set(key, value) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            self.checkSize().then(() => {\n                const transaction = self.db.transaction([self.storeName], 'readwrite');\n                const objectStore = transaction.objectStore(self.storeName);\n                const request = objectStore.put({ key: key, value: value, timestamp: Date.now() });\n\n                request.onsuccess = function() {\n                    resolve();\n                };\n\n                request.onerror = function(event) {\n                    reject(event.target.error);\n                };\n            }).catch(reject);\n        });\n    }\n\n    clear() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.clear();\n\n            request.onsuccess = function() {\n                resolve();\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    checkSize() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const countRequest = objectStore.count();\n\n            countRequest.onsuccess = function() {\n                const count = countRequest.result;\n                if (count >= self.maxSize) {\n                    self.evictOldest().then(resolve).catch(reject);\n                } else {\n                    resolve();\n                }\n            };\n\n            countRequest.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    evictOldest() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const index = objectStore.index('by_timestamp');\n            const request = index.openCursor(null, 'next');\n\n            request.onsuccess = function(event) {\n                const cursor = event.target.result;\n                if (cursor) {\n                    cursor.delete().onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    updateTimestamp(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const data = event.target.result;\n                if (data) {\n                    data.timestamp = Date.now();\n                    objectStore.put(data).onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n}\n\nexport default WebStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport NodeStore from './stores/NodeStore';\nimport WebStore from './stores/WebStore';\n\nclass Memoize {\n    constructor(hamsters, maxSize) {\n        'use strict';\n\n        this.hamsters = hamsters;\n        this.store = this.hamsters.habitat.node ? new NodeStore(maxSize) : new WebStore('hamstersjs', 'cacheStore', maxSize);\n    }\n\n    memoize(func) {\n        const self = this;\n        return function(task) {\n            const key = self.generateTaskKey(task);\n\n            return new Promise(function(resolve, reject) {\n                self.store.get(key).then(function(cachedResult) {\n                    if (cachedResult !== null) {\n                        resolve(cachedResult);\n                    } else {\n                        self.applyFunc(func, task).then(function(result) {\n                            self.store.set(key, result).then(function() {\n                                resolve(result);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }\n                }).catch(reject);\n            });\n        };\n    }\n\n    generateTaskKey(task) {\n        const key = JSON.stringify({ input: task.input });\n        return this.hashCode(key);\n    }\n\n    hashCode(str) {\n        let hash = 0, i, chr;\n        if (str.length === 0) return hash;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash.toString();\n    }\n\n    applyFunc(func, args) {\n        return new Promise((resolve, reject) => {\n            try {\n                const result = func.apply(null, args);\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n\nexport default Memoize;","class Distribute {\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.localConnection = null;\n    this.remoteConnections = new hamsters.observable({});\n    this.clientInfo = new hamsters.observable({});\n    this.sendChannels = new hamsters.observable({});\n    this.pcConstraint = null;\n    this.ws = null;\n    this.clientId = null;\n    this.pendingPromises = new Map(); // targetClient -> Map(messageId -> promiseDetails)\n    this.pendingTasks = new hamsters.observable({});\n    this.pendingTransfers = new hamsters.observable({});\n    this.awaitingTransfers = new hamsters.observable({});\n    this.lastRequestedTransfers = new hamsters.observable({});\n    this.pendingOutputs = new hamsters.observable({});\n    this.returnDistributedOutput = this.sendDataResponse.bind(this);\n    this.establishConnection = this.initWebSocket.bind(this);\n    this.lastHeartbeat = {};\n    this.heartBeatInterval = 30 * 1000; //Send heartbeat message every 30 seconds\n    this.deletedPromises = [];\n    this.heartBeatTimeout = {};\n    this.messageCounter = 0;\n    this.generatedMessageIds = [];\n    this.promiseTimeoutDuration = 60000; // 60 seconds timeout\n  }\n\n  initWebSocket() {\n    this.ws = new WebSocket(`${this.hamsters.habitat.relay}`);\n\n    this.ws.onopen = () => {\n      console.info(`Hamsters.js ${this.hamsters.version} connection established`);\n      this.ws.send(JSON.stringify({\n        type: 'register',\n        logicalCores: this.hamsters.maxThreads\n      }));\n      this.sendHeartBeat(this.heartBeatInterval);\n      this.startPromiseCleanupInterval(this.promiseTimeoutDuration);\n    };\n\n    this.ws.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      this.handleWebSocketMessage(message);\n    };\n\n    this.ws.onerror = (error) => {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} connection error:`, error);\n      }\n    };\n\n    this.ws.onclose = () => {\n      if (this.hamsters.habitat.debug) {\n        console.info(`Hamsters.js ${this.hamsters.version} connection closed. Reconnecting...`);\n      }\n      this.establishConnection();\n    };\n  }\n\n  handleWebSocketMessage(message) {\n    const handlers = {\n      'register': this.handleClientReconnect.bind(this),\n      'update-client-list': this.updateClientList.bind(this),\n      'offer': this.handleOffer.bind(this),\n      'answer': this.handleAnswer.bind(this),\n      'candidate': this.handleCandidate.bind(this)\n    };\n\n    const handler = handlers[message.type];\n    if (handler) {\n      handler(message);\n    } else if (this.hamsters.habitat.debug) {\n      console.info(`Hamsters.js ${this.hamsters.version} unknown message type: ${message.type}`);\n    }\n  }\n\n  sendHeartBeat(interval) {\n    this.heartBeatTimeout = setInterval(() => {\n      this.ws.send(JSON.stringify({\n        type: 'heartbeat'\n      }));\n      this.lastHeartbeat = Date.now();\n    }, interval);\n  }\n\n  updateClientList(clientListMessage) {\n    const clients = clientListMessage.clients;\n    const newClientIds = new Set(clients.map(client => client.id));\n    clients.forEach(client => {\n      if (client.id !== this.clientId && !this.remoteConnections.get(client.id)) {\n        this.createConnection(client.id);\n      }\n    });\n    const remoteConnections = this.remoteConnections.getData();\n    Object.keys(remoteConnections).forEach((key) => {\n      if (!newClientIds.has(key)) {\n        this.handleClientDisconnect(key);\n      }\n    });\n  }\n\n  handleClientDisconnect(clientId) {\n    if (this.remoteConnections.get(clientId)) {\n      this.remoteConnections.get(clientId).close();\n      this.remoteConnections.delete(clientId, 'peer');\n    }\n    if (this.sendChannels.get(clientId)) {\n      this.sendChannels.get(clientId).close();\n      this.sendChannels.delete(clientId, 'channel');\n    }\n    this.clientInfo.delete(clientId);\n  }\n\n  handleClientReconnect(message) {\n    const newClientId = message.id;\n\n    if (this.clientId === newClientId) {\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} reconnected with same ID`);\n      }\n      return;\n    }\n    this.handleClientDisconnect(newClientId);\n    this.clientId = newClientId;\n  }\n\n  createConnection(targetClient) {\n    if (targetClient === this.clientId || this.remoteConnections.get(targetClient)) {\n      return;\n    }\n\n    const servers = {\n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n    };\n\n    const localConnection = new RTCPeerConnection(servers, this.pcConstraint);\n\n    localConnection.onicecandidate = (e) => {\n      if (e.candidate) {\n        this.ws.send(JSON.stringify({ \n          type: 'candidate', \n          target: targetClient, \n          from: this.clientId,\n          logicalCores: this.hamsters.maxThreads,\n          userAgent: navigator.userAgent,\n          candidate: e.candidate\n        }));\n      }\n    };\n\n    localConnection.ondatachannel = (event) => {\n      this.dataChannelCallback(event, targetClient);\n    };\n\n    this.findOrCreateChannel(targetClient, localConnection);\n\n    this.remoteConnections.set(targetClient, localConnection);\n    localConnection.createOffer().then(desc => {\n      localConnection.setLocalDescription(desc);\n      this.ws.send(JSON.stringify({ type: 'offer', target: targetClient, offer: desc }));\n    }).catch(this.onCreateSessionDescriptionError.bind(this));\n  }\n\n  handleOffer(data) {\n    const targetClient = data.from;\n    console.log('WE HAVE A OFFER ', data);\n    if (!this.remoteConnections.get(targetClient)) {\n      const servers = {\n        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n      };\n\n      const remoteConnection = new RTCPeerConnection(servers, this.pcConstraint);\n\n      remoteConnection.onicecandidate = (e) => {\n        if (e.candidate) {\n          this.ws.send(JSON.stringify({ type: 'candidate', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, candidate: e.candidate }));\n        }\n      };\n\n      remoteConnection.ondatachannel = (event) => {\n        this.dataChannelCallback(event, targetClient);\n      };\n\n      remoteConnection.setRemoteDescription(new RTCSessionDescription(data.offer)).then(() => {\n        return remoteConnection.createAnswer();\n      }).then(desc => {\n        this.ws.send(JSON.stringify({ type: 'answer', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, answer: desc }));\n        return remoteConnection.setLocalDescription(desc);\n      }).catch(this.onCreateSessionDescriptionError.bind(this));\n\n      this.remoteConnections.set(targetClient, remoteConnection, 'peer');\n      this.findOrCreateChannel(targetClient, remoteConnection);\n    }\n  }\n\n  findOrCreateChannel(targetClient, remoteConnection) {\n    let sendChannel = this.sendChannels.get(targetClient);\n    if(!sendChannel) {\n      const dataConstraint = {\n        ordered: true,\n        maxRetransmits: 3,\n        id: Math.floor(Math.random() * 65536)\n      };\n      sendChannel = remoteConnection.createDataChannel('hamstersjs', dataConstraint);\n      \n      sendChannel.onopen = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onclose = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onmessage = (event) => {\n        this.onReceiveMessageCallback(targetClient, event.data);\n      };\n\n      this.sendChannels.set(targetClient, sendChannel, 'channel');\n    }\n    return sendChannel\n  }\n  \n  dataChannelCallback(event, targetClient) {\n    const dataChannel = event.channel;\n    const currentTargetClient = targetClient;\n\n    dataChannel.onmessage = (event) => {\n      this.onReceiveMessageCallback(currentTargetClient, event.data);\n    };\n\n    this.sendChannels.set(currentTargetClient, dataChannel);\n  }\n\n  storeClientConnectionInfo(data) {\n    const client = {\n      logicalCores: data.logicalCores,\n      userAgent: data.userAgent,\n    };\n    this.clientInfo.set(data.from, client);\n  }\n\n  handleAnswer(data) {\n    this.storeClientConnectionInfo(data);\n    const connection = this.remoteConnections.get(data.from);\n    connection.setRemoteDescription(new RTCSessionDescription(data.answer));\n    this.remoteConnections.set(data.from, connection);\n  }\n\n  handleCandidate(data) {\n    let connection = this.remoteConnections.get(data.from);\n    if(!connection) {\n      this.storeClientConnectionInfo(data);\n      connection = this.remoteConnections.get(data.from);\n    }\n    connection.addIceCandidate(new RTCIceCandidate(data.candidate)).catch(this.onAddIceCandidateError.bind(this));\n    this.remoteConnections.set(data.from, connection);\n  }\n\n  distributeTask(task, resolve, reject) {\n    const targetClient = task.input.client || this.getDistributedClient();\n    if (!targetClient) {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} no target client found.`);\n      }\n      reject('No target client found.');\n      return;\n    }\n  \n    const messageId = this.generateUniqueId();\n    const preparedList = this.hamsters.data.getTransferList(task);\n    const distributedSubTask = {\n      hamsterFood: preparedList.hamsterFood,\n      task: preparedList.task,\n      messageId: messageId,\n      type: 'task-request'\n    };\n  \n    if (!this.pendingPromises.has(targetClient)) {\n      this.pendingPromises.set(targetClient, new Map());\n    }\n    this.pendingPromises.get(targetClient).set(messageId, { resolve, reject, state: 'pending' });\n    \n    if (preparedList.transferCount > 0) {\n      this.pendingTransfers.set(messageId, preparedList.transferList);\n    }\n    this.sendData({ targetClient, data: distributedSubTask });\n  }\n\n  getDistributedClient() {\n    const sendChannelKeys = Object.keys(this.sendChannels.getData());\n    if (sendChannelKeys.length === 0) {\n      if (this.hamsters.habitat.debug) {\n        console.warn(`Hamsters.js ${this.hamsters.version} no send channels available.`);\n      }\n      return null;\n    }\n\n    let minLatency = Infinity;\n    let targetClient = null;\n\n    sendChannelKeys.forEach(clientId => {\n      const channel = this.sendChannels.get(clientId);\n      const client = this.clientInfo.get(clientId);\n      if (channel.readyState === 'open' && client && client.latency < minLatency) {\n        minLatency = client.latency;\n        targetClient = clientId;\n      }\n    });\n\n    return targetClient;\n  }\n\n  initializeDistributedTask(targetClient, task, messageId) {\n    const transferList = Object.keys(task.hamsterFood)\n    .filter(key => task.hamsterFood[key] === 'Awaiting Transfer')\n    .reduce((transfers, key) => {\n      transfers[key] = 'Awaiting Transfer';\n      return transfers;\n    }, {});\n  \n\n    if (Object.keys(transferList).length > 0) {\n      let currentAwaitingTransfers = this.awaitingTransfers.get(targetClient);\n      if(!currentAwaitingTransfers) {\n        currentAwaitingTransfers = [];\n      }\n      currentAwaitingTransfers.push({\n        messageId: messageId,\n        transferList: transferList\n      });\n      this.awaitingTransfers.set(targetClient, currentAwaitingTransfers);\n      this.requestNextTransfer(targetClient, messageId);\n    } else {\n      this.runDistributedTask(task, targetClient);\n    }\n  }\n\n  requestNextTransfer(targetClient, messageId) {\n    const requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n    let lastRequestedTransfer = null;\n    if(requestedTransfers) {\n      lastRequestedTransfer = requestedTransfers.find(item => item.messageId === messageId);\n      if (lastRequestedTransfer) {\n        console.info(\"We already requested this transfer for this task\");\n        return;\n      }\n    }\n    const currentAwaitingTransfers = this.awaitingTransfers.get(targetClient);\n    if (currentAwaitingTransfers) {\n      const awaitingTransfer = currentAwaitingTransfers.find(item => item.messageId === messageId);\n      if (awaitingTransfer) {\n        this.requestTransferFromList(awaitingTransfer, messageId, targetClient);\n      }\n    }\n  }\n  \n  requestTransferFromList(awaitingTransfer, messageId, targetClient) {\n    const transferKeys = Object.keys(awaitingTransfer.transferList);\n    if (transferKeys.length > 0) {\n      const nextKey = transferKeys.find(key => awaitingTransfer.transferList[key] === 'Awaiting Transfer');\n      if (nextKey) {\n        this.updateTransferStatus(targetClient, messageId, nextKey, 'Requested Transfer');\n        this.requestDataTransfer(nextKey, messageId, targetClient);\n      }\n    }\n  }\n  \n  updateTransferStatus(targetClient, messageId, key, status) {\n    // Get the current awaitingTransfers array for the target client\n    const currentAwaitingTransfers = this.awaitingTransfers.get(targetClient);\n    \n    if (!currentAwaitingTransfers) {\n      console.error(`Hamsters.js ${this.hamsters.version} no awaiting transfers found for ${targetClient}`);\n      return;\n    }\n  \n    // Find the correct awaitingTransfer object by messageId\n    const awaitingTransfer = currentAwaitingTransfers.find(item => item.messageId === messageId);\n  \n    if (!awaitingTransfer) {\n      console.error(`Hamsters.js ${this.hamsters.version} no awaiting transfer found for messageId ${messageId}`);\n      return;\n    }\n  \n    // Update the status of the transfer key in the transferList\n    awaitingTransfer.transferList[key] = status;\n  \n    // Set the updated awaitingTransfers back to the client\n    this.awaitingTransfers.set(targetClient, currentAwaitingTransfers);\n  }\n  \n  \n  handleTransferResponse(targetClient, transferData) {\n    let requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n  \n    if (!requestedTransfers || requestedTransfers.length === 0) {\n      console.error(`Hamsters.js ${this.hamsters.version} received transfer response but no transfer was requested for ${targetClient}`);\n      return;\n    }\n  \n    const currentRequestedTransfer = requestedTransfers[0]; // Always get the first requested transfer\n    const key = currentRequestedTransfer.key;\n    const messageId = currentRequestedTransfer.messageId || null;\n    const responseId = currentRequestedTransfer.responseId || null;\n  \n    if (responseId) {\n      // This is an output transfer\n      const clientPromises = this.pendingPromises.get(targetClient);\n      if (clientPromises) {\n        for (const [promiseMessageId, promiseDetails] of clientPromises) {\n          if (promiseDetails.responseId === responseId) {\n            const output = this.convertFromArrayBuffer(transferData, key);\n            promiseDetails.resolve(output);\n            clientPromises.delete(promiseMessageId);\n            if (clientPromises.size === 0) {\n              this.pendingPromises.delete(targetClient);\n            }\n            break;\n          }\n        }\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending promises found for ${targetClient}`);\n      }\n    } else {\n      // This is an input transfer\n      const pendingTasks = this.pendingTasks.get(targetClient);\n      if (pendingTasks) {\n        const currentTaskIndex = pendingTasks.findIndex(item => item.messageId === messageId);\n  \n        if (currentTaskIndex > -1) {\n          const currentTask = pendingTasks[currentTaskIndex];\n          currentTask.hamsterFood[key] = this.convertFromArrayBuffer(transferData, key);\n  \n          const stillAwaiting = Object.values(currentTask.hamsterFood).some(value => value === 'Awaiting Transfer');\n  \n          if (stillAwaiting) {\n            this.requestNextTransfer(targetClient, messageId);\n          } else {\n            // Remove only the current task from the pendingTasks array\n            pendingTasks.splice(currentTaskIndex, 1);\n  \n            // If there are no more tasks for this client, clean up the pendingTasks map\n            if (pendingTasks.length === 0) {\n              this.pendingTasks.delete(targetClient);\n            } else {\n              this.pendingTasks.set(targetClient, pendingTasks); // Update remaining pending tasks\n            }\n  \n            // Run the task after all transfers have been completed\n            this.runDistributedTask(currentTask, targetClient);\n          }\n        } else {\n          console.warn(`Hamsters.js ${this.hamsters.version} no pending task found for targetClient: ${targetClient} and messageId: ${messageId}`);\n        }\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending task found for targetClient: ${targetClient} and messageId: ${messageId}`);\n      }\n    }\n  \n    // Cleanup requested transfers\n    requestedTransfers = requestedTransfers.slice(1); // Removes the first item (currentRequestedTransfer)\n    if (requestedTransfers.length === 0) {\n      this.lastRequestedTransfers.delete(targetClient);\n    } else {\n      this.lastRequestedTransfers.set(targetClient, requestedTransfers); // Update remaining transfers\n    }\n  \n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} processed transfer response for ${key} from ${targetClient}`);\n    }\n  } \n  \n  measureLatency(targetClient) {\n    const startTime = performance.now();\n    this.sendPing(targetClient, startTime);\n  }\n\n  sendPing(targetClient, startTime) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'ping', startTime, threads: this.hamsters.maxThreads }));\n    }\n  }\n\n  handlePing(targetClient, startTime, clientThreads) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'pong', startTime, threads: this.hamsters.maxThreads }));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent pong to ${targetClient}`);\n      }\n      if(clientThreads) {\n        const clientInfo = {};\n        clientInfo.latency = performance.now() - startTime;\n        clientInfo.logicalCores = clientThreads;\n        this.clientInfo.set(targetClient, clientInfo);\n      }\n    }\n  }\n\n  handlePong(targetClient, startTime, clientThreads) {\n    const latency = performance.now() - startTime;\n    const clientInfo = this.clientInfo.get(targetClient) || {};\n    clientInfo.latency = latency;\n    clientInfo.logicalCores = clientThreads;\n    this.clientInfo.set(targetClient, clientInfo);\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} received pong from ${targetClient} with latency: ${latency.toFixed(2)}ms`);\n    }\n  }\n\n  runDistributedTask(taskMessage, targetClient) {\n    let task = taskMessage.task;\n    task.targetClient = targetClient;\n    task.messageId = taskMessage.messageId;\n    task.input = taskMessage.hamsterFood;\n    task.type = 'task-response';\n    console.log(\"RUNNING DISTRIBUTED TASK\");\n    this.hamsters.scheduleTask(task, this.returnDistributedOutput, this.returnDistributedOutput);\n  }\n  \n  sendDataResponse(responseData) {\n    const { targetClient, messageId, output } = responseData;\n    const responseId = this.generateUniqueId();\n    this.initializeOutputTransfer(targetClient, output, messageId, responseId);\n  }\n\n  initializeOutputTransfer(targetClient, output, messageId, responseId) {\n    this.pendingOutputs.set(responseId, { targetClient, output, messageId });\n  \n    const initialResponse = {\n      type: 'task-response',\n      messageId,\n      responseId,\n      awaitingTransfers: true\n    };\n  \n    this.sendData({ targetClient, data: initialResponse });\n  \n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} initialized output transfer for ${targetClient} (responseId: ${responseId})`);\n    }\n  }\n\n  handleOutputTransferRequest(targetClient, message) {\n    const { responseId } = message;\n    const pendingOutput = this.pendingOutputs.get(responseId);\n\n    if (pendingOutput && pendingOutput.targetClient === targetClient) {\n      const arrayBuffer = this.getArrayBuffer(pendingOutput.output);\n      this.sendBlobData({ targetClient, data: arrayBuffer, dataType: 'arrayBuffer' });\n      this.pendingOutputs.delete(responseId);\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent output transfer for ${targetClient} (responseId: ${responseId})`);\n      }\n    } else {\n      console.error(`Hamsters.js ${this.hamsters.version} received unexpected output transfer request for ${targetClient}`);\n    }\n  }\n\n  getArrayBuffer(transferredData) {\n    // Convert object/array to JSON string\n    const jsonString = JSON.stringify(transferredData);\n    \n    // Encode string as a Uint8Array\n    const encoder = new TextEncoder();\n    const encodedArray = encoder.encode(jsonString);\n    \n    // Return the buffer from the typed array\n    return encodedArray.buffer;\n  }\n\n  convertFromArrayBuffer(buffer, key) {\n    // Create a typed array from the buffer\n    const originalArray = new Uint8Array(buffer);\n    \n    // Decode the Uint8Array back to a string\n    const decoder = new TextDecoder();\n    const jsonString = decoder.decode(originalArray);\n    \n    // Parse the JSON string to get the original object back\n    return JSON.parse(jsonString);\n  }  \n  \n\n  // getArrayBuffer(transferredData) {\n  //   if (ArrayBuffer.isView(transferredData)) {\n  //     return transferredData.buffer;\n  //   }\n  //   if (transferredData instanceof ArrayBuffer) {\n  //     return transferredData;\n  //   }\n  //   // Convert object/array to JSON string\n  //   const jsonString = JSON.stringify(transferredData);\n    \n  //   // Encode string as a Uint8Array\n  //   const encoder = new TextEncoder();\n  //   const encodedArray = encoder.encode(jsonString);\n    \n  //   // Return the buffer from the typed array\n  //   return encodedArray.buffer;\n  // }\n\n  // convertFromArrayBuffer(buffer, key) {\n  //   const originalArray = new Uint8Array(buffer);\n  //   if(this.hamsters.habitat.node) { //Node.js has stricter security and won't allow the transfer of buffers sent using node.js webrtc channels, clone into new array first\n  //     const newArrayBuffer = new ArrayBuffer(originalArray.byteLength);\n  //     const newTypedArray = new Uint8Array(newArrayBuffer);\n  //     newTypedArray.set(originalArray);\n  //     return newTypedArray;\n  //   }\n  //   return originalArray;\n  // }\n\n  sendData({ targetClient, data }) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify(data));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent data to: ${targetClient}`);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: ${targetClient}`);\n      }\n    }\n  }\n\n  sendBlobData({targetClient, data, dataType}) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(data);\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent blob data to: ${targetClient}`);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: ${targetClient}`);\n      }\n    }\n  }\n\n  // Function to convert Blob to ArrayBuffer using Fetch API\n  async blobToArrayBuffer(blob) {\n    if (typeof fetch === 'function') { // Check if Fetch API is available\n        const response = new Response(blob);\n        return await response.arrayBuffer();\n    } else {\n        throw new Error('Fetch API is not supported in this environment.');\n    }\n  }\n\n  async onReceiveMessageCallback(targetClient, messageData) {\n    if(messageData instanceof Blob) {\n      messageData = await this.blobToArrayBuffer(messageData);\n    }\n    if (messageData instanceof ArrayBuffer) {\n      this.handleTransferResponse(targetClient, messageData);\n    } else if (typeof messageData === 'string') {\n      let incomingMessage;\n      try {\n        incomingMessage = JSON.parse(messageData);\n        this.handleIncomingMessage(targetClient, incomingMessage);\n      } catch (error) {\n        console.error(`Hamsters.js ${this.hamsters.version} error parsing message:`, error);\n      }\n    } else {\n      console.log(\"Received unexpected data type:\", targetClient, messageData);\n    }\n  }\n\n  handleIncomingMessage(targetClient, incomingMessage) {\n    const handlers = {\n      'transfer-request': this.fulfillTransferRequest.bind(this),\n      'task-request': this.handleTaskRequest.bind(this),\n      'transfer-response': this.processTransferResponse.bind(this),\n      'output-transfer-request': this.handleOutputTransferRequest.bind(this),\n      'task-response': this.handleTaskResponse.bind(this),\n      'ping': (client, message) => this.handlePing(client, message.startTime, message.threads),\n      'pong': (client, message) => this.handlePong(client, message.startTime, message.threads)\n    };\n\n    const handler = handlers[incomingMessage.type];\n    if (handler) {\n      handler(targetClient, incomingMessage);\n    } else {\n      console.log(`Hamsters.js ${this.hamsters.version} unknown message received from: ${targetClient}`);\n    }\n  }\n\n  handleTaskRequest(targetClient, incomingMessage) {\n    let currentPendingTasks = this.pendingTasks.get(targetClient);\n    if(!currentPendingTasks) {\n      currentPendingTasks = [];\n    }\n    currentPendingTasks.push(incomingMessage);\n    this.pendingTasks.set(targetClient, currentPendingTasks);\n    const awaitingTransfers = Object.values(incomingMessage.hamsterFood).some(value => value === 'Awaiting Transfer');\n    if (awaitingTransfers) {\n      this.initializeDistributedTask(targetClient, incomingMessage, incomingMessage.messageId);\n    } else {\n      this.runDistributedTask(incomingMessage, targetClient);\n    }\n  }\n\n  startPromiseCleanupInterval(cleanupInterval) {\n    setInterval(() => this.cleanupStalePendingPromises(), cleanupInterval);\n  }\n  \n  cleanupStalePendingPromises() {\n    const now = Date.now();\n    for (const [targetClient, clientPromises] of this.pendingPromises) {\n      for (const [messageId, promiseDetails] of clientPromises) {\n        if (now - promiseDetails.timestamp > this.promiseTimeoutDuration) {\n          promiseDetails.reject(new Error('Task timed out'));\n          clientPromises.delete(messageId);\n        }\n      }\n      if (clientPromises.size === 0) {\n        this.pendingPromises.delete(targetClient);\n      }\n    }\n  }\n\n  handleTaskResponse(targetClient, message) {\n    const { messageId, responseId, awaitingTransfers, output } = message;\n    const clientPromises = this.pendingPromises.get(targetClient);\n    \n    if (clientPromises && clientPromises.has(messageId)) {\n      const promiseDetails = clientPromises.get(messageId);\n      \n      if (awaitingTransfers && responseId) {\n        promiseDetails.state = 'awaitingTransfer';\n        promiseDetails.responseId = responseId;\n        this.requestOutputTransfer(targetClient, responseId, messageId);\n      } else {\n        promiseDetails.resolve(output);\n        clientPromises.delete(messageId);\n        if (clientPromises.size === 0) {\n          this.pendingPromises.delete(targetClient);\n        }\n      }\n    } else {\n      console.warn(`Received a message from ${targetClient} but no matching promise found with messageId ${messageId}`);\n    }\n  }\n\n  requestOutputTransfer(targetClient, responseId, messageId) {\n    let requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n    if(!requestedTransfers) {\n      requestedTransfers = [];\n    }\n    const outputTransferRequest = {\n      type: 'output-transfer-request',\n      key: 'output',\n      responseId,\n      messageId\n    };\n    requestedTransfers.push(outputTransferRequest);\n    this.lastRequestedTransfers.set(targetClient, requestedTransfers);\n    this.sendData({ targetClient, data: outputTransferRequest });\n  }\n\n  requestDataTransfer(key, messageId, targetClient) {\n    let requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n    if(!requestedTransfers) {\n      requestedTransfers = [];\n    }\n    const message = {\n      type: 'transfer-request',\n      key: key,\n      messageId: messageId\n    };\n    requestedTransfers.push(message);\n    this.lastRequestedTransfers.set(targetClient, requestedTransfers);\n    this.sendData({targetClient, data: message});\n\n    // Update the status of the transfer item\n    const awaitingTransfersData = this.awaitingTransfers.get(targetClient);\n    if (awaitingTransfersData && awaitingTransfersData.messageId === messageId) {\n      awaitingTransfersData.transfers[key] = 'Requested Transfer';\n      this.awaitingTransfers.set(targetClient, awaitingTransfersData);\n    }\n\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} requested transfer for ${key} from ${targetClient} (messageId: ${messageId})`);\n    }\n  }\n\n  fulfillTransferRequest(targetClient, incomingMessage) {\n    const { key, messageId, responseId } = incomingMessage;\n    const transferId = responseId || messageId;\n    const pendingTransferItems = this.pendingTransfers.get(transferId);\n\n    if (pendingTransferItems && pendingTransferItems[key]) {\n      const data = pendingTransferItems[key];\n      \n      // Get the ArrayBuffer efficiently based on data type\n      const arrayBuffer = this.getArrayBuffer(data);\n\n      // Send the data as ArrayBuffer\n      this.sendBlobData({ targetClient, data: arrayBuffer, dataType: 'arrayBuffer' });\n\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent transfer response for ${key} (${responseId ? 'output' : 'input'}) to ${targetClient} (messageId: ${messageId})`);\n      }\n\n      // Clean up after sending\n      delete pendingTransferItems[key];\n      if (Object.keys(pendingTransferItems).length === 0) {\n        this.pendingTransfers.delete(transferId);\n      }\n    } else {\n      console.error(`No pending transfer found for ${key} (${responseId ? 'output' : 'input'}) for ${targetClient} (messageId: ${messageId})`);\n    }\n  }\n\n  processTransferResponse(targetClient, incomingMessage) {\n    const { key, data, messageId, responseId } = incomingMessage;\n  \n    if (responseId) {\n      // This is an output transfer\n      const pendingPromise = this.pendingPromises.get(messageId);\n      if (pendingPromise) {\n        pendingPromise.resolve(data);\n        this.pendingPromises.delete(messageId);\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending promise found for messageId: ${messageId}`);\n      }\n    } else {\n      // This is an input transfer\n      const pendingTasks = this.pendingTasks.get(targetClient);\n      if (pendingTasks) {\n        const currentTaskIndex = pendingTasks.findIndex(item => item.messageId === messageId);\n  \n        if (currentTaskIndex > -1) {\n          const currentTask = pendingTasks[currentTaskIndex];\n          currentTask.hamsterFood[key] = this.convertFromArrayBuffer(data);\n  \n          const stillAwaiting = Object.values(currentTask.hamsterFood).some(value => value === 'Awaiting Transfer');\n  \n          if (stillAwaiting) {\n            this.requestNextTransfer(targetClient, messageId);\n          } else {\n            // Remove only the current task from the pendingTasks array\n            pendingTasks.splice(currentTaskIndex, 1);\n  \n            // If there are no more tasks for this client, clean up the pendingTasks map\n            if (pendingTasks.length === 0) {\n              this.pendingTasks.delete(targetClient);\n            } else {\n              this.pendingTasks.set(targetClient, pendingTasks); // Update remaining pending tasks\n            }\n  \n            // Run the task after all transfers have been completed\n            this.runDistributedTask(currentTask, targetClient);\n          }\n        } else {\n          console.warn(`Hamsters.js ${this.hamsters.version} no pending task found for targetClient: ${targetClient} and messageId: ${messageId}`);\n        }\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending task found for targetClient: ${targetClient} and messageId: ${messageId}`);\n      }\n    }\n  \n    // Cleanup requested transfers\n    const requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n    if (requestedTransfers) {\n      requestedTransfers.shift(); // Remove the first item (FIFO)\n      if (requestedTransfers.length === 0) {\n        this.lastRequestedTransfers.delete(targetClient);\n      } else {\n        this.lastRequestedTransfers.set(targetClient, requestedTransfers); // Update remaining transfers\n      }\n    }\n  \n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} processed transfer response for ${key} from ${targetClient}`);\n    }\n  }  \n\n  onSendChannelStateChange(targetClient) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      this.measureLatency(targetClient);\n    }\n    if (sendChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} send channel state changed for ${targetClient}: ${sendChannel.readyState}`);\n    }\n  }\n\n generateUniqueId() {\n  const timestamp = Date.now().toString(36);\n  const random = Math.random().toString(36).substr(2, 5);\n  this.messageCounter = (this.messageCounter + 1) % 1000000;\n  return `${timestamp}-${random}-${this.messageCounter.toString(36).padStart(5, '0')}`;\n}\n\n  onCreateSessionDescriptionError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to create session description: ${error}`);\n    }\n  }\n\n  onAddIceCandidateError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to add ICE candidate: ${error}`);\n    }\n  }\n}\n\nexport default Distribute;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Observable {\n  constructor(initialData = {}) {\n    this.data = Array.isArray(initialData) ? [...initialData] : { ...initialData };\n    this.events = {};\n  }\n\n  // Allow listeners to register for specific events\n  on(event, callback) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  }\n\n  // Notify listeners about the event\n  emit(event, ...args) {\n    if (this.events[event]) {\n      this.events[event].forEach(callback => callback(...args));\n    }\n  }\n\n  emitEvents(emitType, eventData) {\n    if(emitType !== 'change') {\n      this.emit(emitType, eventData);\n    }\n    this.emit('change', eventData);\n  }\n\n  set(key, value, emitType = 'change') {\n    const isNewKey = !this.data[key];  // Check if it's a new entry\n\n    if (typeof key === 'string') {\n      const keys = key.split('.');\n      let current = this.data;\n      for (let i = 0; i < keys.length - 1; i++) {\n        current = current[keys[i]];\n      }\n      current[keys[keys.length - 1]] = value;\n    } else if (typeof key === 'object') {\n      this.data[key] = value;\n    }\n\n    this.emitEvents(emitType, this.data);\n\n    return value;\n  }\n\n  setAll(data) {\n    this.data = data;\n  }\n\n  get(key) {\n    return this.data[key];\n  }\n\n  push(...items) {\n    this.data.push(...items);\n    this.emitEvents('change', this.data);\n  }\n\n  pop(emitType = 'change') {\n    const item = this.data.pop();\n    this.emitEvents(emitType, this.data);\n    return item;\n  }\n\n  shift(emitType = 'change') {\n    let item = this.data.shift();\n    this.emitEvents(emitType, this.data);\n    return item;\n  }\n\n  splice(start, deleteCount, ...items) {\n    const result = this.data.splice(start, deleteCount, ...items);\n    this.emitEvents('change', this.data);\n    return result;\n  }\n\n  indexOf(item) {\n    return this.data.indexOf(item);\n  }\n\n  length() {\n    return this.data.length;\n  }\n\n  delete(property, emitType = 'change') {\n    if (!Array.isArray(this.data)) {\n      delete this.data[property];\n      this.emitEvents(emitType, this.data);\n    }\n  }\n\n  getData() {\n    return this.data;\n  }\n}\n\nexport default Observable;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n//Core Functionality\nimport Habitat from './core/habitat';\nimport Pool from './core/pool';\nimport Data from './core/data';\nimport Task from './core/task';\n\n//Worker Scaffolds\nimport Legacy from './scaffold/legacy';\nimport Regular from './scaffold/regular';\nimport Shared from './scaffold/shared';\n\n//Features\nimport Memoize from './feature/memoize';\nimport Distribute from './feature/distribute';\nimport Observable from './feature/observable';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.version = '5.6.3';\n    this.run = this.hamstersRun.bind(this);\n    this.promise = this.hamstersPromise.bind(this);\n    this.init = this.initializeLibrary.bind(this);\n    this.data = {};\n    this.pool = {};\n    this.scaffold = {};\n    this.habitat = {};\n    this.memoize = {};\n  }\n\n  /**\n  * @function inititializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    const start = performance.now();\n    this.observable = Observable;\n    this.data = new Data(this);\n    this.pool = new Pool(this);\n    this.scaffold = {\n      legacy: new Legacy(),\n      regular: new Regular(),\n      shared: new Shared()\n    };\n    this.habitat = new Habitat(this);\n    this.memoize = new Memoize(this, 100); //Set a maximum of 100 memoized function results, LRU cache\n    this.distribute = new Distribute(this);\n    this.processStartOptions(startOptions);\n    \n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      this.pool.spawnHamsters(this.habitat.maxThreads);\n    }\n    this.maxThreads = this.habitat.maxThreads;\n\n    if(this.habitat.relay) {\n      console.info(`Hamsters.js ${this.version} establishing connection to relay`);\n      this.distribute.establishConnection();\n    }\n    const end = performance.now();\n    console.info(`Hamsters.js ${this.version} initialized using up to ${this.habitat.maxThreads} threads in ${end - start}ms`);\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      for (const key of Object.keys(startOptions)) {\n        if (this.habitat.keys.includes(key.toLowerCase())) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          if(key === 'scaffold') {\n            this.scaffold.custom = startOptions[key];\n          } else {\n            this[key] = startOptions[key];\n          }\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    let forceLegacyMode = (typeof startOptions !== 'undefined' && typeof startOptions.legacy !== 'undefined');\n    if (forceLegacyMode) {\n      forceLegacyMode = startOptions.legacy;\n    }\n    if (typeof this.habitat.Worker === 'function' && !forceLegacyMode) {\n      this.habitat.legacy = this.habitat.isIE;\n    }\n  }\n\n  /**\n   * @async\n   * @function scheduleTask - Schedules a new function to be processed by the library\n   * @param {object} task - Provided library execution options\n   * @param {function} resolve - Parent function promise resolve method\n   * @param {function} reject - Parent function promise reject method\n   * @return {Promise} Promise object on completion\n   */\n  scheduleTask(task, resolve, reject) {\n    if (task.input.memoize) {\n      // Pass the task object to the memoized function\n      const memoizedFunction = this.memoize.memoize(() => this.pool.scheduleTask(task, resolve, reject));\n      return memoizedFunction(task).then(resolve).catch(reject);\n    }\n    return this.pool.scheduleTask(task, resolve, reject);\n  }\n\n  /**\n   * @async\n   * @function hamstersPromise - Calls library functionality using async promises\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   * @return {Promise} Promise resolving with results from functionToRun\n   */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      this.scheduleTask(new Task(this, params, functionToRun), resolve, reject);\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    this.scheduleTask(new Task(this, params, functionToRun), onSuccess, onError);\n  }\n}\n\nexport default new hamstersjs();\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","moduleId","cachedModule","__webpack_module_cache__","undefined","__webpack_modules__","Legacy","constructor","hamsters","scaffold","params","resolve","reject","rtn","data","dataType","habitat","reactNative","self","node","isIE","eval","hamstersJob","Shared","addEventListener","incomingConnection","port","ports","start","incomingMessage","postMessage","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","Habitat","debug","importScripts","relay","memoize","persistence","browser","isBrowser","webWorker","isWebWorker","isNode","isReactNative","shell","isShell","transferable","supportsTransferableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isInternetExplorer","selectHamsterWheel","bind","sharedWorker","locateSharedWorkerObject","locateBlobBuilder","findAvailableBlobBuilder","legacy","isLegacyEnvironment","Worker","locateWorkerObject","maxThreads","determineGlobalThreads","keys","getHabitatKeys","max","navigator","hardwareConcurrency","isFirefox","os","cpus","length","userAgent","toLowerCase","indexOf","SharedWorker","process","product","isLegacy","supportsSharedWorkers","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","createDataBlob","textContent","Blob","blob","append","type","getBlob","generateWorkerBlob","workerLogic","URL","createObjectURL","generateWorkerString","toString","Uint8Array","SharedArrayBuffer","Proxy","custom","encodeURIComponent","regular","Pool","threads","observable","running","pending","fetchHamster","getAvailableThread","addWorkToPending","index","task","scheduler","metrics","count","enqueued_at","Date","now","push","processQueuedItem","hamster","item","dequeued_at","runTask","threadId","spawnHamster","keepTrackOfThread","id","workers","spawnHamsters","prepareMeal","hamsterFood","array","input","getSubArrayFromIndex","sharedBuffer","excludedKeys","Set","has","legacyWheel","pool","trainHamster","feedHamster","hamsterWheel","returnOutputAndRemoveTask","output","processDataType","aggregate","aggregateThreadOutputs","sort","sortOutput","completedAt","startedAt","started_at","completed_at","console","info","distribute","removeFromRunning","splice","processReturn","message","JSON","parse","addThreadOutputWithIndex","setOnMessage","onThreadResponse","onmessage","onmessageerror","onerror","once","error","shift","terminate","scheduleTask","distributeTask","i","indexes","Data","getSubArrayUsingIndex","getSubArrayIndexes","calculateIndexes","sortTaskOutput","typedArrayFromBuffer","prepareFunction","prepareWorkerTask","messageWorkerThread","getBufferSize","createSharedBuffer","getDataType","setupSharedArrayBuffer","stringify","getTransferableObjects","typedArrayBuffers","transferableObjects","typedArrayTypes","otherTransferables","globalContext","global","buffer","concat","types","Uint32Array","Uint16Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","functionBody","functionString","String","isAsync","trim","startsWith","substring","lastIndexOf","arr","order","Array","a","b","reverse","byteLength","set","reduce","len","bufferLength","offset","outputLength","n","end","segmentSize","Math","floor","startIndex","endIndex","getTransferList","transferList","forEach","isArray","transferCount","inputArray","slice","Task","functionToRun","transfers","request","send","setupLegacyTask","setupModernTask","setupDebugMetrics","sharedArray","created_at","setupThreadMetrics","threadMetrics","Regular","handleDataType","allTypes","includes","add","from","returnResponse","buffers","NodeStore","maxSize","cache","Map","value","delete","Promise","size","oldestKey","next","clear","WebStore","dbName","storeName","db","initDB","indexedDB","open","event","target","onupgradeneeded","result","objectStoreNames","contains","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","transaction","updateTimestamp","then","catch","checkSize","put","timestamp","countRequest","evictOldest","openCursor","cursor","Memoize","store","func","generateTaskKey","cachedResult","applyFunc","hashCode","str","chr","hash","charCodeAt","args","apply","Distribute","localConnection","remoteConnections","clientInfo","sendChannels","pcConstraint","ws","clientId","pendingPromises","pendingTasks","pendingTransfers","awaitingTransfers","lastRequestedTransfers","pendingOutputs","returnDistributedOutput","sendDataResponse","establishConnection","initWebSocket","lastHeartbeat","heartBeatInterval","deletedPromises","heartBeatTimeout","messageCounter","generatedMessageIds","promiseTimeoutDuration","WebSocket","onopen","version","logicalCores","sendHeartBeat","startPromiseCleanupInterval","handleWebSocketMessage","onclose","handler","handleClientReconnect","updateClientList","handleOffer","handleAnswer","handleCandidate","interval","setInterval","clientListMessage","clients","newClientIds","map","client","createConnection","getData","handleClientDisconnect","close","newClientId","log","targetClient","RTCPeerConnection","iceServers","urls","onicecandidate","candidate","ondatachannel","dataChannelCallback","findOrCreateChannel","createOffer","desc","setLocalDescription","offer","onCreateSessionDescriptionError","remoteConnection","setRemoteDescription","RTCSessionDescription","createAnswer","answer","sendChannel","dataConstraint","ordered","maxRetransmits","random","createDataChannel","onSendChannelStateChange","onReceiveMessageCallback","dataChannel","channel","currentTargetClient","storeClientConnectionInfo","connection","addIceCandidate","RTCIceCandidate","onAddIceCandidateError","getDistributedClient","messageId","generateUniqueId","preparedList","distributedSubTask","state","sendData","sendChannelKeys","warn","minLatency","Infinity","readyState","latency","initializeDistributedTask","filter","currentAwaitingTransfers","requestNextTransfer","runDistributedTask","requestedTransfers","lastRequestedTransfer","find","awaitingTransfer","requestTransferFromList","transferKeys","nextKey","updateTransferStatus","requestDataTransfer","status","handleTransferResponse","transferData","currentRequestedTransfer","responseId","clientPromises","promiseMessageId","promiseDetails","convertFromArrayBuffer","currentTaskIndex","findIndex","currentTask","values","some","measureLatency","startTime","performance","sendPing","handlePing","clientThreads","handlePong","toFixed","taskMessage","responseData","initializeOutputTransfer","initialResponse","handleOutputTransferRequest","pendingOutput","arrayBuffer","getArrayBuffer","sendBlobData","transferredData","jsonString","TextEncoder","encode","originalArray","TextDecoder","decode","_ref","_ref2","blobToArrayBuffer","fetch","response","Response","Error","messageData","ArrayBuffer","handleIncomingMessage","fulfillTransferRequest","handleTaskRequest","processTransferResponse","handleTaskResponse","ping","pong","currentPendingTasks","cleanupInterval","cleanupStalePendingPromises","requestOutputTransfer","outputTransferRequest","awaitingTransfersData","transferId","pendingTransferItems","pendingPromise","substr","padStart","Observable","initialData","arguments","events","on","callback","emit","_len","_key","emitEvents","emitType","eventData","split","current","setAll","pop","deleteCount","_len2","items","_key2","property","hamstersjs","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","shared","processStartOptions","forceLegacyMode","memoizedFunction","onSuccess","onError"],"sourceRoot":""}