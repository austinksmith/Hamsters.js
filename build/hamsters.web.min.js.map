{"version":3,"file":"hamsters.web.min.js","mappings":"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","sources":["webpack://hamsters/webpack/universalModuleDefinition","webpack://hamsters/./scaffold/legacy.js","webpack://hamsters/./scaffold/regular.js","webpack://hamsters/./scaffold/shared.js","webpack://hamsters/webpack/bootstrap","webpack://hamsters/webpack/runtime/define property getters","webpack://hamsters/webpack/runtime/global","webpack://hamsters/webpack/runtime/hasOwnProperty shorthand","webpack://hamsters/./core/habitat.js","webpack://hamsters/./core/pool.js","webpack://hamsters/./core/data.js","webpack://hamsters/./core/task.js","webpack://hamsters/./feature/stores/NodeStore.js","webpack://hamsters/./feature/stores/WebStore.js","webpack://hamsters/./feature/memoize.js","webpack://hamsters/./feature/distribute.js","webpack://hamsters/./feature/observable.js","webpack://hamsters/./hamsters.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hamsters\"] = factory();\n\telse\n\t\troot[\"hamsters\"] = factory();\n})(this, () => {\nreturn ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Legacy {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor(hamsters) {\n      this.hamsters = hamsters;\n      this.scaffold = (params, resolve, reject) => {\n        var rtn = {\n          data: [],\n          dataType: (typeof params.dataType !== \"undefined\" ? params.dataType : null)\n        };\n        if(this.hamsters.habitat.reactNative) {\n          self.rtn = rtn;\n        }\n        if(this.hamsters.habitat.node || this.hamsters.habitat.isIE) {\n          eval(params.hamstersJob);\n        } else {\n          params.hamstersJob();\n        }\n        resolve(rtn.data);\n      }\n    }\n  }\n  \n  export default Legacy;\n  ","class Regular {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n        this.scaffold = function() {\n            self.params = {};\n            self.rtn = {};\n\n            self.onmessage = function (message) {\n                this.params = message.data;\n                this.rtn = {\n                    data: [],\n                    dataType: (typeof this.params.dataType !== 'undefined' ? this.params.dataType : null),\n                    index: this.params.index\n                };\n                if (this.params.sharedBuffer) {\n                    this.params.sharedArray = typedArrayFromBuffer(this.params.dataType, this.params.sharedBuffer);\n                }\n                eval(this.params.hamstersJob);\n                const buffers = handleDataType(this.rtn);\n                returnResponse(this.rtn, buffers);\n            }.bind(this);\n\n            function handleDataType(rtn) {\n                if (this.params.sharedArray) {\n                    // Do nothing here, we don't need to return a buffer rtn.data is useless here\n                } else if (this.params.dataType) {\n                    rtn.data = typedArrayFromBuffer(rtn.dataType, rtn.data);\n                }\n                return getTransferableObjects(rtn); // Return transferable objects\n            }\n\n            function typedArrayFromBuffer(dataType, buffer) {\n                const types = {\n                    'Uint32': Uint32Array,\n                    'Uint16': Uint16Array,\n                    'Uint8': Uint8Array,\n                    'Uint8clamped': Uint8ClampedArray,\n                    'Int32': Int32Array,\n                    'Int16': Int16Array,\n                    'Int8': Int8Array,\n                    'Float32': Float32Array,\n                    'Float64': Float64Array\n                };\n                return types[dataType] ? new types[dataType](buffer) : buffer;\n            }\n\n            function returnResponse(rtn, buffers) {\n                if (buffers && buffers.length > 0) {\n                    postMessage(rtn, buffers);  // PostMessage with transferable objects\n                } else {\n                    postMessage(rtn);  // PostMessage without transferable objects\n                }\n            }\n\n            function getTransferableObjects(obj) {\n                const transferableObjects = new Set();\n                const typedArrayTypes = [\n                    'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array',\n                    'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n                ];\n                const otherTransferables = [\n                    'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n                ];\n\n                const globalContext = typeof self !== 'undefined' ? self : window;\n\n                const allTypes = [...typedArrayTypes, ...otherTransferables];\n\n                for (const prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        for (const type of allTypes) {\n                            if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n                                if (typedArrayTypes.includes(type)) {\n                                    transferableObjects.add(obj[prop].buffer);\n                                } else {\n                                    transferableObjects.add(obj[prop]);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return Array.from(transferableObjects);\n            }\n        }\n    }\n}\n\nexport default Regular;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Shared {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n      this.scaffold = function() {\n        self.params = {};\n        self.rtn = {};\n    \n        addEventListener('connect', (incomingConnection) => {\n          var port = incomingConnection.ports[0];\n          port.start();\n          port.addEventListener('message', (incomingMessage) => {\n            this.params = incomingMessage.data;\n            this.rtn = {\n              data: [],\n              dataType: this.params.dataType\n            };\n            eval(\"(\" + this.params.hamstersJob + \")\")();\n            port.postMessage(this.rtn);\n          }, false);\n        }, false);\n      }\n    }\n  }\n  \n  export default Shared;\n  ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.debug = false;\n    this.importScripts = null;\n    this.relay = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferable = this.supportsTransferableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE = this.isInternetExplorer();\n    this.selectHamsterWheel = this.selectHamsterWheel.bind(this);\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.locateBlobBuilder = this.findAvailableBlobBuilder();\n    this.legacy = this.isLegacyEnvironment();\n    this.Worker = this.locateWorkerObject();\n    this.maxThreads = this.determineGlobalThreads();\n    this.keys = this.getHabitatKeys();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(this.browser && typeof navigator.hardwareConcurrency !== \"undefined\") {\n      max = navigator.hardwareConcurrency;\n      if(this.isFirefox()) {\n        max = (max > 20 ? 20 : max);\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function isFirefox - Detect firefox browser\n  */\n  isFirefox() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return (typeof Worker !== 'undefined' ? Worker : false);\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return (typeof SharedWorker !== 'undefined' ? SharedWorker : false);\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return (typeof window === \"object\");\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.indexOf(\"MSIE \") !== -1 || navigator.userAgent.indexOf(\"Trident/\") !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return (typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser);\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a web worker\n  */\n  isWebWorker() {\n    return (typeof importScripts === \"function\" && !this.isReactNative());\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is React Native\n  */\n  isReactNative() {\n    return (typeof navigator !== \"undefined\" && typeof navigator.product !== \"undefined\" && navigator.product === \"ReactNative\");\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return ((typeof navigator === \"undefined\") && !this.isNode() && !this.isWebWorker() && !this.isReactNative());\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = !!!this.Worker;\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy;\n  }\n\n  /**\n  * @function supportsSharedWorkers - Detects if execution environment supports SharedWorkers\n  */\n  supportsSharedWorkers() {\n    return (typeof SharedWorker !== 'undefined');\n  }\n\n  /**\n  * @function findAvailableBlobBuilder - Attempts to locate a data blob builder, with vendor prefixes\n  */\n  findAvailableBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return 'Environment does not support data blobs!';\n  }\n\n  /**\n  * @function createDataBlob - Creates a new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates a blob URI for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    return URL.createObjectURL(this.createDataBlob(this.generateWorkerString(workerLogic)));\n  }\n\n  generateWorkerString(workerLogic) {\n    return `(${workerLogic.toString()})();`;\n  }\n  /**\n  * @function supportsTransferableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferableObjects() {\n    return (typeof Uint8Array !== 'undefined');\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports SharedArrayBuffers\n  */\n  supportsAtomicOperations() {\n    return (typeof SharedArrayBuffer !== 'undefined');\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports Proxy objects\n  */\n  supportsProxies() {\n    return (typeof Proxy !== 'undefined');\n  }\n\n  /**\n  * @function selectHamsterWheel - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.hamsters.scaffold.custom) {\n      return this.hamsters.scaffold.custom;\n    }\n    if(this.isIE) {\n      return this.hamsters.scaffold.legacy.scaffold;\n    }\n    if(this.reactNative) {\n      return 'reactNativeHamster.js';\n    }\n    if (this.node) {\n      return './node_modules/hamsters.js/build/common/node.js';\n    }\n    return 'data:text/javascript,' + encodeURIComponent(this.generateWorkerString(this.hamsters.scaffold.regular.scaffold));\n  }\n\n  /**\n  * @function getHabitatKeys - Returns keys for this Habitat instance\n  */\n  getHabitatKeys() {\n    return [\n      'worker','sharedworker',\n      'legacy','proxies',\n      'reactnative','atomics',\n      'transferable','browser',\n      'shell','node','debug',\n      'persistence','importscripts',\n      'maxthreads', 'parentport',\n      'webworker', 'relay'\n    ];\n  }\n}\n\nexport default Habitat;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Pool {\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.threads = new hamsters.observable([]);\n    this.running = new hamsters.observable([]);\n    this.pending = new hamsters.observable([]);\n    this.fetchHamster = this.getAvailableThread.bind(this);\n  }\n\n  /**\n  * @function addWorkToPending - Adds task to queue waiting for available thread\n  * @param {number} index - Index of the task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(index, hamsterFood, task, resolve, reject) {\n    if (this.hamsters.habitat.debug) {\n      \n      task.scheduler.metrics.threads[task.scheduler.count].enqueued_at = Date.now();\n    }\n    this.pending.push({\n      index,\n      hamsterFood,  \n      task,\n      resolve,\n      reject\n    });\n  }\n\n  /**\n  * @function processQueuedItem - Invokes processing of next item in queue\n  * @param {object} hamster - The thread to run the task\n  * @param {object} item - Task to process\n  */\n  processQueuedItem(hamster, item) {\n    if (this.hamsters.habitat.debug) {\n      item.task.scheduler.metrics.threads[item.index.id].dequeued_at = Date.now();\n    }\n    return this.runTask(hamster, item.index, item.hamsterFood, item.task, item.resolve, item.reject);\n  }\n\n  /**\n  * @function getAvailableThread - Gets an available thread\n  * @param {number} threadId - Id of the thread\n  * @returns {object} - The available thread\n  */\n  getAvailableThread(threadId) {\n    if (this.hamsters.habitat.persistence) {\n      return this.threads.get(threadId);\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[id].started_at = Date.now();\n    }\n    task.scheduler.workers.push(id);\n    this.running.push(id);\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {number} maxThreads - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    while (maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    const { selectHamsterWheel, Worker } = this.hamsters.habitat;\n    const hamsterWheel = selectHamsterWheel();\n    return new Worker(hamsterWheel);\n  }\n    \n  /**\n   * @function prepareMeal\n   * @description Prepares message to send to a thread and invoke execution\n   * @param {number} index - Index of the subarray to process\n   * @param {number} subTaskId - Subtask ID\n   * @param {object} task - Provided library functionality options for this task\n   * @returns {object} - Prepared message to send to a thread\n   */\n  prepareMeal(index, subTaskId, task) {\n    index.id = subTaskId;\n\n    // Prepare the base hamsterFood object\n    const hamsterFood = {\n      array: task.input.array && task.input.array.length !== 0 ? \n            this.hamsters.data.getSubArrayFromIndex(index, task.input.array) : [],\n      index: index\n    };\n\n    // Add sharedBuffer if it exists\n    if (typeof task.scheduler.sharedBuffer !== 'undefined') {\n      hamsterFood.sharedBuffer = task.scheduler.sharedBuffer;\n    }\n\n    // List of excluded keys\n    const excludedKeys = new Set(['array', 'threads', 'sharedArray']);\n\n    // Iterate over task.input properties and add to hamsterFood\n    for (const key in task.input) {\n      if (task.input.hasOwnProperty(key) && !excludedKeys.has(key)) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n\n    return hamsterFood;\n  }\n\n  /**\n  * @function runDistributedTask - Runs incoming distributed function using thread\n  * @param {object} incomingMessage - The incoming subTask object\n  */\n  runDistributedTask(incomingMessage, targetClient) {\n    const hamster = this.fetchHamster(this.running.length());\n    let task = incomingMessage.task;\n    let index = incomingMessage.hamsterFood.index;\n    let handleResponse = this.hamsters.distribute.returnDistributedOutput;\n    task.targetClient = targetClient;\n    task.messageId = incomingMessage.messageId;\n    task.type = 'task-response';\n    this.runTask(hamster, index, incomingMessage.hamsterFood, incomingMessage.task, handleResponse, handleResponse);\n  }\n\n  /**\n  * @function runTask - Runs function using thread\n  * @param {object} hamster - The thread to run the task\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, index, hamsterFood, task, resolve, reject) {\n    const threadId = this.running.length();\n    this.hamsters.pool.keepTrackOfThread(task, threadId);\n    if (this.hamsters.habitat.legacy) {\n      this.hamsters.scaffold.legacy.scaffold(hamsterFood, resolve, reject);\n    } else {\n      if(this.hamsters.trainer) {\n        this.hamsters.trainer(index, task, threadId, hamster, resolve, reject);\n      } else {\n        this.hamsters.pool.trainHamster(index, task, threadId, hamster, resolve, reject);\n      }\n      this.hamsters.data.feedHamster(hamster, hamsterFood);\n    }\n    task.scheduler.count += 1;\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(index, subTaskId, task, resolve, reject) {\n    const hamsterFood = this.prepareMeal(index, subTaskId, task);\n    if (this.hamsters.habitat.maxThreads <= this.running.length()) {\n      this.addWorkToPending(index, hamsterFood, task, resolve, reject);\n    } else {\n      if(task.input.distribute) {\n        this.hamsters.distribute.distributeTask(task, hamsterFood, resolve, reject);\n      } else {\n        const hamster = this.fetchHamster(this.running.length());\n        this.runTask(hamster, index, hamsterFood, task, resolve, reject);\n      }\n    }\n  }\n\n  processDistributedReturn(data) {\n    debugger;\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - Gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    if(task.scheduler.sharedBuffer) {\n      task.output = hamsters.data.processDataType(task.input.dataType, task.scheduler.sharedBuffer);\n    }\n    if(task.input.aggregate) {\n      task.output = this.hamsters.data.aggregateThreadOutputs(task.output, task.input.dataType);\n    }\n    if(task.input.sort) {\n      task.output = this.hamsters.data.sortOutput(task.output, task.input.sort)\n    }\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.completed_at = Date.now();\n      console.info(\"Hamsters.js Task Completed: \", task);\n    }\n    if(task.input.distribute) {\n      resolve(task);\n    } else {\n      resolve(task.output);\n    }\n  }\n\n  /**\n  * @function removeFromRunning - Removes a thread from the running pool\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Id of the thread to remove\n  */\n  removeFromRunning(task, threadId) {\n    this.running.splice(this.running.indexOf(threadId), 1);\n    task.scheduler.workers.splice(task.scheduler.workers.indexOf(threadId), 1);\n  }\n\n  /**\n   * @function processReturn - Processes the returned message from a thread\n   * @param {number} index - Index of the subarray processed\n   * @param {object} message - Message returned from the thread\n   * @param {object} task - Provided library functionality options for this task\n   */\n  processReturn(index, message, task) {\n    const isReactNative = this.hamsters.habitat.reactNative;\n    const isNode = this.hamsters.habitat.node;\n    const response = message.data;\n    const messageData = isReactNative ? JSON.parse(message).data : (response.data !== undefined ? response.data : response);\n    const threadId = isNode ? message.index.id : response.index.id;\n\n    if (task.scheduler.threads !== 1) {\n      if (isReactNative || task.input.mixedOutput) {\n          task.output[threadId] = messageData;\n      } else {\n        this.hamsters.data.addThreadOutputWithIndex(task, index, messageData);\n      }\n    } else {\n      task.output = messageData;\n    }\n  }\n\n  /**\n  * @function setOnMessage - Sets the message handlers for a thread\n  * @param {object} hamster - The thread to set the handlers on\n  * @param {function} onThreadResponse - Handler for thread response\n  * @param {object} habitat - Habitat configuration\n  * @param {function} reject - onError method\n  */\n  setOnMessage(hamster, onThreadResponse, reject) {\n    if (this.hamsters.habitat.node) {\n      hamster.on('message', onThreadResponse);\n      hamster.on('onmessageerror', reject);\n      hamster.on('error', reject);\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = reject;\n      hamster.onerror = reject;\n    }\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Id of the thread to train\n  * @param {object} hamster - The thread to train\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(index, task, threadId, hamster, resolve, reject) {\n    const onThreadResponse = (message) => {\n      this.hamsters.pool.processReturn(index, message, task);\n      if (this.hamsters.habitat.debug) {\n        task.scheduler.metrics.threads[threadId].completed_at = Date.now();\n      }\n      this.hamsters.pool.removeFromRunning(task, threadId);\n      if (task.scheduler.workers.length === 0 && task.scheduler.count === task.scheduler.threads) {\n        this.hamsters.pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (!this.hamsters.habitat.persistence) {\n        hamster.terminate();\n      }\n      if (this.hamsters.pool.pending.length() !== 0) {\n        const queueHamster = this.hamsters.pool.fetchHamster(this.hamsters.pool.running.length());\n        this.hamsters.pool.processQueuedItem(queueHamster, this.hamsters.pool.pending.shift());\n      }\n    };\n    this.hamsters.pool.setOnMessage(hamster, onThreadResponse, reject);\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  */\n  scheduleTask(task) {\n    let i = 0;\n  \treturn new Promise((resolve, reject) => {\n      if(this.hamsters.debug) {\n        task.scheduler.metrics.started_at = Date.now();\n      }\n      while (i < task.scheduler.threads) {\n        this.hamsterWheel(task.scheduler.indexes[i], i, task, resolve, reject);\n        i += 1;\n      }\n    });\n  }\n}\n\nexport default Pool;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters; // Set the hamsters object as a property of Data class\n    this.getSubArrayFromIndex = this.getSubArrayUsingIndex.bind(this); // Bind getSubArrayUsingIndex function\n    this.getSubArrayIndexes = this.calculateIndexes.bind(this); // Bind calculateIndexes function\n    this.sortOutput = this.sortTaskOutput.bind(this); // Bind sortTaskOutput function\n    this.aggregateThreadOutputs = this.aggregateThreadOutputs.bind(this);\n    this.processDataType = this.typedArrayFromBuffer;\n    this.prepareFunction = this.prepareWorkerTask.bind(this); // Bind prepareWorkerTask function\n    this.feedHamster = this.messageWorkerThread.bind(this); // Bind messageWorkerThread function\n    this.getBufferSize = this.getBufferSize;\n    this.createSharedBuffer = this.createSharedBuffer.bind(this);\n    this.getDataType = this.getDataType;\n    this.setupSharedArrayBuffer = this.setupSharedArrayBuffer.bind(this);\n  }\n\n  /**\n  * @function messageWorkerThread - Prepares message to send to thread\n  * @param {object} hamstersHabitat - Hamsters Habitat instance\n  * @param {Worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorkerThread(hamster, hamsterFood) {\n    if(this.hamsters.habitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    return hamster.postMessage(hamsterFood, this.hamsters.data.getTransferableObjects(hamsterFood));\n  }\n\n  getTransferableObjects(obj) {\n    const typedArrayBuffers = [];\n    const transferableObjects = [];\n    const typedArrayTypes = [\n      'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', \n      'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n    ];\n    const otherTransferables = [\n      'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n    ];\n    const globalContext = typeof window !== 'undefined' ? window : global;\n  \n    for (const prop in obj) {\n      for (const type of typedArrayTypes) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          typedArrayBuffers.push(obj[prop].buffer);\n          break;\n        }\n      }\n  \n      for (const type of otherTransferables) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          transferableObjects.push(obj[prop]);\n          break;\n        }\n      }\n    }\n  \n    return typedArrayBuffers.concat(transferableObjects);\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'Uint32': Uint32Array,\n      'Uint16': Uint16Array,\n      'Uint8': Uint8Array,\n      'Uint8clamped': Uint8ClampedArray,\n      'Int32': Int32Array,\n      'Int16': Int16Array,\n      'Int8': Int8Array,\n      'Float32': Float32Array,\n      'Float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return buffer;\n    }\n    return new types[dataType](buffer);\n  }\n\n  /**\n  * @function prepareWorkerTask - Prepares function for thread, strips whitespace\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareWorkerTask(functionBody) {\n    let functionString = String(functionBody);\n    let isAsync = functionString.trim().startsWith('async');\n    functionBody = functionString.substring(functionString.indexOf(\"{\") + 1, functionString.lastIndexOf(\"}\"));\n    if(isAsync) {\n      return `(async () => {\n        ${functionBody}\n      })();`;\n    }\n    return functionBody;\n  }\n\n  /**\n  * @function sortTaskOutput - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortTaskOutput(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n   * @function getBufferSize - Gets the byte length of the input array\n   * @param {TypedArray} array - The input typed array\n   * @returns {number} - The byte length of the array\n   */\n  getBufferSize(array) {\n    return array.byteLength;\n  }\n\n  /**\n   * @function createSharedBuffer - Creates a SharedArrayBuffer based on the input array's byte length\n   * @param {TypedArray} array - The input typed array\n   * @returns {SharedArrayBuffer} - The created SharedArrayBuffer\n   */\n  createSharedBuffer(array) {\n    const byteLength = this.getBufferSize(array);\n    const sharedBuffer = new SharedArrayBuffer(byteLength);\n    const sharedArray = new array.constructor(sharedBuffer);\n\n    // Copy data from the input array to the shared array\n    sharedArray.set(array);\n\n    return sharedBuffer;\n  }\n\n  /**\n   * @function setupSharedArrayBuffer - Sets up the shared buffer and corresponding typed array\n   * @param {TypedArray} array - The input typed array\n   * @returns {object} - SharedArrayBuffer;\n   */\n  setupSharedArrayBuffer(array) {\n    return this.createSharedBuffer(array);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function addThreadOutputWithIndex - Joins individual thread outputs into single result\n  * @param {object} task - Hamsters task object\n  * @param {object} index - Index information\n  * @param {array} output - Output array\n  */\n  addThreadOutputWithIndex(task, index, output) {\n    let i = 0;\n    const outputLength = output.length;\n    for (i; i < outputLength; i++) {\n      task.output[(index.start + i)] = output[i];\n    }\n  }\n\n  /**\n   * @function calculateIndexes - Splits a single array into multiple equal sized subarrays\n   * @param {array} array - Array to split\n   * @param {number} n - Number of subarrays to create\n   */\n  calculateIndexes(array, n) {\n    // If n is 1, return the whole array range\n    if (n === 1) {\n      return [{ start: 0, end: array.length - 1 }];\n    }\n\n    const indexes = [];\n    const segmentSize = Math.floor(array.length / n);\n    let startIndex = 0;\n\n    for (let i = 0; i < n; i++) {\n      const endIndex = startIndex + segmentSize - 1;\n      indexes.push({ start: startIndex, end: endIndex });\n      startIndex = endIndex + 1;\n    }\n\n    // Adjust the last segment to cover any remaining elements\n    if (startIndex < array.length) {\n      indexes[n - 1].end = array.length - 1;\n    }\n\n    return indexes;\n  }\n\n  prepareDistributedTask(task) {\n    Object.keys(task.input).forEach(key => {\n      if(Array.isArray(task.input[key])) {\n        task.input[key] = null;\n      }\n    });\n    return task;\n  }\n\n  getTransferList(hamsterFood, task) {\n    const transferList = {};\n    task = this.prepareDistributedTask(task);\n    Object.keys(hamsterFood).forEach(item => {\n      if (Array.isArray(hamsterFood[item])) {\n        transferList[item] = hamsterFood[item];\n        hamsterFood[item] = 'Awaiting Transfer';\n      }\n    });\n    return {hamsterFood, transferList, task, transferCount: Object.keys(transferList).length};\n  }\n\n  /**\n  * @function getSubArrayUsingIndex - Slices subarray based on provided index\n  * @param {object} index - Index information\n  * @param {object} inputArray - Hamsters task object\n  */\n  getSubArrayUsingIndex(index, inputArray) {\n    return inputArray.slice(index.start, index.end + 1);\n  }\n}\n\nexport default Data;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Task {\n  /**\n   * @constructor\n   * @param {object} habitat - The environment settings\n   * @param {object} data - Data utility methods\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  constructor(hamsters, params, functionToRun) {\n    'use strict';\n\n    this.input = params;\n    this.output = [];\n    this.scheduler = {\n      count: 0,\n      threads: params.threads || 1,\n      transfers: {\n        request: 0,\n        send: 0\n      },\n      workers: []\n    };\n\n    if (hamsters.habitat.legacy) {\n      this.setupLegacyTask(hamsters, functionToRun);\n    } else {\n      this.setupModernTask(hamsters, params, functionToRun);\n    }\n\n    if (hamsters.habitat.debug) {\n      this.setupDebugMetrics();\n    }\n  }\n\n  /**\n   * @method setupLegacyTask\n   * @description Sets up task for legacy environments\n   * @param {function} functionToRun - Function to execute\n   */\n  setupLegacyTask(hamsters, functionToRun) {\n    this.scheduler.threads = 1;\n    if (!hamsters.habitat.node && !hamsters.habitat.isIE) {\n      this.input.hamstersJob = functionToRun;\n    }\n  }\n\n  /**\n   * @method setupModernTask\n   * @description Sets up task for modern environments\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  setupModernTask(hamsters, params, functionToRun) {\n    this.input.hamstersJob = hamsters.habitat.legacy ? functionToRun : hamsters.data.prepareFunction(functionToRun);\n    if (params.sharedArray && hamsters.habitat.atomics) {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.sharedArray, this.scheduler.threads);\n      this.scheduler.sharedBuffer = hamsters.data.setupSharedArrayBuffer(params.sharedArray);\n      this.input.sharedArray = []; //Reduce ram usage on main thread, do not preserve original array its no longer needed.\n    } else {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.array, this.scheduler.threads);\n    }\n  }\n\n  /**\n   * @method setupDebugMetrics\n   * @description Sets up debug metrics if debug mode is enabled\n   */\n  setupDebugMetrics() {\n    this.scheduler.metrics = {\n      created_at: Date.now(),\n      started_at: null,\n      completed_at: null,\n      threads: this.setupThreadMetrics()\n    };\n  }\n\n  setupThreadMetrics() {\n    let i = 0;\n    let threadMetrics = [];\n    while(i < this.scheduler.threads) {\n      threadMetrics.push({\n        created_at: Date.now(),\n        started_at: null,\n        enqueued_at: null,\n        dequeued_at: null,\n        completed_at: null\n      });\n      i += 1;\n    }\n    return threadMetrics;\n  }\n}\n  \nexport default Task;\n  ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass NodeStore {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.cache = new Map();\n    }\n\n    get(key) {\n        if (this.cache.has(key)) {\n            const value = this.cache.get(key);\n            // Refresh the key\n            this.cache.delete(key);\n            this.cache.set(key, value);\n            return Promise.resolve(value);\n        }\n        return Promise.resolve(null);\n    }\n\n    set(key, value) {\n        if (this.cache.size >= this.maxSize) {\n            // Remove the oldest (least recently used) entry\n            const oldestKey = this.cache.keys().next().value;\n            this.cache.delete(oldestKey);\n        }\n        this.cache.set(key, value);\n        return Promise.resolve();\n    }\n\n    clear() {\n        this.cache.clear();\n        return Promise.resolve();\n    }\n}\n\nexport default NodeStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass WebStore {\n    constructor(dbName, storeName, maxSize) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.maxSize = maxSize;\n        this.db = null;\n        this.initDB();\n    }\n\n    initDB() {\n        const self = this;\n        const request = indexedDB.open(this.dbName, 1);\n\n        request.onerror = function(event) {\n            console.error('Error opening database:', event.target.error);\n        };\n\n        request.onupgradeneeded = function(event) {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains(self.storeName)) {\n                const objectStore = db.createObjectStore(self.storeName, { keyPath: 'key' });\n                objectStore.createIndex('by_key', 'key', { unique: true });\n                objectStore.createIndex('by_timestamp', 'timestamp');\n            }\n        };\n\n        request.onsuccess = function(event) {\n            self.db = event.target.result;\n        };\n    }\n\n    get(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve(null);\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const result = event.target.result;\n                if (result) {\n                    self.updateTimestamp(key).then(() => resolve(result.value)).catch(reject);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    set(key, value) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            self.checkSize().then(() => {\n                const transaction = self.db.transaction([self.storeName], 'readwrite');\n                const objectStore = transaction.objectStore(self.storeName);\n                const request = objectStore.put({ key: key, value: value, timestamp: Date.now() });\n\n                request.onsuccess = function() {\n                    resolve();\n                };\n\n                request.onerror = function(event) {\n                    reject(event.target.error);\n                };\n            }).catch(reject);\n        });\n    }\n\n    clear() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.clear();\n\n            request.onsuccess = function() {\n                resolve();\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    checkSize() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const countRequest = objectStore.count();\n\n            countRequest.onsuccess = function() {\n                const count = countRequest.result;\n                if (count >= self.maxSize) {\n                    self.evictOldest().then(resolve).catch(reject);\n                } else {\n                    resolve();\n                }\n            };\n\n            countRequest.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    evictOldest() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const index = objectStore.index('by_timestamp');\n            const request = index.openCursor(null, 'next');\n\n            request.onsuccess = function(event) {\n                const cursor = event.target.result;\n                if (cursor) {\n                    cursor.delete().onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    updateTimestamp(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const data = event.target.result;\n                if (data) {\n                    data.timestamp = Date.now();\n                    objectStore.put(data).onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n}\n\nexport default WebStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport NodeStore from './stores/NodeStore';\nimport WebStore from './stores/WebStore';\n\nclass Memoize {\n    constructor(hamsters, maxSize) {\n        'use strict';\n\n        this.hamsters = hamsters;\n        this.store = this.hamsters.habitat.node ? new NodeStore(maxSize) : new WebStore('hamstersjs', 'cacheStore', maxSize);\n    }\n\n    memoize(func) {\n        const self = this;\n        return function(task) {\n            const key = self.generateTaskKey(task);\n\n            return new Promise(function(resolve, reject) {\n                self.store.get(key).then(function(cachedResult) {\n                    if (cachedResult !== null) {\n                        resolve(cachedResult);\n                    } else {\n                        self.applyFunc(func, task).then(function(result) {\n                            self.store.set(key, result).then(function() {\n                                resolve(result);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }\n                }).catch(reject);\n            });\n        };\n    }\n\n    generateTaskKey(task) {\n        const key = JSON.stringify({ input: task.input });\n        return this.hashCode(key);\n    }\n\n    hashCode(str) {\n        let hash = 0, i, chr;\n        if (str.length === 0) return hash;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash.toString();\n    }\n\n    applyFunc(func, args) {\n        return new Promise((resolve, reject) => {\n            try {\n                const result = func.apply(null, args);\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n\nexport default Memoize;","class Distribute {\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.localConnection = null;\n    this.remoteConnections = new hamsters.observable({});\n    this.clientInfo = new hamsters.observable({});\n    this.sendChannels = new hamsters.observable({});\n    this.receiveChannels = new hamsters.observable({});\n    this.pcConstraint = null;\n    this.dataConstraint = null;\n    this.ws = null;\n    this.clientId = null;\n    this.pendingPromises = new hamsters.observable({});\n    this.pendingTasks = new hamsters.observable({});\n    this.pendingTransfers = new hamsters.observable({});\n    this.awaitingTransfers = new hamsters.observable({});\n    this.lastRequestedTransfers = new hamsters.observable({});\n    this.pendingOutputs = new hamsters.observable({});\n    this.returnDistributedOutput = this.sendDataResponse.bind(this);\n    this.establishConnection = this.initWebSocket.bind(this);\n    this.lastHeartbeat = {};\n    this.heartBeatInterval = 30 * 1000; //Send heartbeat message every 30 seconds\n    this.heartBeatTimeout = {};\n\n    this.startPeriodicLatencyChecks();\n  }\n\n  initWebSocket() {\n    this.ws = new WebSocket(`${this.hamsters.habitat.relay}`);\n\n    this.ws.onopen = () => {\n      console.info(`Hamsters.js ${this.hamsters.version} connection established`);\n      this.ws.send(JSON.stringify({\n        type: 'register',\n        logicalCores: this.hamsters.maxThreads\n      }));\n      this.sendHeartBeat(this.heartBeatInterval);\n    };\n\n    this.ws.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      this.handleWebSocketMessage(message);\n    };\n\n    this.ws.onerror = (error) => {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} connection error:`, error);\n      }\n    };\n\n    this.ws.onclose = () => {\n      if (this.hamsters.habitat.debug) {\n        console.info(`Hamsters.js ${this.hamsters.version} connection closed. Reconnecting...`);\n      }\n      this.establishConnection();\n    };\n  }\n\n  handleWebSocketMessage(message) {\n    const handlers = {\n      'register': this.handleClientReconnect.bind(this),\n      'update-client-list': this.updateClientList.bind(this),\n      'offer': this.handleOffer.bind(this),\n      'answer': this.handleAnswer.bind(this),\n      'candidate': this.handleCandidate.bind(this)\n    };\n\n    const handler = handlers[message.type];\n    if (handler) {\n      handler(message);\n    } else if (this.hamsters.habitat.debug) {\n      console.info(`Hamsters.js ${this.hamsters.version} unknown message type: ${message.type}`);\n    }\n  }\n\n  sendHeartBeat(interval) {\n    this.heartBeatTimeout = setInterval(() => {\n      this.ws.send(JSON.stringify({\n        type: 'heartbeat'\n      }));\n      this.lastHeartbeat = Date.now();\n    }, interval);\n  }\n\n  startPeriodicLatencyChecks(interval = 30000) {\n    setInterval(() => {\n      const clients = this.sendChannels.getData();\n      Object.keys(clients).forEach(clientId => {\n        this.measureLatency(clientId);\n      });\n    }, interval);\n  }\n\n  updateClientList(clientListMessage) {\n    const clients = clientListMessage.clients;\n    const newClientIds = new Set(clients.map(client => client.id));\n    clients.forEach(client => {\n      if (client.id !== this.clientId && !this.remoteConnections.get(client.id)) {\n        this.createConnection(client.id);\n      }\n    });\n    const remoteConnections = this.remoteConnections.getData();\n    Object.keys(remoteConnections).forEach((key) => {\n      if (!newClientIds.has(key)) {\n        this.handleClientDisconnect(key);\n      }\n    });\n  }\n\n  handleClientDisconnect(clientId) {\n    if (this.remoteConnections.get(clientId)) {\n      this.remoteConnections.get(clientId).close();\n      this.remoteConnections.delete(clientId);\n    }\n    if (this.sendChannels.get(clientId)) {\n      this.sendChannels.get(clientId).close();\n      this.sendChannels.delete(clientId);\n    }\n    if (this.receiveChannels.get(clientId)) {\n      this.receiveChannels.get(clientId).close();\n      this.receiveChannels.delete(clientId);\n    }\n    this.clientInfo.delete(clientId);\n  }\n\n  handleClientReconnect(message) {\n    const newClientId = message.id;\n\n    if (this.clientId === newClientId) {\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} reconnected with same ID`);\n      }\n      return;\n    }\n    this.handleClientDisconnect(newClientId);\n    this.clientId = newClientId;\n  }\n\n  createConnection(targetClient) {\n    if (targetClient === this.clientId || this.remoteConnections.get(targetClient)) {\n      return;\n    }\n\n    const servers = {\n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n    };\n\n    const localConnection = new RTCPeerConnection(servers, this.pcConstraint);\n    const sendChannel = localConnection.createDataChannel('hamstersjs', this.dataConstraint);\n\n    localConnection.onicecandidate = (e) => {\n      if (e.candidate) {\n        this.ws.send(JSON.stringify({ \n          type: 'candidate', \n          target: targetClient, \n          from: this.clientId,\n          logicalCores: this.hamsters.maxThreads,\n          userAgent: navigator.userAgent,\n          candidate: e.candidate\n        }));\n      }\n    };\n\n    sendChannel.onopen = () => {\n      this.onSendChannelStateChange(targetClient);\n    };\n\n    sendChannel.onclose = () => {\n      this.onSendChannelStateChange(targetClient);\n    };\n\n    sendChannel.onmessage = (event) => {\n      this.onReceiveMessageCallback(targetClient, event.data);\n    };\n\n    localConnection.ondatachannel = (event) => {\n      this.receiveChannelCallback(event, targetClient);\n    };\n\n    this.remoteConnections.set(targetClient, localConnection);\n    this.sendChannels.set(targetClient, sendChannel);\n    this.receiveChannels.set(targetClient, null);\n\n    localConnection.createOffer().then(desc => {\n      localConnection.setLocalDescription(desc);\n      this.ws.send(JSON.stringify({ type: 'offer', target: targetClient, offer: desc }));\n    }).catch(this.onCreateSessionDescriptionError.bind(this));\n  }\n\n  handleOffer(data) {\n    const targetClient = data.from;\n\n    if (!this.remoteConnections.get(targetClient)) {\n      const servers = {\n        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n      };\n\n      const remoteConnection = new RTCPeerConnection(servers, this.pcConstraint);\n\n      remoteConnection.onicecandidate = (e) => {\n        if (e.candidate) {\n          this.ws.send(JSON.stringify({ type: 'candidate', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, candidate: e.candidate }));\n        }\n      };\n\n      remoteConnection.ondatachannel = (event) => {\n        this.receiveChannelCallback(event, targetClient);\n      };\n\n      const sendChannel = remoteConnection.createDataChannel('hamstersjs', this.dataConstraint);\n      \n      sendChannel.onopen = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onclose = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onmessage = (event) => {\n        this.onReceiveMessageCallback(targetClient, event.data);\n      };\n\n      remoteConnection.setRemoteDescription(new RTCSessionDescription(data.offer)).then(() => {\n        return remoteConnection.createAnswer();\n      }).then(desc => {\n        remoteConnection.setLocalDescription(desc);\n        this.ws.send(JSON.stringify({ type: 'answer', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, answer: desc }));\n      }).catch(this.onCreateSessionDescriptionError.bind(this));\n\n      this.remoteConnections.set(targetClient, remoteConnection);\n      this.sendChannels.set(targetClient, sendChannel);\n    }\n  }\n\n  storeClientConnectionInfo(data) {\n    const client = {\n      logicalCores: data.logicalCores,\n      userAgent: data.userAgent,\n    };\n    this.clientInfo.set(data.from, client);\n  }\n\n  handleAnswer(data) {\n    this.storeClientConnectionInfo(data);\n    const connection = this.remoteConnections.get(data.from);\n    connection.setRemoteDescription(new RTCSessionDescription(data.answer));\n  }\n\n  handleCandidate(data) {\n    let connection = this.remoteConnections.get(data.from);\n    if(!connection) {\n      this.storeClientConnectionInfo(data);\n      connection = this.remoteConnections.get(data.from);\n    }\n    connection.addIceCandidate(new RTCIceCandidate(data.candidate)).catch(this.onAddIceCandidateError.bind(this));\n  }\n\n  distributeTask(task, hamsterFood, resolve, reject) {\n    const targetClient = this.getDistributedClient();\n    if (!targetClient) {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} no target client found.`);\n      }\n      reject('No target client found.');\n      return;\n    }\n\n    const messageId = this.generateUniqueId();\n    const preparedList = this.hamsters.data.getTransferList(hamsterFood, task);\n    const distributedSubTask = {\n      hamsterFood: preparedList.hamsterFood,\n      index: hamsterFood.index,\n      task: preparedList.task,\n      messageId: messageId,\n      type: 'task-request'\n    };\n\n    this.pendingPromises.set(messageId, { resolve, reject });\n    \n    if (preparedList.transferCount > 0) {\n      this.pendingTransfers.set(messageId, preparedList.transferList);\n    }\n    this.sendData({ targetClient, data: distributedSubTask });\n  }\n\n  getDistributedClient() {\n    const sendChannelKeys = Object.keys(this.sendChannels.getData());\n    if (sendChannelKeys.length === 0) {\n      if (this.hamsters.habitat.debug) {\n        console.warn(`Hamsters.js ${this.hamsters.version} no send channels available.`);\n      }\n      return null;\n    }\n\n    let minLatency = Infinity;\n    let targetClient = null;\n\n    sendChannelKeys.forEach(clientId => {\n      const channel = this.sendChannels.get(clientId);\n      const client = this.clientInfo.get(clientId);\n      if (channel.readyState === 'open' && client && client.latency < minLatency) {\n        minLatency = client.latency;\n        targetClient = clientId;\n      }\n    });\n\n    return targetClient;\n  }\n\n  initializeDistributedTask(targetClient, task, messageId) {\n    const awaitingTransfers = {};\n    \n    Object.keys(task.hamsterFood).forEach(key => {\n      if (task.hamsterFood[key] === 'Awaiting Transfer') {\n        awaitingTransfers[key] = 'Awaiting Transfer';\n      }\n    });\n\n    if (Object.keys(awaitingTransfers).length > 0) {\n      this.awaitingTransfers.set(targetClient, { transfers: awaitingTransfers, messageId });\n      this.requestNextTransfer(targetClient, messageId);\n    } else {\n      this.runDistributedTask(task, targetClient);\n    }\n  }\n\n  requestNextTransfer(targetClient, messageId) {\n    if (this.lastRequestedTransfers.get(targetClient)) {\n      // A transfer is already in progress for this client\n      return;\n    }\n\n    const awaitingTransfersData = this.awaitingTransfers.get(targetClient);\n    if (!awaitingTransfersData) return;\n\n    const { transfers, messageId: awaitingMessageId} = awaitingTransfersData;\n    const keys = Object.keys(transfers);\n\n    if (keys.length > 0 && messageId === awaitingMessageId) {\n      const nextKey = keys.find(key => transfers[key] === 'Awaiting Transfer');\n      if (nextKey) {\n        this.requestDataTransfer(nextKey, messageId, targetClient);\n      }\n    }\n  }\n\n  requestDataTransfer(key, messageId, targetClient) {\n    const message = {\n      type: 'transfer-request',\n      key: key,\n      messageId: messageId\n    };\n    this.lastRequestedTransfers.set(targetClient, {key, messageId});\n    this.sendData({targetClient, data: message});\n\n    // Update the status of the transfer item\n    const awaitingTransfers = this.awaitingTransfers.get(targetClient) || {transfers: {}};\n    awaitingTransfers.transfers[key] = 'Requested Transfer';\n    this.awaitingTransfers.set(targetClient, awaitingTransfers);\n\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} requested transfer for ${key} from ${targetClient}`);\n    }\n  }\n\n  handleTransferResponse(targetClient, data) {\n    const lastRequestedTransfer = this.lastRequestedTransfers.get(targetClient);\n    \n    if (!lastRequestedTransfer) {\n      console.error(`Hamsters.js ${this.hamsters.version} received transfer response but no transfer was requested for ${targetClient}`);\n      return;\n    }\n\n    const key = lastRequestedTransfer.key;\n    const messageId = lastRequestedTransfer.messageId || null;\n    const responseId = lastRequestedTransfer.responseId || null;\n    const pendingTask = this.pendingTasks.get(targetClient);\n    const awaitingTransfers = this.awaitingTransfers.get(targetClient);\n\n    const isRequestedTransfer = awaitingTransfers && awaitingTransfers.transfers[key] === 'Requested Transfer';\n\n    if (pendingTask && isRequestedTransfer) {\n      // Convert ArrayBuffer back to the appropriate data type\n      pendingTask.hamsterFood[key] = this.convertFromArrayBuffer(data, key);\n\n      // Remove the transferred item from awaitingTransfers\n      delete awaitingTransfers.transfers[key];\n\n      if (Object.keys(awaitingTransfers.transfers).length === 0) {\n        // All transfers complete\n        this.awaitingTransfers.delete(targetClient);\n        this.pendingTasks.delete(targetClient);\n        this.lastRequestedTransfers.delete(targetClient);\n        this.runDistributedTask(pendingTask, targetClient);\n      } else {\n        // More transfers needed\n        this.awaitingTransfers.set(targetClient, awaitingTransfers);\n        this.lastRequestedTransfers.delete(targetClient);\n        this.requestNextTransfer(targetClient);\n      }\n\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} processed transfer response for ${key} from ${targetClient}`);\n      }\n    } else if (key === 'output') {\n      this.handleTaskResponse(targetClient, { output: this.convertFromArrayBuffer(data), messageId, responseId });\n    } else {\n      console.error(`Hamsters.js ${this.hamsters.version} received unexpected transfer response for ${targetClient}`);\n    }\n  }\n\n  measureLatency(targetClient) {\n    const startTime = performance.now();\n    this.sendPing(targetClient, startTime);\n  }\n\n  sendPing(targetClient, startTime) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'ping', startTime }));\n    }\n  }\n\n  handlePing(targetClient, startTime) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'pong', startTime }));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent pong to ${targetClient}`);\n      }\n    }\n  }\n\n  handlePong(targetClient, startTime) {\n    const latency = performance.now() - startTime;\n    const clientInfo = this.clientInfo.get(targetClient) || {};\n    clientInfo.latency = latency;\n    this.clientInfo.set(targetClient, clientInfo);\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} received pong from ${targetClient} with latency: ${latency.toFixed(2)}ms`);\n    }\n  }\n\n  runDistributedTask(task, targetClient) {\n    this.hamsters.pool.runDistributedTask(task, targetClient);\n  }\n\n  sendDataResponse(data) {\n    const { targetClient, messageId, output } = data;\n    this.initializeOutputTransfer(targetClient, output, messageId);\n  }\n\n  initializeOutputTransfer(targetClient, output, messageId) {\n    const responseId = this.generateUniqueId();\n    this.pendingOutputs.set(responseId, { targetClient, output, messageId });\n\n    const initialResponse = {\n      type: 'task-response',\n      messageId,\n      responseId,\n      awaitingTransfers: true\n    };\n\n    this.sendData({ targetClient, data: initialResponse });\n\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} initialized output transfer for ${targetClient} (responseId: ${responseId})`);\n    }\n  }\n\n  handleOutputTransferRequest(targetClient, message) {\n    const { responseId } = message;\n    const pendingOutput = this.pendingOutputs.get(responseId);\n\n    if (pendingOutput && pendingOutput.targetClient === targetClient) {\n      const arrayBuffer = this.getArrayBuffer(pendingOutput.output);\n      this.sendBlobData({ targetClient, data: arrayBuffer, dataType: 'arrayBuffer' });\n      this.pendingOutputs.delete(responseId);\n\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent output transfer for ${targetClient} (responseId: ${responseId})`);\n      }\n    } else {\n      console.error(`Hamsters.js ${this.hamsters.version} received unexpected output transfer request for ${targetClient}`);\n    }\n  }\n\n  getArrayBuffer(data) {\n    if (ArrayBuffer.isView(data)) {\n      return data.buffer;\n    }\n    if (data instanceof ArrayBuffer) {\n      return data;\n    }\n    return new Uint8Array(data).buffer\n  }\n\n  convertFromArrayBuffer(buffer, key) {\n    return new Uint8Array(buffer);\n  }\n\n  sendData({ targetClient, data }) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify(data));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent data to: ${targetClient}`);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: ${targetClient}`);\n      }\n    }\n  }\n\n  sendBlobData({targetClient, data, dataType}) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(data);\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent blob data to: ${targetClient}`);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: ${targetClient}`);\n      }\n    }\n  }\n\n  onReceiveMessageCallback(targetClient, data) {\n    if (data instanceof ArrayBuffer) {\n      // This is a transfer response\n      this.handleTransferResponse(targetClient, data);\n    } else if (typeof data === 'string') {\n      let incomingMessage;\n      try {\n        incomingMessage = JSON.parse(data);\n        this.handleIncomingMessage(targetClient, incomingMessage);\n      } catch (error) {\n        console.error(`Hamsters.js ${this.hamsters.version} error parsing message:`, error);\n      }\n    } else {\n      console.log(\"Received unexpected data type:\", typeof data);\n    }\n  }\n\n  handleIncomingMessage(targetClient, incomingMessage) {\n    const handlers = {\n      'transfer-request': this.fulfillTransferRequest.bind(this),\n      'task-request': this.handleTaskRequest.bind(this),\n      'transfer-response': this.processTransferResponse.bind(this),\n      'output-transfer-request': this.handleOutputTransferRequest.bind(this),\n      'task-response': this.handleTaskResponse.bind(this),\n      'ping': (client, message) => this.handlePing(client, message.startTime),\n      'pong': (client, message) => this.handlePong(client, message.startTime)\n    };\n\n    const handler = handlers[incomingMessage.type];\n    if (handler) {\n      handler(targetClient, incomingMessage);\n    } else {\n      console.log(`Hamsters.js ${this.hamsters.version} unknown message received from: ${targetClient}`);\n    }\n  }\n\n  handleTaskRequest(targetClient, incomingMessage) {\n    const awaitingTransfers = Object.values(incomingMessage.hamsterFood).some(value => value === 'Awaiting Transfer');\n    if (awaitingTransfers) {\n      this.pendingTasks.set(targetClient, incomingMessage);\n      this.initializeDistributedTask(targetClient, incomingMessage, incomingMessage.messageId);\n    } else {\n      this.runDistributedTask(incomingMessage, targetClient);\n    }\n  }\n\n  handleTaskResponse(targetClient, message) {\n    const { messageId, responseId, awaitingTransfers } = message;\n    if (awaitingTransfers) {\n      this.requestOutputTransfer(targetClient, responseId, messageId);\n    } else {\n      // If no transfers are needed, resolve the promise immediately\n      const pendingPromise = this.pendingPromises.get(messageId);\n      if (pendingPromise) {\n        pendingPromise.resolve(message.output);\n        this.pendingPromises.delete(messageId);\n      }\n    }\n  }\n\n  requestOutputTransfer(targetClient, responseId, messageId) {\n    const outputTransferRequest = {\n      type: 'output-transfer-request',\n      key: 'output',\n      responseId,\n      messageId\n    };\n    this.lastRequestedTransfers.set(targetClient, outputTransferRequest);\n    this.sendData({ targetClient, data: outputTransferRequest });\n  }\n\n  requestDataTransfer(key, messageId, targetClient) {\n    const message = {\n      type: 'transfer-request',\n      key: key,\n      messageId: messageId\n    };\n    this.lastRequestedTransfers.set(targetClient, { key, messageId });\n    this.sendData({targetClient, data: message});\n\n    // Update the status of the transfer item\n    const awaitingTransfersData = this.awaitingTransfers.get(targetClient);\n    if (awaitingTransfersData && awaitingTransfersData.messageId === messageId) {\n      awaitingTransfersData.transfers[key] = 'Requested Transfer';\n      this.awaitingTransfers.set(targetClient, awaitingTransfersData);\n    }\n\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} requested transfer for ${key} from ${targetClient} (messageId: ${messageId})`);\n    }\n  }\n\n  fulfillTransferRequest(targetClient, incomingMessage) {\n    const { key, messageId, responseId } = incomingMessage;\n    const transferId = responseId || messageId;\n    const pendingTransferItems = this.pendingTransfers.get(transferId);\n\n    if (pendingTransferItems && pendingTransferItems[key]) {\n      const data = pendingTransferItems[key];\n      \n      // Get the ArrayBuffer efficiently based on data type\n      const arrayBuffer = this.getArrayBuffer(data);\n\n      // Send the data as ArrayBuffer\n      this.sendBlobData({ targetClient, data: arrayBuffer, dataType: 'arrayBuffer' });\n\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent transfer response for ${key} (${responseId ? 'output' : 'input'}) to ${targetClient} (messageId: ${messageId})`);\n      }\n\n      // Clean up after sending\n      delete pendingTransferItems[key];\n      if (Object.keys(pendingTransferItems).length === 0) {\n        this.pendingTransfers.delete(transferId);\n      }\n    } else {\n      console.error(`No pending transfer found for ${key} (${responseId ? 'output' : 'input'}) for ${targetClient} (messageId: ${messageId})`);\n    }\n  }\n\n  processTransferResponse(targetClient, incomingMessage) {\n    const { key, data, messageId, responseId } = incomingMessage;\n    \n    if (responseId) {\n      // This is an output transfer\n      const pendingPromise = this.pendingPromises.get(messageId);\n      if (pendingPromise) {\n        pendingPromise.resolve(data);\n        this.pendingPromises.delete(messageId);\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending promise found for messageId: ${messageId}`);\n      }\n    } else {\n      // This is an input transfer\n      const pendingTask = this.pendingTasks.get(targetClient);\n      if (pendingTask && pendingTask.messageId === messageId) {\n        pendingTask.hamsterFood[key] = data;\n        \n        const stillAwaiting = Object.values(pendingTask.hamsterFood).some(value => value === 'Awaiting Transfer');\n        \n        if (!stillAwaiting) {\n          this.pendingTasks.delete(targetClient);\n          this.hamsters.pool.runDistributedTask(pendingTask, targetClient);\n        }\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending task found for targetClient: ${targetClient} and messageId: ${messageId}`);\n      }\n    }\n\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} processed transfer response for ${key} from ${targetClient}`);\n    }\n  }\n\n  receiveChannelCallback(event, targetClient) {\n    const receiveChannel = event.channel;\n\n    receiveChannel.onmessage = (event) => {\n      this.onReceiveMessageCallback(targetClient, event.data);\n    };\n\n    receiveChannel.onopen = () => {\n      this.onReceiveChannelStateChange(targetClient);\n    };\n\n    receiveChannel.onclose = () => {\n      this.onReceiveChannelStateChange(targetClient);\n    };\n\n    this.receiveChannels.set(targetClient, receiveChannel);\n  }\n\n  onSendChannelStateChange(targetClient) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      this.measureLatency(targetClient);\n    }\n    if (sendChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} send channel state changed for ${targetClient}: ${sendChannel.readyState}`);\n    }\n  }\n\n  onReceiveChannelStateChange(targetClient) {\n    const receiveChannel = this.receiveChannels.get(targetClient);\n    if (receiveChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} receive channel state changed for ${targetClient}: ${receiveChannel.readyState}`);\n    }\n  }\n\n  generateUniqueId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  onCreateSessionDescriptionError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to create session description: ${error}`);\n    }\n  }\n\n  onAddIceCandidateError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to add ICE candidate: ${error}`);\n    }\n  }\n}\n\nexport default Distribute;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Observable {\n  constructor(initialData = {}) {\n    this.data = Array.isArray(initialData) ? [...initialData] : { ...initialData };\n    this.events = {};\n  }\n\n  // Allow listeners to register for specific events\n  on(event, callback) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  }\n\n  // Notify listeners about the event\n  emit(event, ...args) {\n    if (this.events[event]) {\n      this.events[event].forEach(callback => callback(...args));\n    }\n  }\n\n  set(key, value) {\n    if (typeof key === 'string') {\n        const keys = key.split('.');\n        let current = this.data;\n        for (let i = 0; i < keys.length - 1; i++) {\n            current = current[keys[i]];\n        }\n        current[keys[keys.length - 1]] = value;\n    } else if (typeof key === 'object') {\n      this.data[key] = value;\n    }\n    this.emit('change', this.data);\n  }\n\n  setAll(data) {\n    this.data = data;\n  }\n\n  get(key) {\n    return this.data[key];\n  }\n\n  push(...items) {\n    this.data.push(...items);\n    this.emit('change', this.data);\n  }\n\n  pop() {\n    const item = this.data.pop();\n    this.emit('change', this.data);\n    return item;\n  }\n\n  shift() {\n    const item = this.data.shift();\n    this.emit('change', this.data);\n    return item;\n  }\n\n  splice(start, deleteCount, ...items) {\n    const result = this.data.splice(start, deleteCount, ...items);\n    this.emit('change', this.data);\n    return result;\n  }\n\n  indexOf(item) {\n    return this.data.indexOf(item);\n  }\n\n  length() {\n    return this.data.length;\n  }\n\n  delete(property) {\n    if (!Array.isArray(this.data)) {\n      delete this.data[property];\n      this.emit('change', this.data);\n    }\n  }\n\n  getData() {\n    return this.data;\n  }\n}\n\nexport default Observable;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n//Core Functionality\nimport Habitat from './core/habitat';\nimport Pool from './core/pool';\nimport Data from './core/data';\nimport Task from './core/task';\n\n//Worker Scaffolds\nimport Legacy from './scaffold/legacy';\nimport Regular from './scaffold/regular';\nimport Shared from './scaffold/shared';\n\n//Features\nimport Memoize from './feature/memoize';\nimport Distribute from './feature/distribute';\nimport Observable from './feature/observable';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.version = '5.6.3';\n    this.run = this.hamstersRun.bind(this);\n    this.promise = this.hamstersPromise.bind(this);\n    this.init = this.initializeLibrary.bind(this);\n    this.data = {};\n    this.pool = {};\n    this.scaffold = {};\n    this.habitat = {};\n    this.memoize = {};\n  }\n\n  /**\n  * @function inititializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    const start = performance.now();\n    this.observable = Observable;\n    this.data = new Data(this);\n    this.pool = new Pool(this);\n    this.scaffold = {\n      legacy: new Legacy(),\n      regular: new Regular(),\n      shared: new Shared()\n    };\n    this.habitat = new Habitat(this);\n    this.memoize = new Memoize(this, 100); //Set a maximum of 100 memoized function results, LRU cache\n    this.distribute = new Distribute(this);\n    this.processStartOptions(startOptions);\n    \n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      this.pool.spawnHamsters(this.habitat.maxThreads);\n    }\n    this.maxThreads = this.habitat.maxThreads;\n\n    if(this.habitat.relay) {\n      console.info(`Hamsters.js ${this.version} establishing connection to relay`);\n      this.distribute.establishConnection();\n    }\n    const end = performance.now();\n    console.info(`Hamsters.js ${this.version} initialized using up to ${this.habitat.maxThreads} threads in ${end - start}ms`);\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      for (const key of Object.keys(startOptions)) {\n        if (this.habitat.keys.includes(key.toLowerCase())) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          if(key === 'scaffold') {\n            this.scaffold.custom = startOptions[key];\n          } else {\n            this[key] = startOptions[key];\n          }\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    let forceLegacyMode = (typeof startOptions !== 'undefined' && typeof startOptions.legacy !== 'undefined');\n    if (forceLegacyMode) {\n      forceLegacyMode = startOptions.legacy;\n    }\n    if (typeof this.habitat.Worker === 'function' && !forceLegacyMode) {\n      this.habitat.legacy = this.habitat.isIE;\n    }\n  }\n\n  /**\n   * @async\n   * @function scheduleTask - Schedules a new function to be processed by the library\n   * @param {object} task - Provided library execution options\n   * @param {function} resolve - Parent function promise resolve method\n   * @param {function} reject - Parent function promise reject method\n   * @return {Promise} Promise object on completion\n   */\n  scheduleTask(task, resolve, reject) {\n    if (task.input.memoize) {\n      // Pass the task object to the memoized function\n      const memoizedFunction = this.memoize.memoize(() => this.pool.scheduleTask(task));\n      return memoizedFunction(task).then(resolve).catch(reject);\n    }\n    return this.pool.scheduleTask(task).then(resolve).catch(reject);\n  }\n\n  /**\n   * @async\n   * @function hamstersPromise - Calls library functionality using async promises\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   * @return {Promise} Promise resolving with results from functionToRun\n   */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      this.scheduleTask(new Task(this, params, functionToRun), resolve, reject);\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    this.scheduleTask(new Task(this, params, functionToRun), onSuccess, onError);\n  }\n}\n\nexport default new hamstersjs();\n"],"names":["root","factory","exports","module","define","amd","this","Legacy","constructor","hamsters","scaffold","params","resolve","reject","rtn","data","dataType","habitat","reactNative","self","node","isIE","eval","hamstersJob","Regular","handleDataType","sharedArray","typedArrayFromBuffer","getTransferableObjects","buffer","types","Uint32Array","Uint16Array","Uint8Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","returnResponse","buffers","length","postMessage","obj","transferableObjects","Set","typedArrayTypes","globalContext","window","allTypes","prop","hasOwnProperty","type","includes","add","Array","from","onmessage","message","index","sharedBuffer","bind","Shared","addEventListener","incomingConnection","port","ports","start","incomingMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","e","prototype","call","Habitat","debug","importScripts","relay","memoize","persistence","browser","isBrowser","webWorker","isWebWorker","isNode","isReactNative","shell","isShell","transferable","supportsTransferableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isInternetExplorer","selectHamsterWheel","sharedWorker","locateSharedWorkerObject","locateBlobBuilder","findAvailableBlobBuilder","legacy","isLegacyEnvironment","Worker","locateWorkerObject","maxThreads","determineGlobalThreads","keys","getHabitatKeys","max","navigator","hardwareConcurrency","isFirefox","os","cpus","userAgent","toLowerCase","indexOf","SharedWorker","process","product","isLegacy","supportsSharedWorkers","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","createDataBlob","textContent","Blob","blob","append","getBlob","generateWorkerBlob","workerLogic","URL","createObjectURL","generateWorkerString","toString","SharedArrayBuffer","Proxy","custom","encodeURIComponent","regular","Pool","threads","observable","running","pending","fetchHamster","getAvailableThread","addWorkToPending","hamsterFood","task","scheduler","metrics","count","enqueued_at","Date","now","push","processQueuedItem","hamster","item","id","dequeued_at","runTask","threadId","spawnHamster","keepTrackOfThread","started_at","workers","spawnHamsters","prepareMeal","subTaskId","array","input","getSubArrayFromIndex","excludedKeys","has","runDistributedTask","targetClient","handleResponse","distribute","returnDistributedOutput","messageId","pool","trainer","trainHamster","feedHamster","hamsterWheel","distributeTask","processDistributedReturn","returnOutputAndRemoveTask","output","processDataType","aggregate","aggregateThreadOutputs","sort","sortOutput","completed_at","console","info","removeFromRunning","splice","processReturn","response","messageData","JSON","parse","mixedOutput","addThreadOutputWithIndex","setOnMessage","onThreadResponse","on","onmessageerror","onerror","terminate","queueHamster","shift","scheduleTask","i","Promise","indexes","Data","getSubArrayUsingIndex","getSubArrayIndexes","calculateIndexes","sortTaskOutput","prepareFunction","prepareWorkerTask","messageWorkerThread","getBufferSize","createSharedBuffer","getDataType","setupSharedArrayBuffer","stringify","typedArrayBuffers","otherTransferables","global","concat","functionBody","functionString","String","isAsync","trim","startsWith","substring","lastIndexOf","arr","order","a","b","reverse","byteLength","set","reduce","len","bufferLength","offset","outputLength","n","end","segmentSize","Math","floor","startIndex","endIndex","prepareDistributedTask","forEach","isArray","getTransferList","transferList","transferCount","inputArray","slice","Task","functionToRun","transfers","request","send","setupLegacyTask","setupModernTask","setupDebugMetrics","created_at","setupThreadMetrics","threadMetrics","NodeStore","maxSize","cache","Map","value","delete","size","oldestKey","next","clear","WebStore","dbName","storeName","db","initDB","indexedDB","open","event","error","target","onupgradeneeded","result","objectStoreNames","contains","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","transaction","updateTimestamp","then","catch","checkSize","put","timestamp","countRequest","evictOldest","openCursor","cursor","Memoize","store","func","generateTaskKey","cachedResult","applyFunc","hashCode","str","chr","hash","charCodeAt","args","apply","Distribute","localConnection","remoteConnections","clientInfo","sendChannels","receiveChannels","pcConstraint","dataConstraint","ws","clientId","pendingPromises","pendingTasks","pendingTransfers","awaitingTransfers","lastRequestedTransfers","pendingOutputs","sendDataResponse","establishConnection","initWebSocket","lastHeartbeat","heartBeatInterval","heartBeatTimeout","startPeriodicLatencyChecks","WebSocket","onopen","version","logicalCores","sendHeartBeat","handleWebSocketMessage","onclose","handler","handleClientReconnect","updateClientList","handleOffer","handleAnswer","handleCandidate","interval","setInterval","clients","getData","measureLatency","arguments","clientListMessage","newClientIds","map","client","createConnection","handleClientDisconnect","close","newClientId","log","RTCPeerConnection","iceServers","urls","sendChannel","createDataChannel","onicecandidate","candidate","onSendChannelStateChange","onReceiveMessageCallback","ondatachannel","receiveChannelCallback","createOffer","desc","setLocalDescription","offer","onCreateSessionDescriptionError","remoteConnection","setRemoteDescription","RTCSessionDescription","createAnswer","answer","storeClientConnectionInfo","connection","addIceCandidate","RTCIceCandidate","onAddIceCandidateError","getDistributedClient","generateUniqueId","preparedList","distributedSubTask","sendData","sendChannelKeys","warn","minLatency","Infinity","channel","readyState","latency","initializeDistributedTask","requestNextTransfer","awaitingTransfersData","awaitingMessageId","nextKey","find","requestDataTransfer","handleTransferResponse","lastRequestedTransfer","responseId","pendingTask","isRequestedTransfer","convertFromArrayBuffer","handleTaskResponse","startTime","performance","sendPing","handlePing","handlePong","toFixed","initializeOutputTransfer","initialResponse","handleOutputTransferRequest","pendingOutput","arrayBuffer","getArrayBuffer","sendBlobData","ArrayBuffer","isView","_ref","_ref2","handleIncomingMessage","fulfillTransferRequest","handleTaskRequest","processTransferResponse","ping","pong","values","some","requestOutputTransfer","pendingPromise","outputTransferRequest","transferId","pendingTransferItems","receiveChannel","onReceiveChannelStateChange","random","substr","Observable","initialData","events","callback","emit","_len","_key","split","current","setAll","pop","deleteCount","_len2","items","_key2","property","hamstersjs","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","shared","processStartOptions","forceLegacyMode","memoizedFunction","onSuccess","onError"],"sourceRoot":""}