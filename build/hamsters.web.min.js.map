{"version":3,"file":"hamsters.web.min.js","mappings":"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","sources":["webpack://hamsters/webpack/universalModuleDefinition","webpack://hamsters/./scaffold/legacy.js","webpack://hamsters/./scaffold/regular.js","webpack://hamsters/./scaffold/shared.js","webpack://hamsters/webpack/bootstrap","webpack://hamsters/webpack/runtime/define property getters","webpack://hamsters/webpack/runtime/global","webpack://hamsters/webpack/runtime/hasOwnProperty shorthand","webpack://hamsters/./core/habitat.js","webpack://hamsters/./core/pool.js","webpack://hamsters/./core/data.js","webpack://hamsters/./core/task.js","webpack://hamsters/./feature/stores/NodeStore.js","webpack://hamsters/./feature/stores/WebStore.js","webpack://hamsters/./feature/memoize.js","webpack://hamsters/./feature/distribute.js","webpack://hamsters/./hamsters.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hamsters\"] = factory();\n\telse\n\t\troot[\"hamsters\"] = factory();\n})(this, () => {\nreturn ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Legacy {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor(hamsters) {\n      this.hamsters = hamsters;\n      this.scaffold = this.legacyScaffold.bind(this);\n    }\n   \n    /**\n    * @function legacyScaffold - Provides library functionality for legacy devices\n    */\n    legacyScaffold(params, resolve, reject) {\n      var rtn = {\n        data: [],\n        dataType: (typeof params.dataType !== \"undefined\" ? params.dataType : null)\n      };\n      if(this.hamsters.habitat.reactNative) {\n        self.rtn = rtn;\n      }\n      if(this.hamsters.habitat.node || this.hamsters.habitat.isIE) {\n        eval(params.hamstersJob);\n      } else {\n        params.hamstersJob();\n      }\n      resolve(rtn.data);\n    }\n  }\n  \n  export default Legacy;\n  ","class Regular {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n        this.scaffold = function() {\n            self.params = {};\n            self.rtn = {};\n\n            self.onmessage = function (message) {\n                this.params = message.data;\n                this.rtn = {\n                    data: [],\n                    dataType: (typeof this.params.dataType !== 'undefined' ? this.params.dataType : null),\n                    index: this.params.index\n                };\n                if (this.params.sharedBuffer) {\n                    this.params.sharedArray = typedArrayFromBuffer(this.params.dataType, this.params.sharedBuffer);\n                }\n                eval(this.params.hamstersJob);\n                const buffers = handleDataType(this.rtn);\n                returnResponse(this.rtn, buffers);\n            }.bind(this);\n\n            function handleDataType(rtn) {\n                if (this.params.sharedArray) {\n                    // Do nothing here, we don't need to return a buffer rtn.data is useless here\n                } else if (this.params.dataType) {\n                    rtn.data = typedArrayFromBuffer(rtn.dataType, rtn.data);\n                }\n                return getTransferableObjects(rtn); // Return transferable objects\n            }\n\n            function typedArrayFromBuffer(dataType, buffer) {\n                const types = {\n                    'Uint32': Uint32Array,\n                    'Uint16': Uint16Array,\n                    'Uint8': Uint8Array,\n                    'Uint8clamped': Uint8ClampedArray,\n                    'Int32': Int32Array,\n                    'Int16': Int16Array,\n                    'Int8': Int8Array,\n                    'Float32': Float32Array,\n                    'Float64': Float64Array\n                };\n                return types[dataType] ? new types[dataType](buffer) : buffer;\n            }\n\n            function returnResponse(rtn, buffers) {\n                if (buffers && buffers.length > 0) {\n                    postMessage(rtn, buffers);  // PostMessage with transferable objects\n                } else {\n                    postMessage(rtn);  // PostMessage without transferable objects\n                }\n            }\n\n            function getTransferableObjects(obj) {\n                const transferableObjects = new Set();\n                const typedArrayTypes = [\n                    'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array',\n                    'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n                ];\n                const otherTransferables = [\n                    'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n                ];\n\n                const globalContext = typeof self !== 'undefined' ? self : window;\n\n                const allTypes = [...typedArrayTypes, ...otherTransferables];\n\n                for (const prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        for (const type of allTypes) {\n                            if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n                                if (typedArrayTypes.includes(type)) {\n                                    transferableObjects.add(obj[prop].buffer);\n                                } else {\n                                    transferableObjects.add(obj[prop]);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return Array.from(transferableObjects);\n            }\n        }\n    }\n}\n\nexport default Regular;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Shared {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n      this.scaffold = this.workerScaffold;\n    }\n  \n    /**\n    * @function workerScaffold - Provides worker body for library functionality when used within a worker [threads inside threads]\n    */\n    workerScaffold() {\n      self.params = {};\n      self.rtn = {};\n  \n      addEventListener('connect', (incomingConnection) => {\n        var port = incomingConnection.ports[0];\n        port.start();\n        port.addEventListener('message', (incomingMessage) => {\n          this.params = incomingMessage.data;\n          this.rtn = {\n            data: [],\n            dataType: this.params.dataType\n          };\n          eval(\"(\" + this.params.hamstersJob + \")\")();\n          port.postMessage(this.rtn);\n        }, false);\n      }, false);\n    }\n  }\n  \n  export default Shared;\n  ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.debug = false;\n    this.importScripts = null;\n    this.relay = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferable = this.supportsTransferableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE = this.isInternetExplorer();\n    this.selectHamsterWheel = this.selectHamsterWheel.bind(this);\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.locateBlobBuilder = this.findAvailableBlobBuilder();\n    this.legacy = this.isLegacyEnvironment();\n    this.Worker = this.locateWorkerObject();\n    this.maxThreads = this.determineGlobalThreads();\n    this.keys = this.getHabitatKeys();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(this.browser && typeof navigator.hardwareConcurrency !== \"undefined\") {\n      max = navigator.hardwareConcurrency;\n      if(this.isFirefox()) {\n        max = (max > 20 ? 20 : max);\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function isFirefox - Detect firefox browser\n  */\n  isFirefox() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return (typeof Worker !== 'undefined' ? Worker : false);\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return (typeof SharedWorker !== 'undefined' ? SharedWorker : false);\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return (typeof window === \"object\");\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.indexOf(\"MSIE \") !== -1 || navigator.userAgent.indexOf(\"Trident/\") !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return (typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser);\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a web worker\n  */\n  isWebWorker() {\n    return (typeof importScripts === \"function\" && !this.isReactNative());\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is React Native\n  */\n  isReactNative() {\n    return (typeof navigator !== \"undefined\" && typeof navigator.product !== \"undefined\" && navigator.product === \"ReactNative\");\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return ((typeof navigator === \"undefined\") && !this.isNode() && !this.isWebWorker() && !this.isReactNative());\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = !!!this.Worker;\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy;\n  }\n\n  /**\n  * @function supportsSharedWorkers - Detects if execution environment supports SharedWorkers\n  */\n  supportsSharedWorkers() {\n    let supports = false;\n    try {\n      let workerBlob = this.generateWorkerBlob(this.selectHamsterWheel());\n      let SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n      supports = true;\n    } catch (e) {\n      supports = false;\n    }\n    return supports;\n  }\n\n  /**\n  * @function findAvailableBlobBuilder - Attempts to locate a data blob builder, with vendor prefixes\n  */\n  findAvailableBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return 'Environment does not support data blobs!';\n  }\n\n  /**\n  * @function createDataBlob - Creates a new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates a blob URI for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    return URL.createObjectURL(this.createDataBlob(`(${workerLogic.toString()})();`));\n  }\n\n  /**\n  * @function supportsTransferableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferableObjects() {\n    return (typeof Uint8Array !== 'undefined');\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports SharedArrayBuffers\n  */\n  supportsAtomicOperations() {\n    return (typeof SharedArrayBuffer !== 'undefined');\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports Proxy objects\n  */\n  supportsProxies() {\n    return (typeof Proxy !== 'undefined');\n  }\n\n  /**\n  * @function selectHamsterWheel - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.isIE) {\n      return this.hamsters.scaffold.legacy.scaffold;\n    }\n    if(this.reactNative) {\n      return 'reactNativeHamster.js';\n    }\n    if (this.node) {\n      return './node_modules/hamsters.js/build/common/node.js';\n    }\n    return this.generateWorkerBlob(this.hamsters.scaffold.regular.scaffold);\n  }\n\n  /**\n  * @function getHabitatKeys - Returns keys for this Habitat instance\n  */\n  getHabitatKeys() {\n    return [\n      'worker','sharedworker',\n      'legacy','proxies',\n      'reactnative','atomics',\n      'transferable','browser',\n      'shell','node','debug',\n      'persistence','importscripts',\n      'maxthreads', 'parentport',\n      'webworker', 'relay'\n    ];\n  }\n}\n\nexport default Habitat;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Pool {\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.threads = [];\n    this.running = [];\n    this.pending = [];\n    this.fetchHamster = this.getAvailableThread.bind(this);\n  }\n\n  /**\n  * @function addWorkToPending - Adds task to queue waiting for available thread\n  * @param {number} index - Index of the task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(index, hamsterFood, task, resolve, reject) {\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[task.scheduler.count].enqueued_at = Date.now();\n    }\n    this.pending.push({\n      index,\n      hamsterFood,  \n      task,\n      resolve,\n      reject\n    });\n  }\n\n  /**\n  * @function processQueuedItem - Invokes processing of next item in queue\n  * @param {object} hamster - The thread to run the task\n  * @param {object} item - Task to process\n  */\n  processQueuedItem(hamster, item) {\n    if (this.hamsters.habitat.debug) {\n      item.task.scheduler.metrics.threads[item.index.id].dequeued_at = Date.now();\n    }\n    return this.runTask(hamster, item.index, item.hamsterFood, item.task, item.resolve, item.reject);\n  }\n\n  /**\n  * @function getAvailableThread - Gets an available thread\n  * @param {number} threadId - Id of the thread\n  * @returns {object} - The available thread\n  */\n  getAvailableThread(threadId) {\n    if (this.hamsters.habitat.persistence) {\n      return this.threads[threadId];\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[id].started_at = Date.now();\n    }\n    task.scheduler.workers.push(id);\n    this.running.push(id);\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {number} maxThreads - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    while (maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    const { selectHamsterWheel, SharedWorker, Worker } = this.hamsters.habitat;\n    const hamsterWheel = selectHamsterWheel();\n    if (this.hamsters.habitat.webWorker) {\n      return new SharedWorker(hamsterWheel, 'SharedHamsterWheel');\n    }\n    return new Worker(hamsterWheel);\n  }\n    \n  /**\n   * @function prepareMeal\n   * @description Prepares message to send to a thread and invoke execution\n   * @param {number} index - Index of the subarray to process\n   * @param {number} subTaskId - Subtask ID\n   * @param {object} task - Provided library functionality options for this task\n   * @returns {object} - Prepared message to send to a thread\n   */\n  prepareMeal(index, subTaskId, task) {\n    index.id = subTaskId;\n\n    // Prepare the base hamsterFood object\n    const hamsterFood = {\n      array: task.input.array && task.input.array.length !== 0 ? \n            this.hamsters.data.getSubArrayFromIndex(index, task.input.array) : [],\n      index: index\n    };\n\n    // Add sharedBuffer if it exists\n    if (typeof task.scheduler.sharedBuffer !== 'undefined') {\n      hamsterFood.sharedBuffer = task.scheduler.sharedBuffer;\n    }\n\n    // List of excluded keys\n    const excludedKeys = new Set(['array', 'threads', 'sharedArray']);\n\n    // Iterate over task.input properties and add to hamsterFood\n    for (const key in task.input) {\n      if (task.input.hasOwnProperty(key) && !excludedKeys.has(key)) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n\n    return hamsterFood;\n  }\n\n  /**\n  * @function runDistributedTask - Runs incoming distributed function using thread\n  * @param {object} incomingMessage - The incoming subTask object\n  */\n  runDistributedTask(incomingMessage, targetClient) {\n    const hamster = this.fetchHamster(this.running.length);\n    let task = incomingMessage.task;\n    let index = incomingMessage.hamsterFood.index;\n    let handleResponse = this.hamsters.distribute.returnDistributedOutput;\n    task.targetClient = targetClient;\n    task.messageId = incomingMessage.messageId;\n    task.isReply = true;\n\n    this.runTask(hamster, index, incomingMessage.hamsterFood, incomingMessage.task, handleResponse, handleResponse);\n  }\n\n\n\n  /**\n  * @function runTask - Runs function using thread\n  * @param {object} hamster - The thread to run the task\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, index, hamsterFood, task, resolve, reject) {\n    const threadId = this.running.length;\n    this.hamsters.pool.keepTrackOfThread(task, threadId);\n    if (this.hamsters.habitat.legacy) {\n      this.hamsters.scaffold.legacy.scaffold(hamsterFood, resolve, reject);\n    } else {\n      this.hamsters.pool.trainHamster(index, task, threadId, hamster, resolve, reject);\n      this.hamsters.data.feedHamster(hamster, hamsterFood);\n    }\n    task.scheduler.count += 1;\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(index, subTaskId, task, resolve, reject) {\n    const hamsterFood = this.prepareMeal(index, subTaskId, task);\n    if (this.hamsters.habitat.maxThreads <= this.running.length) {\n      this.addWorkToPending(index, hamsterFood, task, resolve, reject);\n    } else {\n      if(task.input.distribute) {\n        this.hamsters.distribute.distributeTask(task, hamsterFood, resolve, reject);\n      } else {\n        const hamster = this.fetchHamster(this.running.length);\n        this.runTask(hamster, index, hamsterFood, task, resolve, reject);\n      }\n    }\n  }\n\n  processDistributedReturn(data) {\n    debugger;\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - Gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    if(task.scheduler.sharedBuffer) {\n      task.output = hamsters.data.processDataType(task.input.dataType, task.scheduler.sharedBuffer);\n    }\n    if(task.input.aggregate) {\n      task.output = this.hamsters.data.aggregateThreadOutputs(task.output, task.input.dataType);\n    }\n    if(task.input.sort) {\n      task.output = this.hamsters.data.sortOutput(task.output, task.input.sort)\n    }\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.completed_at = Date.now();\n      console.info(\"Hamsters.js Task Completed: \", task);\n    }\n    if(task.input.distribute) {\n      resolve(task);\n    } else {\n      resolve(task.output);\n    }\n  }\n\n  /**\n  * @function removeFromRunning - Removes a thread from the running pool\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Id of the thread to remove\n  */\n  removeFromRunning(task, threadId) {\n    this.running.splice(this.running.indexOf(threadId), 1);\n    task.scheduler.workers.splice(task.scheduler.workers.indexOf(threadId), 1);\n  }\n\n  /**\n   * @function processReturn - Processes the returned message from a thread\n   * @param {number} index - Index of the subarray processed\n   * @param {object} message - Message returned from the thread\n   * @param {object} task - Provided library functionality options for this task\n   */\n  processReturn(index, message, task) {\n    const isReactNative = this.hamsters.habitat.reactNative;\n    const isNode = this.hamsters.habitat.node;\n    const response = message.data;\n    const messageData = isReactNative ? JSON.parse(message).data : (response.data !== undefined ? response.data : response);\n    const threadId = isNode ? message.index.id : response.index.id;\n\n    if (task.scheduler.threads !== 1) {\n      if (isReactNative || task.input.mixedOutput) {\n          task.output[threadId] = messageData;\n      } else {\n        this.hamsters.data.addThreadOutputWithIndex(task, index, messageData);\n      }\n    } else {\n      task.output = messageData;\n    }\n  }\n\n  /**\n  * @function setOnMessage - Sets the message handlers for a thread\n  * @param {object} hamster - The thread to set the handlers on\n  * @param {function} onThreadResponse - Handler for thread response\n  * @param {object} habitat - Habitat configuration\n  * @param {function} reject - onError method\n  */\n  setOnMessage(hamster, onThreadResponse, reject) {\n    if (this.hamsters.habitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onmessageerror = reject;\n      hamster.port.onerror = reject;\n    } else if (this.hamsters.habitat.node) {\n      hamster.once('message', onThreadResponse);\n      hamster.once('onmessageerror', reject);\n      hamster.once('error', reject);\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = reject;\n      hamster.onerror = reject;\n    }\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Id of the thread to train\n  * @param {object} hamster - The thread to train\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(index, task, threadId, hamster, resolve, reject) {\n    const onThreadResponse = (message) => {\n      this.hamsters.pool.processReturn(index, message, task);\n      if (this.hamsters.habitat.debug) {\n        task.scheduler.metrics.threads[threadId].completed_at = Date.now();\n      }\n      this.hamsters.pool.removeFromRunning(task, threadId);\n      if (task.scheduler.workers.length === 0 && task.scheduler.count === task.scheduler.threads) {\n        this.hamsters.pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (!this.hamsters.habitat.persistence) {\n        hamster.terminate();\n      }\n      if (this.hamsters.pool.pending.length !== 0) {\n        const queueHamster = this.hamsters.pool.fetchHamster(this.hamsters.pool.running.length);\n        this.hamsters.pool.processQueuedItem(queueHamster, this.hamsters.pool.pending.shift());\n      }\n    };\n    this.hamsters.pool.setOnMessage(hamster, onThreadResponse, reject);\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  */\n  scheduleTask(task) {\n    let i = 0;\n  \treturn new Promise((resolve, reject) => {\n      if(this.hamsters.debug) {\n        task.scheduler.metrics.started_at = Date.now();\n      }\n      while (i < task.scheduler.threads) {\n        this.hamsterWheel(task.scheduler.indexes[i], i, task, resolve, reject);\n        i += 1;\n      }\n    });\n  }\n}\n\nexport default Pool;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters; // Set the hamsters object as a property of Data class\n    this.getSubArrayFromIndex = this.getSubArrayUsingIndex.bind(this); // Bind getSubArrayUsingIndex function\n    this.getSubArrayIndexes = this.calculateIndexes.bind(this); // Bind calculateIndexes function\n    this.sortOutput = this.sortTaskOutput.bind(this); // Bind sortTaskOutput function\n    this.aggregateThreadOutputs = this.aggregateThreadOutputs.bind(this);\n    this.processDataType = this.typedArrayFromBuffer;\n    this.prepareFunction = this.prepareWorkerTask.bind(this); // Bind prepareWorkerTask function\n    this.feedHamster = this.messageWorkerThread.bind(this); // Bind messageWorkerThread function\n    this.getBufferSize = this.getBufferSize;\n    this.createSharedBuffer = this.createSharedBuffer.bind(this);\n    this.getDataType = this.getDataType;\n    this.setupSharedArrayBuffer = this.setupSharedArrayBuffer.bind(this);\n  }\n\n  /**\n  * @function messageWorkerThread - Prepares message to send to thread\n  * @param {object} hamstersHabitat - Hamsters Habitat instance\n  * @param {Worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorkerThread(hamster, hamsterFood) {\n    if(this.hamsters.habitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    if (this.hamsters.habitat.webWorker) {\n      return hamster.port.postMessage(hamsterFood);\n    }\n    return hamster.postMessage(hamsterFood, this.hamsters.data.getTransferableObjects(hamsterFood));\n  }\n\n  getTransferableObjects(obj) {\n    const typedArrayBuffers = [];\n    const transferableObjects = [];\n    const typedArrayTypes = [\n      'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', \n      'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n    ];\n    const otherTransferables = [\n      'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n    ];\n    const globalContext = typeof window !== 'undefined' ? window : global;\n  \n    for (const prop in obj) {\n      for (const type of typedArrayTypes) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          typedArrayBuffers.push(obj[prop].buffer);\n          break;\n        }\n      }\n  \n      for (const type of otherTransferables) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          transferableObjects.push(obj[prop]);\n          break;\n        }\n      }\n    }\n  \n    return typedArrayBuffers.concat(transferableObjects);\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'Uint32': Uint32Array,\n      'Uint16': Uint16Array,\n      'Uint8': Uint8Array,\n      'Uint8clamped': Uint8ClampedArray,\n      'Int32': Int32Array,\n      'Int16': Int16Array,\n      'Int8': Int8Array,\n      'Float32': Float32Array,\n      'Float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return buffer;\n    }\n    return new types[dataType](buffer);\n  }\n\n  /**\n  * @function prepareWorkerTask - Prepares function for thread, strips whitespace\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareWorkerTask(functionBody) {\n    let functionString = String(functionBody);\n    return functionString.substring((functionString.indexOf(\"{\") + 1), (functionString.length -1));\n  }\n\n  /**\n  * @function sortTaskOutput - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortTaskOutput(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n   * @function getBufferSize - Gets the byte length of the input array\n   * @param {TypedArray} array - The input typed array\n   * @returns {number} - The byte length of the array\n   */\n  getBufferSize(array) {\n    return array.byteLength;\n  }\n\n  /**\n   * @function createSharedBuffer - Creates a SharedArrayBuffer based on the input array's byte length\n   * @param {TypedArray} array - The input typed array\n   * @returns {SharedArrayBuffer} - The created SharedArrayBuffer\n   */\n  createSharedBuffer(array) {\n    const byteLength = this.getBufferSize(array);\n    const sharedBuffer = new SharedArrayBuffer(byteLength);\n    const sharedArray = new array.constructor(sharedBuffer);\n\n    // Copy data from the input array to the shared array\n    sharedArray.set(array);\n\n    return sharedBuffer;\n  }\n\n  /**\n   * @function setupSharedArrayBuffer - Sets up the shared buffer and corresponding typed array\n   * @param {TypedArray} array - The input typed array\n   * @returns {object} - SharedArrayBuffer;\n   */\n  setupSharedArrayBuffer(array) {\n    return this.createSharedBuffer(array);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function addThreadOutputWithIndex - Joins individual thread outputs into single result\n  * @param {object} task - Hamsters task object\n  * @param {object} index - Index information\n  * @param {array} output - Output array\n  */\n  addThreadOutputWithIndex(task, index, output) {\n    let i = 0;\n    const outputLength = output.length;\n    for (i; i < outputLength; i++) {\n      task.output[(index.start + i)] = output[i];\n    }\n  }\n\n  /**\n   * @function calculateIndexes - Splits a single array into multiple equal sized subarrays\n   * @param {array} array - Array to split\n   * @param {number} n - Number of subarrays to create\n   */\n  calculateIndexes(array, n) {\n    // If n is 1, return the whole array range\n    if (n === 1) {\n      return [{ start: 0, end: array.length - 1 }];\n    }\n\n    const indexes = [];\n    const segmentSize = Math.floor(array.length / n);\n    let startIndex = 0;\n\n    for (let i = 0; i < n; i++) {\n      const endIndex = startIndex + segmentSize - 1;\n      indexes.push({ start: startIndex, end: endIndex });\n      startIndex = endIndex + 1;\n    }\n\n    // Adjust the last segment to cover any remaining elements\n    if (startIndex < array.length) {\n      indexes[n - 1].end = array.length - 1;\n    }\n\n    return indexes;\n  }\n  \n\n  /**\n  * @function getSubArrayUsingIndex - Slices subarray based on provided index\n  * @param {object} index - Index information\n  * @param {object} inputArray - Hamsters task object\n  */\n  getSubArrayUsingIndex(index, inputArray) {\n    return inputArray.slice(index.start, index.end + 1);\n  }\n}\n\nexport default Data;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Task {\n  /**\n   * @constructor\n   * @param {object} habitat - The environment settings\n   * @param {object} data - Data utility methods\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  constructor(hamsters, params, functionToRun) {\n    'use strict';\n\n    this.input = params;\n    this.output = [];\n    this.scheduler = {\n      count: 0,\n      threads: params.threads || 1,\n      workers: []\n    };\n\n    if (hamsters.habitat.legacy) {\n      this.setupLegacyTask(hamsters, functionToRun);\n    } else {\n      this.setupModernTask(hamsters, params, functionToRun);\n    }\n\n    if (hamsters.habitat.debug) {\n      this.setupDebugMetrics();\n    }\n  }\n\n  /**\n   * @method setupLegacyTask\n   * @description Sets up task for legacy environments\n   * @param {function} functionToRun - Function to execute\n   */\n  setupLegacyTask(hamsters, functionToRun) {\n    this.scheduler.threads = 1;\n    if (!hamsters.habitat.node && !hamsters.habitat.isIE) {\n      this.input.hamstersJob = functionToRun;\n    }\n  }\n\n  /**\n   * @method setupModernTask\n   * @description Sets up task for modern environments\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  setupModernTask(hamsters, params, functionToRun) {\n    this.input.hamstersJob = hamsters.habitat.legacy ? functionToRun : hamsters.data.prepareFunction(functionToRun);\n    if (params.sharedArray && hamsters.habitat.atomics) {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.sharedArray, this.scheduler.threads);\n      this.scheduler.sharedBuffer = hamsters.data.setupSharedArrayBuffer(params.sharedArray);\n      this.input.sharedArray = []; //Reduce ram usage on main thread, do not preserve original array its no longer needed.\n    } else {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.array, this.scheduler.threads);\n    }\n  }\n\n  /**\n   * @method setupDebugMetrics\n   * @description Sets up debug metrics if debug mode is enabled\n   */\n  setupDebugMetrics() {\n    this.scheduler.metrics = {\n      created_at: Date.now(),\n      started_at: null,\n      completed_at: null,\n      threads: this.setupThreadMetrics()\n    };\n  }\n\n  setupThreadMetrics() {\n    let i = 0;\n    let threadMetrics = [];\n    while(i < this.scheduler.threads) {\n      threadMetrics.push({\n        created_at: Date.now(),\n        started_at: null,\n        enqueued_at: null,\n        dequeued_at: null,\n        completed_at: null\n      });\n      i += 1;\n    }\n    return threadMetrics;\n  }\n}\n  \nexport default Task;\n  ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass NodeStore {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.cache = new Map();\n    }\n\n    get(key) {\n        if (this.cache.has(key)) {\n            const value = this.cache.get(key);\n            // Refresh the key\n            this.cache.delete(key);\n            this.cache.set(key, value);\n            return Promise.resolve(value);\n        }\n        return Promise.resolve(null);\n    }\n\n    set(key, value) {\n        if (this.cache.size >= this.maxSize) {\n            // Remove the oldest (least recently used) entry\n            const oldestKey = this.cache.keys().next().value;\n            this.cache.delete(oldestKey);\n        }\n        this.cache.set(key, value);\n        return Promise.resolve();\n    }\n\n    clear() {\n        this.cache.clear();\n        return Promise.resolve();\n    }\n}\n\nexport default NodeStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass WebStore {\n    constructor(dbName, storeName, maxSize) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.maxSize = maxSize;\n        this.db = null;\n        this.initDB();\n    }\n\n    initDB() {\n        const self = this;\n        const request = indexedDB.open(this.dbName, 1);\n\n        request.onerror = function(event) {\n            console.error('Error opening database:', event.target.error);\n        };\n\n        request.onupgradeneeded = function(event) {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains(self.storeName)) {\n                const objectStore = db.createObjectStore(self.storeName, { keyPath: 'key' });\n                objectStore.createIndex('by_key', 'key', { unique: true });\n                objectStore.createIndex('by_timestamp', 'timestamp');\n            }\n        };\n\n        request.onsuccess = function(event) {\n            self.db = event.target.result;\n        };\n    }\n\n    get(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve(null);\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const result = event.target.result;\n                if (result) {\n                    self.updateTimestamp(key).then(() => resolve(result.value)).catch(reject);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    set(key, value) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            self.checkSize().then(() => {\n                const transaction = self.db.transaction([self.storeName], 'readwrite');\n                const objectStore = transaction.objectStore(self.storeName);\n                const request = objectStore.put({ key: key, value: value, timestamp: Date.now() });\n\n                request.onsuccess = function() {\n                    resolve();\n                };\n\n                request.onerror = function(event) {\n                    reject(event.target.error);\n                };\n            }).catch(reject);\n        });\n    }\n\n    clear() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.clear();\n\n            request.onsuccess = function() {\n                resolve();\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    checkSize() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const countRequest = objectStore.count();\n\n            countRequest.onsuccess = function() {\n                const count = countRequest.result;\n                if (count >= self.maxSize) {\n                    self.evictOldest().then(resolve).catch(reject);\n                } else {\n                    resolve();\n                }\n            };\n\n            countRequest.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    evictOldest() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const index = objectStore.index('by_timestamp');\n            const request = index.openCursor(null, 'next');\n\n            request.onsuccess = function(event) {\n                const cursor = event.target.result;\n                if (cursor) {\n                    cursor.delete().onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    updateTimestamp(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const data = event.target.result;\n                if (data) {\n                    data.timestamp = Date.now();\n                    objectStore.put(data).onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n}\n\nexport default WebStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport NodeStore from './stores/NodeStore';\nimport WebStore from './stores/WebStore';\n\nclass Memoize {\n    constructor(hamsters, maxSize) {\n        'use strict';\n\n        this.hamsters = hamsters;\n        this.store = this.hamsters.habitat.node ? new NodeStore(maxSize) : new WebStore('hamstersjs', 'cacheStore', maxSize);\n    }\n\n    memoize(func) {\n        const self = this;\n        return function(task) {\n            const key = self.generateTaskKey(task);\n\n            return new Promise(function(resolve, reject) {\n                self.store.get(key).then(function(cachedResult) {\n                    if (cachedResult !== null) {\n                        resolve(cachedResult);\n                    } else {\n                        self.applyFunc(func, task).then(function(result) {\n                            self.store.set(key, result).then(function() {\n                                resolve(result);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }\n                }).catch(reject);\n            });\n        };\n    }\n\n    generateTaskKey(task) {\n        const key = JSON.stringify({ input: task.input });\n        return this.hashCode(key);\n    }\n\n    hashCode(str) {\n        let hash = 0, i, chr;\n        if (str.length === 0) return hash;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash.toString();\n    }\n\n    applyFunc(func, args) {\n        return new Promise((resolve, reject) => {\n            try {\n                const result = func.apply(null, args);\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n\nexport default Memoize;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Distribute {\n\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.localConnection = null;\n    this.remoteConnections = {};\n    this.sendChannels = {};\n    this.receiveChannels = {};\n    this.pcConstraint = null;\n    this.dataConstraint = null;\n    this.ws = null;\n    this.clientId = null;\n    this.pendingPromises = {};\n    this.returnDistributedOutput = this.sendDataResponse.bind(this);\n    this.latencies = {};\n    this.establishConnection = this.initWebSocket.bind(this);\n  }\n\n  initWebSocket() {\n    this.ws = new WebSocket(`${this.hamsters.habitat.relay}`);\n\n    this.ws.onopen = () => {\n      console.info(`Hamsters.js ${this.hamsters.version} connection established`);\n      const registerMessage = {\n        type: 'register',\n        logicalCores: this.hamsters.maxThreads\n      };\n      this.ws.send(JSON.stringify(registerMessage));\n    };\n\n    this.ws.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      switch (message.type) {\n        case 'register':\n          this.handleClientReconnect(message);\n          break;\n        case 'update-client-list':\n          this.updateClientList(message.clients);\n          break;\n        case 'offer':\n          this.handleOffer(message);\n          break;\n        case 'answer':\n          this.handleAnswer(message);\n          break;\n        case 'candidate':\n          this.handleCandidate(message);\n          break;\n        case 'task-response':\n          this.handleTaskResponse(message);\n          break;\n        default:\n          if (this.hamsters.habitat.debug) {\n            console.info(`Hamsters.js ${this.hamsters.version} unknown message type: ${message.type}`);\n          }\n      }\n    };\n\n    this.ws.onerror = (error) => {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} connection error: ${error}`);\n      }\n    };\n\n    this.ws.onclose = () => {\n      if (this.hamsters.habitat.debug) {\n        console.info(`Hamsters.js ${this.hamsters.version} connection closed.`);\n      }\n    };\n  }\n\n  updateClientList(clients) {\n    clients.forEach(client => {\n      if (client.id !== this.clientId && !this.remoteConnections[client.id]) {\n        this.createConnection(client.id);\n      }\n    });\n  }\n\n  handleClientReconnect(message) {\n    const newClientId = message.id;\n\n    if (this.clientId === newClientId) {\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} connection error: `, error);\n      }\n      return;\n    }\n\n    if (this.remoteConnections[newClientId]) {\n      this.remoteConnections[newClientId].close();\n      delete this.remoteConnections[newClientId];\n    }\n    if (this.sendChannels[newClientId]) {\n      this.sendChannels[newClientId].close();\n      delete this.sendChannels[newClientId];\n    }\n    if (this.receiveChannels[newClientId]) {\n      this.receiveChannels[newClientId].close();\n      delete this.receiveChannels[newClientId];\n    }\n    delete this.latencies[newClientId];\n\n    this.clientId = newClientId;\n    this.loadClientList();\n  }\n\n  loadClientList() {\n    fetch(`/clients?currentId=${this.clientId}`)\n      .then(response => response.json())\n      .then(data => {\n        this.updateClientList(data);\n      })\n      .catch(error => {\n        if (this.hamsters.habitat.debug) {\n          console.error(`Hamsters.js ${this.hamsters.version} Error fetching client list: ${error}`);\n        }\n      });\n  }\n\n  createConnections() {\n    Object.keys(this.remoteConnections).forEach(targetClient => {\n      this.createConnection(targetClient);\n    });\n  }\n\n  createConnection(targetClient) {\n    if (targetClient === this.clientId || this.remoteConnections[targetClient]) {\n      return;\n    }\n\n    const servers = {\n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n    };\n\n    const localConnection = new RTCPeerConnection(servers, this.pcConstraint);\n    const sendChannel = localConnection.createDataChannel('hamstersjs', this.dataConstraint);\n\n    localConnection.onicecandidate = (e) => {\n      if (e.candidate) {\n        this.ws.send(JSON.stringify({ type: 'candidate', target: targetClient, candidate: e.candidate }));\n      }\n    };\n\n    sendChannel.onopen = () => {\n      this.onSendChannelStateChange(targetClient);\n    };\n\n    sendChannel.onclose = () => {\n      this.onSendChannelStateChange(targetClient);\n    };\n\n    sendChannel.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      switch (message.type) {\n        case 'ping':\n          this.handlePing(targetClient, message.startTime);\n          break;\n        case 'pong':\n          this.handlePong(targetClient, message.startTime);\n          break;\n        default:\n          this.onReceiveMessageCallback(targetClient, event.data);\n      }\n    };\n\n    localConnection.ondatachannel = (event) => {\n      this.receiveChannelCallback(event, targetClient);\n    };\n\n    this.remoteConnections[targetClient] = localConnection;\n    this.sendChannels[targetClient] = sendChannel;\n    this.receiveChannels[targetClient] = null;\n\n    localConnection.createOffer().then(desc => {\n      localConnection.setLocalDescription(desc);\n      this.ws.send(JSON.stringify({ type: 'offer', target: targetClient, offer: desc }));\n    }).catch(this.onCreateSessionDescriptionError);\n  }\n\n  handleOffer(data) {\n    const targetClient = data.from;\n\n    if (!this.remoteConnections[targetClient]) {\n      const servers = {\n        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n      };\n\n      const remoteConnection = new RTCPeerConnection(servers, this.pcConstraint);\n\n      remoteConnection.onicecandidate = (e) => {\n        if (e.candidate) {\n          this.ws.send(JSON.stringify({ type: 'candidate', target: targetClient, candidate: e.candidate }));\n        }\n      };\n\n      remoteConnection.ondatachannel = (event) => {\n        this.receiveChannelCallback(event, targetClient);\n      };\n\n      const sendChannel = remoteConnection.createDataChannel('hamstersjs', this.dataConstraint);\n      \n      sendChannel.onopen = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onclose = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        switch (message.type) {\n          case 'ping':\n            this.handlePing(targetClient, message.startTime);\n            break;\n          case 'pong':\n            this.handlePong(targetClient, message.startTime);\n            break;\n          default:\n            this.onReceiveMessageCallback(targetClient, event.data);\n        }\n      };\n\n      remoteConnection.setRemoteDescription(new RTCSessionDescription(data.offer)).then(() => {\n        return remoteConnection.createAnswer();\n      }).then(desc => {\n        remoteConnection.setLocalDescription(desc);\n        this.ws.send(JSON.stringify({ type: 'answer', target: targetClient, answer: desc }));\n      }).catch(this.onCreateSessionDescriptionError);\n\n      this.remoteConnections[targetClient] = remoteConnection;\n      this.sendChannels[targetClient] = sendChannel;\n    }\n  }\n\n  handleAnswer(data) {\n    const connection = this.remoteConnections[data.from];\n    connection.setRemoteDescription(new RTCSessionDescription(data.answer));\n  }\n\n  handleCandidate(data) {\n    const connection = this.remoteConnections[data.from];\n    connection.addIceCandidate(new RTCIceCandidate(data.candidate)).catch(this.onAddIceCandidateError);\n  }\n\n  measureLatency(targetClient) {\n    const startTime = performance.now();\n    this.sendPing(targetClient, startTime);\n  }\n\n  sendPing(targetClient, startTime) {\n    const sendChannel = this.sendChannels[targetClient];\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'ping', startTime }));\n    }\n  }\n\n  handlePing(targetClient, startTime) {\n    console.log(\"Remote Connections \", this.remoteConnections);\n    const sendChannel = this.receiveChannels[targetClient];\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'pong', startTime }));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent ping to ${targetClient}`);\n      }\n    }\n  }\n\n  handlePong(targetClient, startTime) {\n    const latency = performance.now() - startTime;\n    this.latencies[targetClient] = latency;\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} received pong from ${targetClient} with latency: ${latency.toFixed(2)}ms`);\n    }\n  }\n\n  fetchDistributedClient() {\n    const sendChannelKeys = Object.keys(this.sendChannels);\n    if (sendChannelKeys.length === 0) {\n      if (this.hamsters.habitat.debug) {\n        console.warn(`Hamsters.js ${this.hamsters.version} no send channels available.`);\n      }\n      return null;\n    }\n\n    let minLatency = Infinity;\n    let targetClient = null;\n\n    sendChannelKeys.forEach(clientId => {\n      let channel = this.sendChannels[clientId];\n      if (channel.readyState === 'open' && this.latencies[clientId] < minLatency) {\n        minLatency = this.latencies[clientId];\n        targetClient = clientId;\n      }\n    });\n\n    return targetClient;\n  }\n\n  distributeTask(task, hamsterFood, resolve, reject) {\n    const targetClient = this.fetchDistributedClient();\n    if (!targetClient) {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} no target client found.`);\n      }\n      reject('No target client found.');\n      return;\n    }\n\n    const messageId = this.generateUniqueId();\n\n    const subTask = {\n      hamsterFood,\n      index: hamsterFood.index,\n      task,\n      messageId,\n    };\n\n    this.pendingPromises[messageId] = { resolve, reject };\n\n    this.sendData({ targetClient, data: subTask });\n  }\n\n  handleTaskResponse(incomingMessage) {\n    const { messageId, output, error } = incomingMessage;\n    const pendingPromise = this.pendingPromises[messageId];\n\n    if (pendingPromise) {\n      if (error) {\n        pendingPromise.reject(error);\n      } else {\n        pendingPromise.resolve(output);\n      }\n\n      delete this.pendingPromises[messageId];\n    }\n  }\n\n  sendData({ targetClient, data }) {\n    const sendChannel = this.sendChannels[targetClient];\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify(data));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent data to: `, targetClient);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: `, targetClient);\n      }\n    }\n  }\n\n  sendDataResponse(data) {\n    const targetClient = data.targetClient;\n    const sendChannel = this.receiveChannels[targetClient];\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify(data));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent response to: `, targetClient);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: `, targetClient);\n      }\n    }\n  }\n\n  closeDataChannels() {\n    for (const targetClient in this.sendChannels) {\n      if (this.sendChannels[targetClient]) {\n        this.sendChannels[targetClient].close();\n        delete this.sendChannels[targetClient];\n      }\n      if (this.receiveChannels[targetClient]) {\n        this.receiveChannels[targetClient].close();\n        delete this.receiveChannels[targetClient];\n      }\n      if (this.remoteConnections[targetClient]) {\n        this.remoteConnections[targetClient].close();\n        delete this.remoteConnections[targetClient];\n      }\n      delete this.latencies[targetClient];\n    }\n    this.localConnection = null;\n  }\n\n  receiveChannelCallback(event, targetClient) {\n    const receiveChannel = event.channel;\n\n    receiveChannel.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      switch (message.type) {\n        case 'ping':\n          this.handlePing(targetClient, message.startTime);\n          break;\n        case 'pong':\n          this.handlePong(targetClient, message.startTime);\n          break;\n        default:\n          this.onReceiveMessageCallback(targetClient, event.data);\n      }\n    };\n\n    receiveChannel.onopen = () => {\n      this.onReceiveChannelStateChange(targetClient);\n    };\n\n    receiveChannel.onclose = () => {\n      this.onReceiveChannelStateChange(targetClient);\n    };\n\n    this.receiveChannels[targetClient] = receiveChannel;\n  }\n\n  onReceiveMessageCallback(targetClient, data) {\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} received message!`);\n    }\n    const incomingMessage = JSON.parse(data);\n\n    if (incomingMessage.isReply) {\n      this.handleTaskResponse(incomingMessage);\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} response received for task: `, incomingMessage);\n      }\n    } else {\n      this.hamsters.pool.runDistributedTask(incomingMessage, targetClient);\n    }\n  }\n\n  onSendChannelStateChange(targetClient) {\n    const sendChannel = this.sendChannels[targetClient];\n    this.measureLatency(targetClient);\n    if (sendChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} send channel state changed for ${targetClient}: ${sendChannel.readyState}`);\n    }\n  }\n\n  onReceiveChannelStateChange(targetClient) {\n    const receiveChannel = this.receiveChannels[targetClient];\n    if (receiveChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} receive channel state changed for ${targetClient}: ${receiveChannel.readyState}`);\n    }\n  }\n\n  generateUniqueId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  onCreateSessionDescriptionError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to create session description: ${error}`);\n    }\n  }\n\n  onAddIceCandidateError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to add ICE candidate: ${error}`);\n    }\n  }\n}\n\nexport default Distribute;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n//Core Functionality\nimport Habitat from './core/habitat';\nimport Pool from './core/pool';\nimport Data from './core/data';\nimport Task from './core/task';\n\n//Worker Scaffolds\nimport Legacy from './scaffold/legacy';\nimport Regular from './scaffold/regular';\nimport Shared from './scaffold/shared';\n\n//Features\nimport Memoize from './feature/memoize';\nimport Distribute from './feature/distribute';\n\n\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.version = '5.6.0';\n    this.run = this.hamstersRun.bind(this);\n    this.promise = this.hamstersPromise.bind(this);\n    this.init = this.initializeLibrary.bind(this);\n    this.data = {};\n    this.pool = {};\n    this.scaffold = {};\n    this.habitat = {};\n    this.memoize = {};\n  }\n\n  /**\n  * @function inititializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    this.data = new Data(this);\n    this.pool = new Pool(this);\n    this.scaffold = {\n      legacy: new Legacy(),\n      regular: new Regular(),\n      shared: new Shared()\n    };\n    this.habitat = new Habitat(this);\n    this.memoize = new Memoize(this, 100); //Set a maximum of 100 memoized function results, LRU cache\n    this.distribute = new Distribute(this);\n\n    this.processStartOptions(startOptions);\n    \n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      this.pool.spawnHamsters(this.habitat.maxThreads);\n    }\n    this.maxThreads = this.habitat.maxThreads;\n\n    if(this.habitat.relay) {\n      console.info(`Hamsters.js ${this.version} establishing connection to relay`);\n      this.distribute.establishConnection();\n    }\n\n    console.info(`Hamsters.js ${this.version} initialized using up to ${this.habitat.maxThreads} threads`);\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      for (const key of Object.keys(startOptions)) {\n        if (this.habitat.keys.includes(key.toLowerCase())) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          this[key] = startOptions[key];\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    let forceLegacyMode = (typeof startOptions !== 'undefined' && typeof startOptions.legacy !== 'undefined');\n    if (forceLegacyMode) {\n      forceLegacyMode = startOptions.legacy;\n    }\n    if (typeof this.habitat.Worker === 'function' && !forceLegacyMode) {\n      this.habitat.legacy = this.habitat.isIE;\n    }\n  }\n\n  /**\n   * @async\n   * @function scheduleTask - Schedules a new function to be processed by the library\n   * @param {object} task - Provided library execution options\n   * @param {function} resolve - Parent function promise resolve method\n   * @param {function} reject - Parent function promise reject method\n   * @return {Promise} Promise object on completion\n   */\n  scheduleTask(task, resolve, reject) {\n    if (task.input.memoize) {\n      // Pass the task object to the memoized function\n      const memoizedFunction = this.memoize.memoize(() => this.pool.scheduleTask(task));\n      return memoizedFunction(task).then(resolve).catch(reject);\n    }\n    return this.pool.scheduleTask(task).then(resolve).catch(reject);\n  }\n\n  /**\n   * @async\n   * @function hamstersPromise - Calls library functionality using async promises\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   * @return {Promise} Promise resolving with results from functionToRun\n   */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      this.scheduleTask(new Task(this, params, functionToRun), resolve, reject);\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    this.scheduleTask(new Task(this, params, functionToRun), onSuccess, onError);\n  }\n}\n\nexport default new hamstersjs();\n"],"names":["root","factory","exports","module","define","amd","this","Legacy","constructor","hamsters","scaffold","legacyScaffold","bind","params","resolve","reject","rtn","data","dataType","habitat","reactNative","self","node","isIE","eval","hamstersJob","Regular","handleDataType","sharedArray","typedArrayFromBuffer","getTransferableObjects","buffer","types","Uint32Array","Uint16Array","Uint8Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","returnResponse","buffers","length","postMessage","obj","transferableObjects","Set","typedArrayTypes","globalContext","window","allTypes","prop","hasOwnProperty","type","includes","add","Array","from","onmessage","message","index","sharedBuffer","Shared","workerScaffold","addEventListener","incomingConnection","port","ports","start","incomingMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","e","prototype","call","Habitat","debug","importScripts","relay","memoize","persistence","browser","isBrowser","webWorker","isWebWorker","isNode","isReactNative","shell","isShell","transferable","supportsTransferableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isInternetExplorer","selectHamsterWheel","sharedWorker","locateSharedWorkerObject","locateBlobBuilder","findAvailableBlobBuilder","legacy","isLegacyEnvironment","Worker","locateWorkerObject","maxThreads","determineGlobalThreads","keys","getHabitatKeys","max","navigator","hardwareConcurrency","isFirefox","os","cpus","userAgent","toLowerCase","indexOf","SharedWorker","process","product","isLegacy","supportsSharedWorkers","supports","workerBlob","generateWorkerBlob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","createDataBlob","textContent","Blob","blob","append","getBlob","workerLogic","URL","createObjectURL","toString","SharedArrayBuffer","Proxy","regular","Pool","threads","running","pending","fetchHamster","getAvailableThread","addWorkToPending","hamsterFood","task","scheduler","metrics","count","enqueued_at","Date","now","push","processQueuedItem","hamster","item","id","dequeued_at","runTask","threadId","spawnHamster","keepTrackOfThread","started_at","workers","spawnHamsters","hamsterWheel","prepareMeal","subTaskId","array","input","getSubArrayFromIndex","excludedKeys","has","runDistributedTask","targetClient","handleResponse","distribute","returnDistributedOutput","messageId","isReply","pool","trainHamster","feedHamster","distributeTask","processDistributedReturn","returnOutputAndRemoveTask","output","processDataType","aggregate","aggregateThreadOutputs","sort","sortOutput","completed_at","console","info","removeFromRunning","splice","processReturn","response","messageData","JSON","parse","mixedOutput","addThreadOutputWithIndex","setOnMessage","onThreadResponse","onmessageerror","onerror","once","terminate","queueHamster","shift","scheduleTask","i","Promise","indexes","Data","getSubArrayUsingIndex","getSubArrayIndexes","calculateIndexes","sortTaskOutput","prepareFunction","prepareWorkerTask","messageWorkerThread","getBufferSize","createSharedBuffer","getDataType","setupSharedArrayBuffer","stringify","typedArrayBuffers","otherTransferables","global","concat","functionBody","functionString","String","substring","arr","order","a","b","reverse","byteLength","set","reduce","len","bufferLength","offset","outputLength","n","end","segmentSize","Math","floor","startIndex","endIndex","inputArray","slice","Task","functionToRun","setupLegacyTask","setupModernTask","setupDebugMetrics","created_at","setupThreadMetrics","threadMetrics","NodeStore","maxSize","cache","Map","value","delete","size","oldestKey","next","clear","WebStore","dbName","storeName","db","initDB","request","indexedDB","open","event","error","target","onupgradeneeded","result","objectStoreNames","contains","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","transaction","updateTimestamp","then","catch","checkSize","put","timestamp","countRequest","evictOldest","openCursor","cursor","Memoize","store","func","generateTaskKey","cachedResult","applyFunc","hashCode","str","chr","hash","charCodeAt","args","apply","Distribute","localConnection","remoteConnections","sendChannels","receiveChannels","pcConstraint","dataConstraint","ws","clientId","pendingPromises","sendDataResponse","latencies","establishConnection","initWebSocket","WebSocket","onopen","version","registerMessage","logicalCores","send","handleClientReconnect","updateClientList","clients","handleOffer","handleAnswer","handleCandidate","handleTaskResponse","onclose","forEach","client","createConnection","newClientId","close","loadClientList","log","fetch","json","createConnections","RTCPeerConnection","iceServers","urls","sendChannel","createDataChannel","onicecandidate","candidate","onSendChannelStateChange","handlePing","startTime","handlePong","onReceiveMessageCallback","ondatachannel","receiveChannelCallback","createOffer","desc","setLocalDescription","offer","onCreateSessionDescriptionError","remoteConnection","setRemoteDescription","RTCSessionDescription","createAnswer","answer","addIceCandidate","RTCIceCandidate","onAddIceCandidateError","measureLatency","performance","sendPing","readyState","latency","toFixed","fetchDistributedClient","sendChannelKeys","warn","minLatency","Infinity","generateUniqueId","subTask","sendData","pendingPromise","_ref","closeDataChannels","receiveChannel","channel","onReceiveChannelStateChange","random","substr","hamstersjs","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","shared","processStartOptions","forceLegacyMode","memoizedFunction","onSuccess","onError"],"sourceRoot":""}