{"version":3,"file":"hamsters.web.min.js","mappings":"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","sources":["webpack://hamsters/webpack/universalModuleDefinition","webpack://hamsters/./scaffold/legacy.js","webpack://hamsters/./scaffold/regular.js","webpack://hamsters/./scaffold/shared.js","webpack://hamsters/webpack/bootstrap","webpack://hamsters/webpack/runtime/define property getters","webpack://hamsters/webpack/runtime/global","webpack://hamsters/webpack/runtime/hasOwnProperty shorthand","webpack://hamsters/./core/habitat.js","webpack://hamsters/./core/pool.js","webpack://hamsters/./core/data.js","webpack://hamsters/./core/task.js","webpack://hamsters/./feature/stores/NodeStore.js","webpack://hamsters/./feature/stores/WebStore.js","webpack://hamsters/./feature/memoize.js","webpack://hamsters/./feature/distribute.js","webpack://hamsters/./feature/observable.js","webpack://hamsters/./hamsters.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hamsters\"] = factory();\n\telse\n\t\troot[\"hamsters\"] = factory();\n})(this, () => {\nreturn ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Legacy {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor(hamsters) {\n      this.hamsters = hamsters;\n      this.scaffold = (params, resolve, reject) => {\n        var rtn = {\n          data: [],\n          dataType: (typeof params.dataType !== \"undefined\" ? params.dataType : null)\n        };\n        if(this.hamsters.habitat.reactNative) {\n          self.rtn = rtn;\n        }\n        if(this.hamsters.habitat.node || this.hamsters.habitat.isIE) {\n          eval(params.hamstersJob);\n        } else {\n          params.hamstersJob();\n        }\n        resolve(rtn.data);\n      }\n    }\n  }\n  \n  export default Legacy;\n  ","class Regular {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n        this.scaffold = function() {\n            self.params = {};\n            self.rtn = {};\n\n            self.onmessage = function (message) {\n                this.params = message.data;\n                this.rtn = {\n                    data: [],\n                    dataType: (typeof this.params.dataType !== 'undefined' ? this.params.dataType : null),\n                    index: this.params.index\n                };\n                if (this.params.sharedBuffer) {\n                    this.params.sharedArray = typedArrayFromBuffer(this.params.dataType, this.params.sharedBuffer);\n                }\n                eval(this.params.hamstersJob);\n                const buffers = handleDataType(this.rtn);\n                returnResponse(this.rtn, buffers);\n            }.bind(this);\n\n            function handleDataType(rtn) {\n                if (this.params.sharedArray) {\n                    // Do nothing here, we don't need to return a buffer rtn.data is useless here\n                } else if (this.params.dataType) {\n                    rtn.data = typedArrayFromBuffer(rtn.dataType, rtn.data);\n                }\n                return getTransferableObjects(rtn); // Return transferable objects\n            }\n\n            function typedArrayFromBuffer(dataType, buffer) {\n                const types = {\n                    'Uint32': Uint32Array,\n                    'Uint16': Uint16Array,\n                    'Uint8': Uint8Array,\n                    'Uint8clamped': Uint8ClampedArray,\n                    'Int32': Int32Array,\n                    'Int16': Int16Array,\n                    'Int8': Int8Array,\n                    'Float32': Float32Array,\n                    'Float64': Float64Array\n                };\n                return types[dataType] ? new types[dataType](buffer) : buffer;\n            }\n\n            function returnResponse(rtn, buffers) {\n                if (buffers && buffers.length > 0) {\n                    postMessage(rtn, buffers);  // PostMessage with transferable objects\n                } else {\n                    postMessage(rtn);  // PostMessage without transferable objects\n                }\n            }\n\n            function getTransferableObjects(obj) {\n                const transferableObjects = new Set();\n                const typedArrayTypes = [\n                    'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array',\n                    'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n                ];\n                const otherTransferables = [\n                    'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n                ];\n\n                const globalContext = typeof self !== 'undefined' ? self : window;\n\n                const allTypes = [...typedArrayTypes, ...otherTransferables];\n\n                for (const prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        for (const type of allTypes) {\n                            if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n                                if (typedArrayTypes.includes(type)) {\n                                    transferableObjects.add(obj[prop].buffer);\n                                } else {\n                                    transferableObjects.add(obj[prop]);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return Array.from(transferableObjects);\n            }\n        }\n    }\n}\n\nexport default Regular;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Shared {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n      this.scaffold = function() {\n        self.params = {};\n        self.rtn = {};\n    \n        addEventListener('connect', (incomingConnection) => {\n          var port = incomingConnection.ports[0];\n          port.start();\n          port.addEventListener('message', (incomingMessage) => {\n            this.params = incomingMessage.data;\n            this.rtn = {\n              data: [],\n              dataType: this.params.dataType\n            };\n            eval(\"(\" + this.params.hamstersJob + \")\")();\n            port.postMessage(this.rtn);\n          }, false);\n        }, false);\n      }\n    }\n  }\n  \n  export default Shared;\n  ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.debug = false;\n    this.importScripts = null;\n    this.relay = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferable = this.supportsTransferableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE = this.isInternetExplorer();\n    this.selectHamsterWheel = this.selectHamsterWheel.bind(this);\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.locateBlobBuilder = this.findAvailableBlobBuilder();\n    this.legacy = this.isLegacyEnvironment();\n    this.Worker = this.locateWorkerObject();\n    this.maxThreads = this.determineGlobalThreads();\n    this.keys = this.getHabitatKeys();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(this.browser && typeof navigator.hardwareConcurrency !== \"undefined\") {\n      max = navigator.hardwareConcurrency;\n      if(this.isFirefox()) {\n        max = (max > 20 ? 20 : max);\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function isFirefox - Detect firefox browser\n  */\n  isFirefox() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return (typeof Worker !== 'undefined' ? Worker : false);\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return (typeof SharedWorker !== 'undefined' ? SharedWorker : false);\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return (typeof window === \"object\");\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.indexOf(\"MSIE \") !== -1 || navigator.userAgent.indexOf(\"Trident/\") !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return (typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser);\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a web worker\n  */\n  isWebWorker() {\n    return (typeof importScripts === \"function\" && !this.isReactNative());\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is React Native\n  */\n  isReactNative() {\n    return (typeof navigator !== \"undefined\" && typeof navigator.product !== \"undefined\" && navigator.product === \"ReactNative\");\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return ((typeof navigator === \"undefined\") && !this.isNode() && !this.isWebWorker() && !this.isReactNative());\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = !!!this.Worker;\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy;\n  }\n\n  /**\n  * @function supportsSharedWorkers - Detects if execution environment supports SharedWorkers\n  */\n  supportsSharedWorkers() {\n    let supports = false;\n    try {\n      let workerBlob = this.generateWorkerBlob(this.selectHamsterWheel());\n      let SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n      supports = true;\n    } catch (e) {\n      supports = false;\n    }\n    return supports;\n  }\n\n  /**\n  * @function findAvailableBlobBuilder - Attempts to locate a data blob builder, with vendor prefixes\n  */\n  findAvailableBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return 'Environment does not support data blobs!';\n  }\n\n  /**\n  * @function createDataBlob - Creates a new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates a blob URI for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    return URL.createObjectURL(this.createDataBlob(`(${workerLogic.toString()})();`));\n  }\n\n  /**\n  * @function supportsTransferableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferableObjects() {\n    return (typeof Uint8Array !== 'undefined');\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports SharedArrayBuffers\n  */\n  supportsAtomicOperations() {\n    return (typeof SharedArrayBuffer !== 'undefined');\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports Proxy objects\n  */\n  supportsProxies() {\n    return (typeof Proxy !== 'undefined');\n  }\n\n  /**\n  * @function selectHamsterWheel - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.isIE) {\n      return this.hamsters.scaffold.legacy.scaffold;\n    }\n    if(this.reactNative) {\n      return 'reactNativeHamster.js';\n    }\n    if (this.node) {\n      return './node_modules/hamsters.js/build/common/node.js';\n    }\n    return this.generateWorkerBlob(this.hamsters.scaffold.regular.scaffold);\n  }\n\n  /**\n  * @function getHabitatKeys - Returns keys for this Habitat instance\n  */\n  getHabitatKeys() {\n    return [\n      'worker','sharedworker',\n      'legacy','proxies',\n      'reactnative','atomics',\n      'transferable','browser',\n      'shell','node','debug',\n      'persistence','importscripts',\n      'maxthreads', 'parentport',\n      'webworker', 'relay'\n    ];\n  }\n}\n\nexport default Habitat;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Pool {\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.threads = new hamsters.observable([]);\n    this.running = new hamsters.observable([]);\n    this.pending = new hamsters.observable([]);\n    this.fetchHamster = this.getAvailableThread.bind(this);\n  }\n\n  /**\n  * @function addWorkToPending - Adds task to queue waiting for available thread\n  * @param {number} index - Index of the task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(index, hamsterFood, task, resolve, reject) {\n    if (this.hamsters.habitat.debug) {\n      \n      task.scheduler.metrics.threads[task.scheduler.count].enqueued_at = Date.now();\n    }\n    this.pending.push({\n      index,\n      hamsterFood,  \n      task,\n      resolve,\n      reject\n    });\n  }\n\n  /**\n  * @function processQueuedItem - Invokes processing of next item in queue\n  * @param {object} hamster - The thread to run the task\n  * @param {object} item - Task to process\n  */\n  processQueuedItem(hamster, item) {\n    if (this.hamsters.habitat.debug) {\n      item.task.scheduler.metrics.threads[item.index.id].dequeued_at = Date.now();\n    }\n    return this.runTask(hamster, item.index, item.hamsterFood, item.task, item.resolve, item.reject);\n  }\n\n  /**\n  * @function getAvailableThread - Gets an available thread\n  * @param {number} threadId - Id of the thread\n  * @returns {object} - The available thread\n  */\n  getAvailableThread(threadId) {\n    if (this.hamsters.habitat.persistence) {\n      return this.threads.get(threadId);\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[id].started_at = Date.now();\n    }\n    task.scheduler.workers.push(id);\n    this.running.push(id);\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {number} maxThreads - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    while (maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    const { selectHamsterWheel, SharedWorker, Worker } = this.hamsters.habitat;\n    const hamsterWheel = selectHamsterWheel();\n    if (this.hamsters.habitat.webWorker) {\n      return new SharedWorker(hamsterWheel, 'SharedHamsterWheel');\n    }\n    return new Worker(hamsterWheel);\n  }\n    \n  /**\n   * @function prepareMeal\n   * @description Prepares message to send to a thread and invoke execution\n   * @param {number} index - Index of the subarray to process\n   * @param {number} subTaskId - Subtask ID\n   * @param {object} task - Provided library functionality options for this task\n   * @returns {object} - Prepared message to send to a thread\n   */\n  prepareMeal(index, subTaskId, task) {\n    index.id = subTaskId;\n\n    // Prepare the base hamsterFood object\n    const hamsterFood = {\n      array: task.input.array && task.input.array.length !== 0 ? \n            this.hamsters.data.getSubArrayFromIndex(index, task.input.array) : [],\n      index: index\n    };\n\n    // Add sharedBuffer if it exists\n    if (typeof task.scheduler.sharedBuffer !== 'undefined') {\n      hamsterFood.sharedBuffer = task.scheduler.sharedBuffer;\n    }\n\n    // List of excluded keys\n    const excludedKeys = new Set(['array', 'threads', 'sharedArray']);\n\n    // Iterate over task.input properties and add to hamsterFood\n    for (const key in task.input) {\n      if (task.input.hasOwnProperty(key) && !excludedKeys.has(key)) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n\n    return hamsterFood;\n  }\n\n  /**\n  * @function runDistributedTask - Runs incoming distributed function using thread\n  * @param {object} incomingMessage - The incoming subTask object\n  */\n  runDistributedTask(incomingMessage, targetClient) {\n    const hamster = this.fetchHamster(this.running.length());\n    let task = incomingMessage.task;\n    let index = incomingMessage.hamsterFood.index;\n    let handleResponse = this.hamsters.distribute.returnDistributedOutput;\n    task.targetClient = targetClient;\n    task.messageId = incomingMessage.messageId;\n    task.isReply = true;\n\n    this.runTask(hamster, index, incomingMessage.hamsterFood, incomingMessage.task, handleResponse, handleResponse);\n  }\n\n  /**\n  * @function runTask - Runs function using thread\n  * @param {object} hamster - The thread to run the task\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, index, hamsterFood, task, resolve, reject) {\n    const threadId = this.running.length();\n    this.hamsters.pool.keepTrackOfThread(task, threadId);\n    if (this.hamsters.habitat.legacy) {\n      this.hamsters.scaffold.legacy.scaffold(hamsterFood, resolve, reject);\n    } else {\n      this.hamsters.pool.trainHamster(index, task, threadId, hamster, resolve, reject);\n      this.hamsters.data.feedHamster(hamster, hamsterFood);\n    }\n    task.scheduler.count += 1;\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(index, subTaskId, task, resolve, reject) {\n    const hamsterFood = this.prepareMeal(index, subTaskId, task);\n    if (this.hamsters.habitat.maxThreads <= this.running.length()) {\n      this.addWorkToPending(index, hamsterFood, task, resolve, reject);\n    } else {\n      if(task.input.distribute) {\n        this.hamsters.distribute.distributeTask(task, hamsterFood, resolve, reject);\n      } else {\n        const hamster = this.fetchHamster(this.running.length());\n        this.runTask(hamster, index, hamsterFood, task, resolve, reject);\n      }\n    }\n  }\n\n  processDistributedReturn(data) {\n    debugger;\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - Gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    if(task.scheduler.sharedBuffer) {\n      task.output = hamsters.data.processDataType(task.input.dataType, task.scheduler.sharedBuffer);\n    }\n    if(task.input.aggregate) {\n      task.output = this.hamsters.data.aggregateThreadOutputs(task.output, task.input.dataType);\n    }\n    if(task.input.sort) {\n      task.output = this.hamsters.data.sortOutput(task.output, task.input.sort)\n    }\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.completed_at = Date.now();\n      console.info(\"Hamsters.js Task Completed: \", task);\n    }\n    if(task.input.distribute) {\n      resolve(task);\n    } else {\n      resolve(task.output);\n    }\n  }\n\n  /**\n  * @function removeFromRunning - Removes a thread from the running pool\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Id of the thread to remove\n  */\n  removeFromRunning(task, threadId) {\n    this.running.splice(this.running.indexOf(threadId), 1);\n    task.scheduler.workers.splice(task.scheduler.workers.indexOf(threadId), 1);\n  }\n\n  /**\n   * @function processReturn - Processes the returned message from a thread\n   * @param {number} index - Index of the subarray processed\n   * @param {object} message - Message returned from the thread\n   * @param {object} task - Provided library functionality options for this task\n   */\n  processReturn(index, message, task) {\n    const isReactNative = this.hamsters.habitat.reactNative;\n    const isNode = this.hamsters.habitat.node;\n    const response = message.data;\n    const messageData = isReactNative ? JSON.parse(message).data : (response.data !== undefined ? response.data : response);\n    const threadId = isNode ? message.index.id : response.index.id;\n\n    if (task.scheduler.threads !== 1) {\n      if (isReactNative || task.input.mixedOutput) {\n          task.output[threadId] = messageData;\n      } else {\n        this.hamsters.data.addThreadOutputWithIndex(task, index, messageData);\n      }\n    } else {\n      task.output = messageData;\n    }\n  }\n\n  /**\n  * @function setOnMessage - Sets the message handlers for a thread\n  * @param {object} hamster - The thread to set the handlers on\n  * @param {function} onThreadResponse - Handler for thread response\n  * @param {object} habitat - Habitat configuration\n  * @param {function} reject - onError method\n  */\n  setOnMessage(hamster, onThreadResponse, reject) {\n    if (this.hamsters.habitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onmessageerror = reject;\n      hamster.port.onerror = reject;\n    } else if (this.hamsters.habitat.node) {\n      hamster.once('message', onThreadResponse);\n      hamster.once('onmessageerror', reject);\n      hamster.once('error', reject);\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = reject;\n      hamster.onerror = reject;\n    }\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Id of the thread to train\n  * @param {object} hamster - The thread to train\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(index, task, threadId, hamster, resolve, reject) {\n    const onThreadResponse = (message) => {\n      this.hamsters.pool.processReturn(index, message, task);\n      if (this.hamsters.habitat.debug) {\n        task.scheduler.metrics.threads[threadId].completed_at = Date.now();\n      }\n      this.hamsters.pool.removeFromRunning(task, threadId);\n      if (task.scheduler.workers.length === 0 && task.scheduler.count === task.scheduler.threads) {\n        this.hamsters.pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (!this.hamsters.habitat.persistence) {\n        hamster.terminate();\n      }\n      if (this.hamsters.pool.pending.length() !== 0) {\n        const queueHamster = this.hamsters.pool.fetchHamster(this.hamsters.pool.running.length());\n        this.hamsters.pool.processQueuedItem(queueHamster, this.hamsters.pool.pending.shift());\n      }\n    };\n    this.hamsters.pool.setOnMessage(hamster, onThreadResponse, reject);\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  */\n  scheduleTask(task) {\n    let i = 0;\n  \treturn new Promise((resolve, reject) => {\n      if(this.hamsters.debug) {\n        task.scheduler.metrics.started_at = Date.now();\n      }\n      while (i < task.scheduler.threads) {\n        this.hamsterWheel(task.scheduler.indexes[i], i, task, resolve, reject);\n        i += 1;\n      }\n    });\n  }\n}\n\nexport default Pool;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters; // Set the hamsters object as a property of Data class\n    this.getSubArrayFromIndex = this.getSubArrayUsingIndex.bind(this); // Bind getSubArrayUsingIndex function\n    this.getSubArrayIndexes = this.calculateIndexes.bind(this); // Bind calculateIndexes function\n    this.sortOutput = this.sortTaskOutput.bind(this); // Bind sortTaskOutput function\n    this.aggregateThreadOutputs = this.aggregateThreadOutputs.bind(this);\n    this.processDataType = this.typedArrayFromBuffer;\n    this.prepareFunction = this.prepareWorkerTask.bind(this); // Bind prepareWorkerTask function\n    this.feedHamster = this.messageWorkerThread.bind(this); // Bind messageWorkerThread function\n    this.getBufferSize = this.getBufferSize;\n    this.createSharedBuffer = this.createSharedBuffer.bind(this);\n    this.getDataType = this.getDataType;\n    this.setupSharedArrayBuffer = this.setupSharedArrayBuffer.bind(this);\n  }\n\n  /**\n  * @function messageWorkerThread - Prepares message to send to thread\n  * @param {object} hamstersHabitat - Hamsters Habitat instance\n  * @param {Worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorkerThread(hamster, hamsterFood) {\n    if(this.hamsters.habitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    if (this.hamsters.habitat.webWorker) {\n      return hamster.port.postMessage(hamsterFood);\n    }\n    return hamster.postMessage(hamsterFood, this.hamsters.data.getTransferableObjects(hamsterFood));\n  }\n\n  getTransferableObjects(obj) {\n    const typedArrayBuffers = [];\n    const transferableObjects = [];\n    const typedArrayTypes = [\n      'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', \n      'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n    ];\n    const otherTransferables = [\n      'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n    ];\n    const globalContext = typeof window !== 'undefined' ? window : global;\n  \n    for (const prop in obj) {\n      for (const type of typedArrayTypes) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          typedArrayBuffers.push(obj[prop].buffer);\n          break;\n        }\n      }\n  \n      for (const type of otherTransferables) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          transferableObjects.push(obj[prop]);\n          break;\n        }\n      }\n    }\n  \n    return typedArrayBuffers.concat(transferableObjects);\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'Uint32': Uint32Array,\n      'Uint16': Uint16Array,\n      'Uint8': Uint8Array,\n      'Uint8clamped': Uint8ClampedArray,\n      'Int32': Int32Array,\n      'Int16': Int16Array,\n      'Int8': Int8Array,\n      'Float32': Float32Array,\n      'Float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return buffer;\n    }\n    return new types[dataType](buffer);\n  }\n\n  /**\n  * @function prepareWorkerTask - Prepares function for thread, strips whitespace\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareWorkerTask(functionBody) {\n    let functionString = String(functionBody);\n    return functionString.substring((functionString.indexOf(\"{\") + 1), (functionString.length -1));\n  }\n\n  /**\n  * @function sortTaskOutput - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortTaskOutput(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n   * @function getBufferSize - Gets the byte length of the input array\n   * @param {TypedArray} array - The input typed array\n   * @returns {number} - The byte length of the array\n   */\n  getBufferSize(array) {\n    return array.byteLength;\n  }\n\n  /**\n   * @function createSharedBuffer - Creates a SharedArrayBuffer based on the input array's byte length\n   * @param {TypedArray} array - The input typed array\n   * @returns {SharedArrayBuffer} - The created SharedArrayBuffer\n   */\n  createSharedBuffer(array) {\n    const byteLength = this.getBufferSize(array);\n    const sharedBuffer = new SharedArrayBuffer(byteLength);\n    const sharedArray = new array.constructor(sharedBuffer);\n\n    // Copy data from the input array to the shared array\n    sharedArray.set(array);\n\n    return sharedBuffer;\n  }\n\n  /**\n   * @function setupSharedArrayBuffer - Sets up the shared buffer and corresponding typed array\n   * @param {TypedArray} array - The input typed array\n   * @returns {object} - SharedArrayBuffer;\n   */\n  setupSharedArrayBuffer(array) {\n    return this.createSharedBuffer(array);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function addThreadOutputWithIndex - Joins individual thread outputs into single result\n  * @param {object} task - Hamsters task object\n  * @param {object} index - Index information\n  * @param {array} output - Output array\n  */\n  addThreadOutputWithIndex(task, index, output) {\n    let i = 0;\n    const outputLength = output.length;\n    for (i; i < outputLength; i++) {\n      task.output[(index.start + i)] = output[i];\n    }\n  }\n\n  /**\n   * @function calculateIndexes - Splits a single array into multiple equal sized subarrays\n   * @param {array} array - Array to split\n   * @param {number} n - Number of subarrays to create\n   */\n  calculateIndexes(array, n) {\n    // If n is 1, return the whole array range\n    if (n === 1) {\n      return [{ start: 0, end: array.length - 1 }];\n    }\n\n    const indexes = [];\n    const segmentSize = Math.floor(array.length / n);\n    let startIndex = 0;\n\n    for (let i = 0; i < n; i++) {\n      const endIndex = startIndex + segmentSize - 1;\n      indexes.push({ start: startIndex, end: endIndex });\n      startIndex = endIndex + 1;\n    }\n\n    // Adjust the last segment to cover any remaining elements\n    if (startIndex < array.length) {\n      indexes[n - 1].end = array.length - 1;\n    }\n\n    return indexes;\n  }\n  \n\n  /**\n  * @function getSubArrayUsingIndex - Slices subarray based on provided index\n  * @param {object} index - Index information\n  * @param {object} inputArray - Hamsters task object\n  */\n  getSubArrayUsingIndex(index, inputArray) {\n    return inputArray.slice(index.start, index.end + 1);\n  }\n}\n\nexport default Data;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Task {\n  /**\n   * @constructor\n   * @param {object} habitat - The environment settings\n   * @param {object} data - Data utility methods\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  constructor(hamsters, params, functionToRun) {\n    'use strict';\n\n    this.input = params;\n    this.output = [];\n    this.scheduler = {\n      count: 0,\n      threads: params.threads || 1,\n      workers: []\n    };\n\n    if (hamsters.habitat.legacy) {\n      this.setupLegacyTask(hamsters, functionToRun);\n    } else {\n      this.setupModernTask(hamsters, params, functionToRun);\n    }\n\n    if (hamsters.habitat.debug) {\n      this.setupDebugMetrics();\n    }\n  }\n\n  /**\n   * @method setupLegacyTask\n   * @description Sets up task for legacy environments\n   * @param {function} functionToRun - Function to execute\n   */\n  setupLegacyTask(hamsters, functionToRun) {\n    this.scheduler.threads = 1;\n    if (!hamsters.habitat.node && !hamsters.habitat.isIE) {\n      this.input.hamstersJob = functionToRun;\n    }\n  }\n\n  /**\n   * @method setupModernTask\n   * @description Sets up task for modern environments\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  setupModernTask(hamsters, params, functionToRun) {\n    this.input.hamstersJob = hamsters.habitat.legacy ? functionToRun : hamsters.data.prepareFunction(functionToRun);\n    if (params.sharedArray && hamsters.habitat.atomics) {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.sharedArray, this.scheduler.threads);\n      this.scheduler.sharedBuffer = hamsters.data.setupSharedArrayBuffer(params.sharedArray);\n      this.input.sharedArray = []; //Reduce ram usage on main thread, do not preserve original array its no longer needed.\n    } else {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.array, this.scheduler.threads);\n    }\n  }\n\n  /**\n   * @method setupDebugMetrics\n   * @description Sets up debug metrics if debug mode is enabled\n   */\n  setupDebugMetrics() {\n    this.scheduler.metrics = {\n      created_at: Date.now(),\n      started_at: null,\n      completed_at: null,\n      threads: this.setupThreadMetrics()\n    };\n  }\n\n  setupThreadMetrics() {\n    let i = 0;\n    let threadMetrics = [];\n    while(i < this.scheduler.threads) {\n      threadMetrics.push({\n        created_at: Date.now(),\n        started_at: null,\n        enqueued_at: null,\n        dequeued_at: null,\n        completed_at: null\n      });\n      i += 1;\n    }\n    return threadMetrics;\n  }\n}\n  \nexport default Task;\n  ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass NodeStore {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.cache = new Map();\n    }\n\n    get(key) {\n        if (this.cache.has(key)) {\n            const value = this.cache.get(key);\n            // Refresh the key\n            this.cache.delete(key);\n            this.cache.set(key, value);\n            return Promise.resolve(value);\n        }\n        return Promise.resolve(null);\n    }\n\n    set(key, value) {\n        if (this.cache.size >= this.maxSize) {\n            // Remove the oldest (least recently used) entry\n            const oldestKey = this.cache.keys().next().value;\n            this.cache.delete(oldestKey);\n        }\n        this.cache.set(key, value);\n        return Promise.resolve();\n    }\n\n    clear() {\n        this.cache.clear();\n        return Promise.resolve();\n    }\n}\n\nexport default NodeStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass WebStore {\n    constructor(dbName, storeName, maxSize) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.maxSize = maxSize;\n        this.db = null;\n        this.initDB();\n    }\n\n    initDB() {\n        const self = this;\n        const request = indexedDB.open(this.dbName, 1);\n\n        request.onerror = function(event) {\n            console.error('Error opening database:', event.target.error);\n        };\n\n        request.onupgradeneeded = function(event) {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains(self.storeName)) {\n                const objectStore = db.createObjectStore(self.storeName, { keyPath: 'key' });\n                objectStore.createIndex('by_key', 'key', { unique: true });\n                objectStore.createIndex('by_timestamp', 'timestamp');\n            }\n        };\n\n        request.onsuccess = function(event) {\n            self.db = event.target.result;\n        };\n    }\n\n    get(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve(null);\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const result = event.target.result;\n                if (result) {\n                    self.updateTimestamp(key).then(() => resolve(result.value)).catch(reject);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    set(key, value) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            self.checkSize().then(() => {\n                const transaction = self.db.transaction([self.storeName], 'readwrite');\n                const objectStore = transaction.objectStore(self.storeName);\n                const request = objectStore.put({ key: key, value: value, timestamp: Date.now() });\n\n                request.onsuccess = function() {\n                    resolve();\n                };\n\n                request.onerror = function(event) {\n                    reject(event.target.error);\n                };\n            }).catch(reject);\n        });\n    }\n\n    clear() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.clear();\n\n            request.onsuccess = function() {\n                resolve();\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    checkSize() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const countRequest = objectStore.count();\n\n            countRequest.onsuccess = function() {\n                const count = countRequest.result;\n                if (count >= self.maxSize) {\n                    self.evictOldest().then(resolve).catch(reject);\n                } else {\n                    resolve();\n                }\n            };\n\n            countRequest.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    evictOldest() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const index = objectStore.index('by_timestamp');\n            const request = index.openCursor(null, 'next');\n\n            request.onsuccess = function(event) {\n                const cursor = event.target.result;\n                if (cursor) {\n                    cursor.delete().onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    updateTimestamp(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const data = event.target.result;\n                if (data) {\n                    data.timestamp = Date.now();\n                    objectStore.put(data).onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n}\n\nexport default WebStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport NodeStore from './stores/NodeStore';\nimport WebStore from './stores/WebStore';\n\nclass Memoize {\n    constructor(hamsters, maxSize) {\n        'use strict';\n\n        this.hamsters = hamsters;\n        this.store = this.hamsters.habitat.node ? new NodeStore(maxSize) : new WebStore('hamstersjs', 'cacheStore', maxSize);\n    }\n\n    memoize(func) {\n        const self = this;\n        return function(task) {\n            const key = self.generateTaskKey(task);\n\n            return new Promise(function(resolve, reject) {\n                self.store.get(key).then(function(cachedResult) {\n                    if (cachedResult !== null) {\n                        resolve(cachedResult);\n                    } else {\n                        self.applyFunc(func, task).then(function(result) {\n                            self.store.set(key, result).then(function() {\n                                resolve(result);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }\n                }).catch(reject);\n            });\n        };\n    }\n\n    generateTaskKey(task) {\n        const key = JSON.stringify({ input: task.input });\n        return this.hashCode(key);\n    }\n\n    hashCode(str) {\n        let hash = 0, i, chr;\n        if (str.length === 0) return hash;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash.toString();\n    }\n\n    applyFunc(func, args) {\n        return new Promise((resolve, reject) => {\n            try {\n                const result = func.apply(null, args);\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n\nexport default Memoize;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Distribute {\n\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.localConnection = null;\n    this.remoteConnections = new hamsters.observable({});\n    this.clientInfo = new hamsters.observable({});\n    this.sendChannels = new hamsters.observable({});\n    this.receiveChannels = new hamsters.observable({});\n    this.pcConstraint = null;\n    this.dataConstraint = null;\n    this.ws = null;\n    this.clientId = null;\n    this.pendingPromises = new hamsters.observable({});\n    this.returnDistributedOutput = this.sendDataResponse.bind(this);\n    this.establishConnection = this.initWebSocket.bind(this);\n  }\n\n  initWebSocket() {\n    this.ws = new WebSocket(`${this.hamsters.habitat.relay}`);\n\n    this.ws.onopen = () => {\n      console.info(`Hamsters.js ${this.hamsters.version} connection established`);\n      const registerMessage = {\n        type: 'register',\n        logicalCores: this.hamsters.maxThreads\n      };\n      this.ws.send(JSON.stringify(registerMessage));\n    };\n\n    this.ws.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      switch (message.type) {\n        case 'register':\n          this.handleClientReconnect(message);\n          break;\n        case 'update-client-list':\n          this.updateClientList(message.clients);\n          break;\n        case 'offer':\n          this.handleOffer(message);\n          break;\n        case 'answer':\n          this.handleAnswer(message);\n          break;\n        case 'candidate':\n          this.handleCandidate(message);\n          break;\n        case 'task-response':\n          this.handleTaskResponse(message);\n          break;\n        default:\n          if (this.hamsters.habitat.debug) {\n            console.info(`Hamsters.js ${this.hamsters.version} unknown message type: ${message.type}`);\n          }\n      }\n    };\n\n    this.ws.onerror = (error) => {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} connection error: ${error}`);\n      }\n    };\n\n    this.ws.onclose = () => {\n      if (this.hamsters.habitat.debug) {\n        console.info(`Hamsters.js ${this.hamsters.version} connection closed.`);\n      }\n    };\n  }\n\n  updateClientList(clients) {\n    clients.forEach(client => {\n      if (client.id !== this.clientId && !this.remoteConnections.get(client.id)) {\n        this.createConnection(client.id);\n      }\n    });\n  }\n\n  handleClientReconnect(message) {\n    const newClientId = message.id;\n\n    if (this.clientId === newClientId) {\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} connection error: `, error);\n      }\n      return;\n    }\n\n    if (this.remoteConnections.get(newClientId)) {\n      this.remoteConnections.get(newClientId).close();\n      this.remoteConnections.delete(newClientId);\n    }\n    if (this.sendChannels.get(newClientId)) {\n      this.sendChannels.get(newClientId).close();\n      this.sendChannels.delete(newClientId);\n    }\n    if (this.receiveChannels.get(newClientId)) {\n      this.receiveChannels.get(newClientId).close();\n      this.receiveChannels.delete(newClientId);\n    }\n    this.clientInfo.delete(newClientId);\n\n    this.clientId = newClientId;\n    this.loadClientList();\n  }\n\n  loadClientList() {\n    fetch(`/clients?currentId=${this.clientId}`)\n      .then(response => response.json())\n      .then(data => {\n        this.updateClientList(data);\n      })\n      .catch(error => {\n        if (this.hamsters.habitat.debug) {\n          console.error(`Hamsters.js ${this.hamsters.version} Error fetching client list: ${error}`);\n        }\n      });\n  }\n\n  createConnections() {\n    this.remoteConnections.forEach((_, targetClient) => {\n      this.createConnection(targetClient);\n    });\n  }\n\n  createConnection(targetClient) {\n    if (targetClient === this.clientId || this.remoteConnections.get(targetClient)) {\n      return;\n    }\n\n    const servers = {\n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n    };\n\n    const localConnection = new RTCPeerConnection(servers, this.pcConstraint);\n    const sendChannel = localConnection.createDataChannel('hamstersjs', this.dataConstraint);\n\n    localConnection.onicecandidate = (e) => {\n      if (e.candidate) {\n        this.ws.send(JSON.stringify({ \n          type: 'candidate', \n          target: targetClient, \n          from: this.clientId,\n          logicalCores: this.hamsters.maxThreads,\n          userAgent: navigator.userAgent,\n          candidate: e.candidate\n        }));\n      }\n    };\n\n    sendChannel.onopen = () => {\n      this.onSendChannelStateChange(targetClient);\n    };\n\n    sendChannel.onclose = () => {\n      this.onSendChannelStateChange(targetClient);\n    };\n\n    sendChannel.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      switch (message.type) {\n        case 'ping':\n          this.handlePing(targetClient, message.startTime);\n          break;\n        case 'pong':\n          this.handlePong(targetClient, message.startTime);\n          break;\n        default:\n          this.onReceiveMessageCallback(targetClient, event.data);\n      }\n    };\n\n    localConnection.ondatachannel = (event) => {\n      this.receiveChannelCallback(event, targetClient);\n    };\n\n    this.remoteConnections.set(targetClient, localConnection);\n    this.sendChannels.set(targetClient, sendChannel);\n    this.receiveChannels.set(targetClient, null);\n\n    localConnection.createOffer().then(desc => {\n      localConnection.setLocalDescription(desc);\n      this.ws.send(JSON.stringify({ type: 'offer', target: targetClient, offer: desc }));\n    }).catch(this.onCreateSessionDescriptionError);\n  }\n\n  handleOffer(data) {\n    const targetClient = data.from;\n\n    if (!this.remoteConnections.get(targetClient)) {\n      const servers = {\n        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n      };\n\n      const remoteConnection = new RTCPeerConnection(servers, this.pcConstraint);\n\n      remoteConnection.onicecandidate = (e) => {\n        if (e.candidate) {\n          this.ws.send(JSON.stringify({ type: 'candidate', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, candidate: e.candidate }));\n        }\n      };\n\n      remoteConnection.ondatachannel = (event) => {\n        this.receiveChannelCallback(event, targetClient);\n      };\n\n      const sendChannel = remoteConnection.createDataChannel('hamstersjs', this.dataConstraint);\n      \n      sendChannel.onopen = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onclose = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        switch (message.type) {\n          case 'ping':\n            this.handlePing(targetClient, message.startTime);\n            break;\n          case 'pong':\n            this.handlePong(targetClient, message.startTime);\n            break;\n          default:\n            this.onReceiveMessageCallback(targetClient, event.data);\n        }\n      };\n\n      remoteConnection.setRemoteDescription(new RTCSessionDescription(data.offer)).then(() => {\n        return remoteConnection.createAnswer();\n      }).then(desc => {\n        remoteConnection.setLocalDescription(desc);\n        this.ws.send(JSON.stringify({ type: 'answer', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, answer: desc }));\n      }).catch(this.onCreateSessionDescriptionError);\n\n      this.remoteConnections.set(targetClient, remoteConnection);\n      this.sendChannels.set(targetClient, sendChannel);\n    }\n  }\n\n  storeClientConnectionInfo(data) {\n    const client = {\n      logicalCores: data.logicalCores,\n      userAgent: data.userAgent,\n    };\n    console.log(\"storing client info \", client);\n    this.clientInfo.set(data.from, client);\n  }\n\n  handleAnswer(data) {\n    this.storeClientConnectionInfo(data);\n    const connection = this.remoteConnections.get(data.from);\n    connection.setRemoteDescription(new RTCSessionDescription(data.answer));\n  }\n\n  handleCandidate(data) {\n    this.storeClientConnectionInfo(data);\n    const connection = this.remoteConnections.get(data.from);\n    connection.addIceCandidate(new RTCIceCandidate(data.candidate)).catch(this.onAddIceCandidateError);\n  }\n\n  measureLatency(targetClient) {\n    const startTime = performance.now();\n    this.sendPing(targetClient, startTime);\n  }\n\n  sendPing(targetClient, startTime) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'ping', startTime }));\n    }\n  }\n\n  handlePing(targetClient, startTime) {\n    console.log(\"Remote Connections \", this.remoteConnections);\n    const sendChannel = this.receiveChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'pong', startTime }));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent ping to ${targetClient}`);\n      }\n    }\n  }\n\n  handlePong(targetClient, startTime) {\n    const latency = performance.now() - startTime;\n    this.clientInfo.set(targetClient, { ...this.clientInfo.get(targetClient), latency });\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} received pong from ${targetClient} with latency: ${latency.toFixed(2)}ms`);\n    }\n  }\n\n  fetchDistributedClient() {\n    const sendChannelKeys = Array.from(this.sendChannels.keys());\n    if (sendChannelKeys.length === 0) {\n      if (this.hamsters.habitat.debug) {\n        console.warn(`Hamsters.js ${this.hamsters.version} no send channels available.`);\n      }\n      return null;\n    }\n\n    let minLatency = Infinity;\n    let targetClient = null;\n\n    sendChannelKeys.forEach(clientId => {\n      const channel = this.sendChannels.get(clientId);\n      const client = this.clientInfo.get(clientId);\n      if (channel.readyState === 'open' && client.latency < minLatency) {\n        minLatency = client.latency;\n        targetClient = clientId;\n      }\n    });\n\n    return targetClient;\n  }\n\n  distributeTask(task, hamsterFood, resolve, reject) {\n    const targetClient = this.fetchDistributedClient();\n    if (!targetClient) {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} no target client found.`);\n      }\n      reject('No target client found.');\n      return;\n    }\n\n    const messageId = this.generateUniqueId();\n\n    const subTask = {\n      hamsterFood,\n      index: hamsterFood.index,\n      task,\n      messageId,\n    };\n\n    this.pendingPromises.set(messageId, { resolve, reject });\n\n    this.sendData({ targetClient, data: subTask });\n  }\n\n  handleTaskResponse(incomingMessage) {\n    const { messageId, output, error } = incomingMessage;\n    const pendingPromise = this.pendingPromises.get(messageId);\n\n    if (pendingPromise) {\n      if (error) {\n        pendingPromise.reject(error);\n      } else {\n        pendingPromise.resolve(output);\n      }\n\n      this.pendingPromises.delete(messageId);\n    }\n  }\n\n  sendData({ targetClient, data }) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify(data));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent data to: `, targetClient);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: `, targetClient);\n      }\n    }\n  }\n\n  sendDataResponse(data) {\n    const targetClient = data.targetClient;\n    const sendChannel = this.receiveChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify(data));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent response to: `, targetClient);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: `, targetClient);\n      }\n    }\n  }\n\n  closeDataChannels() {\n    for (const targetClient of this.sendChannels.keys()) {\n      const sendChannel = this.sendChannels.get(targetClient);\n      if (sendChannel) {\n        sendChannel.close();\n        this.sendChannels.delete(targetClient);\n      }\n      const receiveChannel = this.receiveChannels.get(targetClient);\n      if (receiveChannel) {\n        receiveChannel.close();\n        this.receiveChannels.delete(targetClient);\n      }\n      const remoteConnection = this.remoteConnections.get(targetClient);\n      if (remoteConnection) {\n        remoteConnection.close();\n        this.remoteConnections.delete(targetClient);\n      }\n      this.clientInfo.delete(targetClient);\n    }\n    this.localConnection = null;\n  }\n\n  receiveChannelCallback(event, targetClient) {\n    const receiveChannel = event.channel;\n\n    receiveChannel.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      switch (message.type) {\n        case 'ping':\n          this.handlePing(targetClient, message.startTime);\n          break;\n        case 'pong':\n          this.handlePong(targetClient, message.startTime);\n          break;\n        default:\n          this.onReceiveMessageCallback(targetClient, event.data);\n      }\n    };\n\n    receiveChannel.onopen = () => {\n      this.onReceiveChannelStateChange(targetClient);\n    };\n\n    receiveChannel.onclose = () => {\n      this.onReceiveChannelStateChange(targetClient);\n    };\n\n    this.receiveChannels.set(targetClient, receiveChannel);\n  }\n\n  onReceiveMessageCallback(targetClient, data) {\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} received message!`);\n    }\n    const incomingMessage = JSON.parse(data);\n\n    if (incomingMessage.isReply) {\n      this.handleTaskResponse(incomingMessage);\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} response received for task: `, incomingMessage);\n      }\n    } else {\n      this.hamsters.pool.runDistributedTask(incomingMessage, targetClient);\n    }\n  }\n\n  onSendChannelStateChange(targetClient) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    this.measureLatency(targetClient);\n    if (sendChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} send channel state changed for ${targetClient}: ${sendChannel.readyState}`);\n    }\n  }\n\n  onReceiveChannelStateChange(targetClient) {\n    const receiveChannel = this.receiveChannels.get(targetClient);\n    if (receiveChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} receive channel state changed for ${targetClient}: ${receiveChannel.readyState}`);\n    }\n  }\n\n  generateUniqueId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  onCreateSessionDescriptionError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to create session description: ${error}`);\n    }\n  }\n\n  onAddIceCandidateError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to add ICE candidate: ${error}`);\n    }\n  }\n}\n\nexport default Distribute;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Observable {\n  constructor(initialData = {}) {\n    this.data = Array.isArray(initialData) ? [...initialData] : { ...initialData };\n    this.events = {};\n  }\n\n  // Allow listeners to register for specific events\n  on(event, callback) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  }\n\n  // Notify listeners about the event\n  emit(event, ...args) {\n    if (this.events[event]) {\n      this.events[event].forEach(callback => callback(...args));\n    }\n  }\n\n  set(key, value) {\n    if (typeof key === 'string') {\n        const keys = key.split('.');\n        let current = this.data;\n        for (let i = 0; i < keys.length - 1; i++) {\n            current = current[keys[i]];\n        }\n        current[keys[keys.length - 1]] = value;\n    } else if (typeof key === 'object') {\n      this.data[key] = value;\n    }\n    this.emit('change', this.data);\n  }\n\n  get(key) {\n    return this.data[key];\n  }\n\n  push(...items) {\n    if (Array.isArray(this.data)) {\n      this.data.push(...items);\n      this.emit('change', this.data);\n    }\n  }\n\n  pop() {\n    if (Array.isArray(this.data)) {\n      const item = this.data.pop();\n      this.emit('change', this.data);\n      return item;\n    }\n  }\n\n  splice(start, deleteCount, ...items) {\n    const result = this.data.splice(start, deleteCount, ...items);\n    this.emit('change', this.data);\n    return result;\n  }\n\n  indexOf(item) {\n    return this.data.indexOf(item);\n  }\n\n  length() {\n    return this.data.length;\n  }\n\n  delete(property) {\n    if (!Array.isArray(this.data)) {\n      delete this.data[property];\n      this.emit('change', this.data);\n    }\n  }\n\n  // Get current data\n  getData() {\n    return this.data;\n  }\n}\n\nexport default Observable;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n//Core Functionality\nimport Habitat from './core/habitat';\nimport Pool from './core/pool';\nimport Data from './core/data';\nimport Task from './core/task';\n\n//Worker Scaffolds\nimport Legacy from './scaffold/legacy';\nimport Regular from './scaffold/regular';\nimport Shared from './scaffold/shared';\n\n//Features\nimport Memoize from './feature/memoize';\nimport Distribute from './feature/distribute';\nimport Observable from './feature/observable';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.version = '5.6.1';\n    this.run = this.hamstersRun.bind(this);\n    this.promise = this.hamstersPromise.bind(this);\n    this.init = this.initializeLibrary.bind(this);\n    this.data = {};\n    this.pool = {};\n    this.scaffold = {};\n    this.habitat = {};\n    this.memoize = {};\n  }\n\n  /**\n  * @function inititializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    this.observable = Observable;\n    this.data = new Data(this);\n    this.pool = new Pool(this);\n    this.scaffold = {\n      legacy: new Legacy(),\n      regular: new Regular(),\n      shared: new Shared()\n    };\n    this.habitat = new Habitat(this);\n    this.memoize = new Memoize(this, 100); //Set a maximum of 100 memoized function results, LRU cache\n    this.distribute = new Distribute(this);\n    this.processStartOptions(startOptions);\n    \n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      this.pool.spawnHamsters(this.habitat.maxThreads);\n    }\n    this.maxThreads = this.habitat.maxThreads;\n\n    if(this.habitat.relay) {\n      console.info(`Hamsters.js ${this.version} establishing connection to relay`);\n      this.distribute.establishConnection();\n    }\n\n    console.info(`Hamsters.js ${this.version} initialized using up to ${this.habitat.maxThreads} threads`);\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      for (const key of Object.keys(startOptions)) {\n        if (this.habitat.keys.includes(key.toLowerCase())) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          this[key] = startOptions[key];\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    let forceLegacyMode = (typeof startOptions !== 'undefined' && typeof startOptions.legacy !== 'undefined');\n    if (forceLegacyMode) {\n      forceLegacyMode = startOptions.legacy;\n    }\n    if (typeof this.habitat.Worker === 'function' && !forceLegacyMode) {\n      this.habitat.legacy = this.habitat.isIE;\n    }\n  }\n\n  /**\n   * @async\n   * @function scheduleTask - Schedules a new function to be processed by the library\n   * @param {object} task - Provided library execution options\n   * @param {function} resolve - Parent function promise resolve method\n   * @param {function} reject - Parent function promise reject method\n   * @return {Promise} Promise object on completion\n   */\n  scheduleTask(task, resolve, reject) {\n    if (task.input.memoize) {\n      // Pass the task object to the memoized function\n      const memoizedFunction = this.memoize.memoize(() => this.pool.scheduleTask(task));\n      return memoizedFunction(task).then(resolve).catch(reject);\n    }\n    return this.pool.scheduleTask(task).then(resolve).catch(reject);\n  }\n\n  /**\n   * @async\n   * @function hamstersPromise - Calls library functionality using async promises\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   * @return {Promise} Promise resolving with results from functionToRun\n   */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      this.scheduleTask(new Task(this, params, functionToRun), resolve, reject);\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    this.scheduleTask(new Task(this, params, functionToRun), onSuccess, onError);\n  }\n}\n\nexport default new hamstersjs();\n"],"names":["root","factory","exports","module","define","amd","this","Legacy","constructor","hamsters","scaffold","params","resolve","reject","rtn","data","dataType","habitat","reactNative","self","node","isIE","eval","hamstersJob","Regular","handleDataType","sharedArray","typedArrayFromBuffer","getTransferableObjects","buffer","types","Uint32Array","Uint16Array","Uint8Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","returnResponse","buffers","length","postMessage","obj","transferableObjects","Set","typedArrayTypes","globalContext","window","allTypes","prop","hasOwnProperty","type","includes","add","Array","from","onmessage","message","index","sharedBuffer","bind","Shared","addEventListener","incomingConnection","port","ports","start","incomingMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","e","prototype","call","Habitat","debug","importScripts","relay","memoize","persistence","browser","isBrowser","webWorker","isWebWorker","isNode","isReactNative","shell","isShell","transferable","supportsTransferableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isInternetExplorer","selectHamsterWheel","sharedWorker","locateSharedWorkerObject","locateBlobBuilder","findAvailableBlobBuilder","legacy","isLegacyEnvironment","Worker","locateWorkerObject","maxThreads","determineGlobalThreads","keys","getHabitatKeys","max","navigator","hardwareConcurrency","isFirefox","os","cpus","userAgent","toLowerCase","indexOf","SharedWorker","process","product","isLegacy","supportsSharedWorkers","supports","workerBlob","generateWorkerBlob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","createDataBlob","textContent","Blob","blob","append","getBlob","workerLogic","URL","createObjectURL","toString","SharedArrayBuffer","Proxy","regular","Pool","threads","observable","running","pending","fetchHamster","getAvailableThread","addWorkToPending","hamsterFood","task","scheduler","metrics","count","enqueued_at","Date","now","push","processQueuedItem","hamster","item","id","dequeued_at","runTask","threadId","spawnHamster","keepTrackOfThread","started_at","workers","spawnHamsters","hamsterWheel","prepareMeal","subTaskId","array","input","getSubArrayFromIndex","excludedKeys","has","runDistributedTask","targetClient","handleResponse","distribute","returnDistributedOutput","messageId","isReply","pool","trainHamster","feedHamster","distributeTask","processDistributedReturn","returnOutputAndRemoveTask","output","processDataType","aggregate","aggregateThreadOutputs","sort","sortOutput","completed_at","console","info","removeFromRunning","splice","processReturn","response","messageData","JSON","parse","mixedOutput","addThreadOutputWithIndex","setOnMessage","onThreadResponse","onmessageerror","onerror","once","terminate","queueHamster","shift","scheduleTask","i","Promise","indexes","Data","getSubArrayUsingIndex","getSubArrayIndexes","calculateIndexes","sortTaskOutput","prepareFunction","prepareWorkerTask","messageWorkerThread","getBufferSize","createSharedBuffer","getDataType","setupSharedArrayBuffer","stringify","typedArrayBuffers","otherTransferables","global","concat","functionBody","functionString","String","substring","arr","order","a","b","reverse","byteLength","set","reduce","len","bufferLength","offset","outputLength","n","end","segmentSize","Math","floor","startIndex","endIndex","inputArray","slice","Task","functionToRun","setupLegacyTask","setupModernTask","setupDebugMetrics","created_at","setupThreadMetrics","threadMetrics","NodeStore","maxSize","cache","Map","value","delete","size","oldestKey","next","clear","WebStore","dbName","storeName","db","initDB","request","indexedDB","open","event","error","target","onupgradeneeded","result","objectStoreNames","contains","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","transaction","updateTimestamp","then","catch","checkSize","put","timestamp","countRequest","evictOldest","openCursor","cursor","Memoize","store","func","generateTaskKey","cachedResult","applyFunc","hashCode","str","chr","hash","charCodeAt","args","apply","Distribute","localConnection","remoteConnections","clientInfo","sendChannels","receiveChannels","pcConstraint","dataConstraint","ws","clientId","pendingPromises","sendDataResponse","establishConnection","initWebSocket","WebSocket","onopen","version","registerMessage","logicalCores","send","handleClientReconnect","updateClientList","clients","handleOffer","handleAnswer","handleCandidate","handleTaskResponse","onclose","forEach","client","createConnection","newClientId","close","loadClientList","log","fetch","json","createConnections","_","RTCPeerConnection","iceServers","urls","sendChannel","createDataChannel","onicecandidate","candidate","onSendChannelStateChange","handlePing","startTime","handlePong","onReceiveMessageCallback","ondatachannel","receiveChannelCallback","createOffer","desc","setLocalDescription","offer","onCreateSessionDescriptionError","remoteConnection","setRemoteDescription","RTCSessionDescription","createAnswer","answer","storeClientConnectionInfo","addIceCandidate","RTCIceCandidate","onAddIceCandidateError","measureLatency","performance","sendPing","readyState","latency","toFixed","fetchDistributedClient","sendChannelKeys","warn","minLatency","Infinity","channel","generateUniqueId","subTask","sendData","pendingPromise","_ref","closeDataChannels","receiveChannel","onReceiveChannelStateChange","random","substr","Observable","initialData","arguments","isArray","events","on","callback","emit","_len","_key","split","current","pop","deleteCount","_len2","items","_key2","property","getData","hamstersjs","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","shared","processStartOptions","forceLegacyMode","memoizedFunction","onSuccess","onError"],"sourceRoot":""}