{"version":3,"file":"hamsters.web.min.js","mappings":"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","sources":["webpack://hamsters/webpack/universalModuleDefinition","webpack://hamsters/./scaffold/legacy.js","webpack://hamsters/./scaffold/regular.js","webpack://hamsters/./scaffold/shared.js","webpack://hamsters/webpack/bootstrap","webpack://hamsters/webpack/runtime/define property getters","webpack://hamsters/webpack/runtime/global","webpack://hamsters/webpack/runtime/hasOwnProperty shorthand","webpack://hamsters/./core/habitat.js","webpack://hamsters/./core/pool.js","webpack://hamsters/./core/data.js","webpack://hamsters/./core/task.js","webpack://hamsters/./feature/stores/NodeStore.js","webpack://hamsters/./feature/stores/WebStore.js","webpack://hamsters/./feature/memoize.js","webpack://hamsters/./feature/distribute.js","webpack://hamsters/./feature/observable.js","webpack://hamsters/./hamsters.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hamsters\"] = factory();\n\telse\n\t\troot[\"hamsters\"] = factory();\n})(this, () => {\nreturn ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Legacy {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor(hamsters) {\n      this.hamsters = hamsters;\n      this.scaffold = (params, resolve, reject) => {\n        var rtn = {\n          data: [],\n          dataType: (typeof params.dataType !== \"undefined\" ? params.dataType : null)\n        };\n        if(this.hamsters.habitat.reactNative) {\n          self.rtn = rtn;\n        }\n        if(this.hamsters.habitat.node || this.hamsters.habitat.isIE) {\n          eval(params.hamstersJob);\n        } else {\n          params.hamstersJob();\n        }\n        resolve(rtn.data);\n      }\n    }\n  }\n  \n  export default Legacy;\n  ","class Regular {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n        this.scaffold = function() {\n            self.params = {};\n            self.rtn = {};\n\n            self.onmessage = function (message) {\n                this.params = message.data;\n                this.rtn = {\n                    data: [],\n                    dataType: (typeof this.params.dataType !== 'undefined' ? this.params.dataType : null),\n                    index: this.params.index\n                };\n                if (this.params.sharedBuffer) {\n                    this.params.sharedArray = typedArrayFromBuffer(this.params.dataType, this.params.sharedBuffer);\n                }\n                eval(this.params.hamstersJob);\n                const buffers = handleDataType(this.rtn);\n                returnResponse(this.rtn, buffers);\n            }.bind(this);\n\n            function handleDataType(rtn) {\n                if (this.params.sharedArray) {\n                    // Do nothing here, we don't need to return a buffer rtn.data is useless here\n                } else if (this.params.dataType) {\n                    rtn.data = typedArrayFromBuffer(rtn.dataType, rtn.data);\n                }\n                return getTransferableObjects(rtn); // Return transferable objects\n            }\n\n            function typedArrayFromBuffer(dataType, buffer) {\n                const types = {\n                    'Uint32': Uint32Array,\n                    'Uint16': Uint16Array,\n                    'Uint8': Uint8Array,\n                    'Uint8clamped': Uint8ClampedArray,\n                    'Int32': Int32Array,\n                    'Int16': Int16Array,\n                    'Int8': Int8Array,\n                    'Float32': Float32Array,\n                    'Float64': Float64Array\n                };\n                return types[dataType] ? new types[dataType](buffer) : buffer;\n            }\n\n            function returnResponse(rtn, buffers) {\n                if (buffers && buffers.length > 0) {\n                    postMessage(rtn, buffers);  // PostMessage with transferable objects\n                } else {\n                    postMessage(rtn);  // PostMessage without transferable objects\n                }\n            }\n\n            function getTransferableObjects(obj) {\n                const transferableObjects = new Set();\n                const typedArrayTypes = [\n                    'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array',\n                    'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n                ];\n                const otherTransferables = [\n                    'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n                ];\n\n                const globalContext = typeof self !== 'undefined' ? self : window;\n\n                const allTypes = [...typedArrayTypes, ...otherTransferables];\n\n                for (const prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        for (const type of allTypes) {\n                            if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n                                if (typedArrayTypes.includes(type)) {\n                                    transferableObjects.add(obj[prop].buffer);\n                                } else {\n                                    transferableObjects.add(obj[prop]);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return Array.from(transferableObjects);\n            }\n        }\n    }\n}\n\nexport default Regular;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Shared {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n      this.scaffold = function() {\n        self.params = {};\n        self.rtn = {};\n    \n        addEventListener('connect', (incomingConnection) => {\n          var port = incomingConnection.ports[0];\n          port.start();\n          port.addEventListener('message', (incomingMessage) => {\n            this.params = incomingMessage.data;\n            this.rtn = {\n              data: [],\n              dataType: this.params.dataType\n            };\n            eval(\"(\" + this.params.hamstersJob + \")\")();\n            port.postMessage(this.rtn);\n          }, false);\n        }, false);\n      }\n    }\n  }\n  \n  export default Shared;\n  ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.debug = false;\n    this.importScripts = null;\n    this.relay = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferable = this.supportsTransferableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE = this.isInternetExplorer();\n    this.selectHamsterWheel = this.selectHamsterWheel.bind(this);\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.locateBlobBuilder = this.findAvailableBlobBuilder();\n    this.legacy = this.isLegacyEnvironment();\n    this.Worker = this.locateWorkerObject();\n    this.maxThreads = this.determineGlobalThreads();\n    this.keys = this.getHabitatKeys();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(this.browser && typeof navigator.hardwareConcurrency !== \"undefined\") {\n      max = navigator.hardwareConcurrency;\n      if(this.isFirefox()) {\n        max = (max > 20 ? 20 : max);\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function isFirefox - Detect firefox browser\n  */\n  isFirefox() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return (typeof Worker !== 'undefined' ? Worker : false);\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return (typeof SharedWorker !== 'undefined' ? SharedWorker : false);\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return (typeof window === \"object\");\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.indexOf(\"MSIE \") !== -1 || navigator.userAgent.indexOf(\"Trident/\") !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return (typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser);\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a web worker\n  */\n  isWebWorker() {\n    return (typeof importScripts === \"function\" && !this.isReactNative());\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is React Native\n  */\n  isReactNative() {\n    return (typeof navigator !== \"undefined\" && typeof navigator.product !== \"undefined\" && navigator.product === \"ReactNative\");\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return ((typeof navigator === \"undefined\") && !this.isNode() && !this.isWebWorker() && !this.isReactNative());\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = !!!this.Worker;\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy;\n  }\n\n  /**\n  * @function supportsSharedWorkers - Detects if execution environment supports SharedWorkers\n  */\n  supportsSharedWorkers() {\n    return (typeof SharedWorker !== 'undefined');\n  }\n\n  /**\n  * @function findAvailableBlobBuilder - Attempts to locate a data blob builder, with vendor prefixes\n  */\n  findAvailableBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return 'Environment does not support data blobs!';\n  }\n\n  /**\n  * @function createDataBlob - Creates a new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates a blob URI for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    return URL.createObjectURL(this.createDataBlob(this.generateWorkerString(workerLogic)));\n  }\n\n  generateWorkerString(workerLogic) {\n    return `(${workerLogic.toString()})();`;\n  }\n  /**\n  * @function supportsTransferableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferableObjects() {\n    return (typeof Uint8Array !== 'undefined');\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports SharedArrayBuffers\n  */\n  supportsAtomicOperations() {\n    return (typeof SharedArrayBuffer !== 'undefined');\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports Proxy objects\n  */\n  supportsProxies() {\n    return (typeof Proxy !== 'undefined');\n  }\n\n  /**\n  * @function selectHamsterWheel - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.hamsters.scaffold.custom) {\n      return this.hamsters.scaffold.custom;\n    }\n    if(this.isIE) {\n      return this.hamsters.scaffold.legacy.scaffold;\n    }\n    if(this.reactNative) {\n      return 'reactNativeHamster.js';\n    }\n    if (this.node) {\n      return './node_modules/hamsters.js/build/common/node.js';\n    }\n    return 'data:text/javascript,' + encodeURIComponent(this.generateWorkerString(this.hamsters.scaffold.regular.scaffold));\n  }\n\n  /**\n  * @function getHabitatKeys - Returns keys for this Habitat instance\n  */\n  getHabitatKeys() {\n    return [\n      'worker','sharedworker',\n      'legacy','proxies',\n      'reactnative','atomics',\n      'transferable','browser',\n      'shell','node','debug',\n      'persistence','importscripts',\n      'maxthreads', 'parentport',\n      'webworker', 'relay'\n    ];\n  }\n}\n\nexport default Habitat;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Pool {\n\t\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.threads = new hamsters.observable([]);\n    this.running = new hamsters.observable([]);\n    this.pending = new hamsters.observable([]);\n    this.fetchHamster = this.getAvailableThread;\n  }\n\n  /**\n  * @function fetchHamster - Adds task to queue waiting for available thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(index, task, resolve, reject) {\n    if(this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[task.scheduler.count].enqueued_at = Date.now();\n    }\n    this.pending.push({\n      index: index,\n      count: task.scheduler.count,  \n      task: task,\n      resolve: resolve,\n      reject: reject\n    });\n  }\n\n  /**\n  * @function processQueuedItem - Invokes processing of next item in queue\n  * @param {object} item - Task to process\n  */\n  processQueuedItem(hamster, item) {\n    if(this.hamsters.habitat.debug) {\n      item.task.scheduler.metrics.threads[item.count].dequeued_at = Date.now();\n    }\n  \treturn this.runTask(hamster, item.index, item.task, item.resolve, item.reject);\n  }\n\n  /**\n  * @function getAvailableThread- Keeps track of threads running, scoped globally and to task\n  * @param {number} threadId - Id of thread\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  */\n  getAvailableThread(threadId) {\n    if(this.hamsters.habitat.persistence) {\n      return this.threads.get(threadId);\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    if(this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[id].started_at = Date.now();\n    }\n    task.scheduler.workers.push(id); //Keep track of threads scoped to current task\n    this.running.push(id); //Keep track of all currently running threads\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {number} maxThreds - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    for (maxThreads; maxThreads > 0; maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    const { selectHamsterWheel, Worker } = this.hamsters.habitat;\n    const hamsterWheel = selectHamsterWheel();\n    return new Worker(hamsterWheel);\n  }\n\n  /**\n   * @function prepareMeal\n   * @description Prepares message to send to a thread and invoke execution\n   * @param {number} index - Index of the subarray to process\n   * @param {number} subTaskId - Subtask ID\n   * @param {object} task - Provided library functionality options for this task\n   * @returns {object} - Prepared message to send to a thread\n   */\n  prepareMeal(index, task) {\n    // Prepare the base hamsterFood object\n    const hamsterFood = {\n      array: task.input.array && task.input.array.length !== 0 ? \n            this.hamsters.data.getSubArrayFromIndex(index, task.input.array) : [],\n      index: index\n    };\n\n    // Add sharedBuffer if it exists\n    if (typeof task.scheduler.sharedBuffer !== 'undefined') {\n      hamsterFood.sharedBuffer = task.scheduler.sharedBuffer;\n    }\n\n    // List of excluded keys\n    const excludedKeys = new Set(['array', 'threads', 'sharedArray']);\n\n    // Iterate over task.input properties and add to hamsterFood\n    for (const key in task.input) {\n      if (task.input.hasOwnProperty(key) && !excludedKeys.has(key)) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n\n    return hamsterFood;\n  }\n\n  /**\n  * @function hamsterWheel - Runs function using thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, index, task, resolve, reject) {\n  \tlet threadId = this.running.length();\n    index.id = threadId;\n    let hamsterFood = this.prepareMeal(index, task);\n    this.keepTrackOfThread(task, threadId);\n    if(this.hamsters.habitat.legacy) {\n      this.hamsters.habitat.legacyWheel(this.hamsters.habitat, hamsterFood, resolve, reject);\n    } else {\n      this.hamsters.pool.trainHamster(index, task, threadId, hamster, resolve, reject);\n      this.hamsters.data.feedHamster(hamster, hamsterFood);\n    }\n    task.scheduler.count += 1;\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {object} array - Provided library functionality options for this task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(index, task, resolve, reject) {\n    if(this.hamsters.habitat.maxThreads <= this.running.length()) {\n      return this.addWorkToPending(index, task, resolve, reject);\n    }\n    if(task.input.distribute) {\n      this.hamsters.distribute.distributeTask(task, hamsterFood, resolve, reject);\n    } else {\n      let hamster = this.fetchHamster(this.running.length());\n      return this.runTask(hamster, index, task, resolve, reject);\n    }\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - Gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    if(task.scheduler.sharedBuffer) {\n      task.output = this.hamsters.data.processDataType(task.input.dataType, task.scheduler.sharedBuffer);\n    }\n    if(task.input.aggregate) {\n      task.output = this.hamsters.data.aggregateThreadOutputs(task.output, task.input.dataType);\n    }\n    if(task.input.sort) {\n      task.output = this.hamsters.data.sortOutput(task.output, task.input.sort)\n    }\n    if (this.hamsters.habitat.debug) {\n      const completedAt = Date.now();\n      const startedAt = task.scheduler.metrics.started_at;\n      task.scheduler.metrics.completed_at = completedAt;\n      console.info(`Hamsters.js Task Completed In ${completedAt - startedAt}ms`);\n    }\n    if(task.input.distribute) {\n      resolve(task);\n    } else {\n      resolve(task.output);\n    }\n  }\n\n  removeFromRunning(task, threadId) {\n    this.running.splice(this.running.indexOf(threadId), 1); //Remove thread from running pool\n    task.scheduler.workers.splice(task.scheduler.workers.indexOf(threadId), 1); //Remove thread from task running pool\n  }\n\n  processReturn(habitat, index, message, task) {\n    let output = message.data;\n    if(habitat.reactNative) {\n      output = JSON.parse(message).data;\n    } else if(typeof message.data.data !== \"undefined\") {\n      output = message.data.data;\n    }\n    if(task.scheduler.threads !== 1) {\n      this.hamsters.data.addThreadOutputWithIndex(task, index, output);\n    } else {\n      task.output = output;\n    }\n  }\n\n  setOnMessage(hamster, onThreadResponse, habitat, reject) {\n    if (habitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onmessageerror = reject;\n      hamster.port.onerror = reject;\n    }\n    if(habitat.node) {\n      hamster.once('message', onThreadResponse);\n      hamster.once('onmessageerror', reject);\n      hamster.once('error', reject);\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = reject;\n      hamster.error = reject;\n    }\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {worker} hamster - Thread to train\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(index, task, threadId, hamster, resolve, reject) {\n    let onThreadResponse = (message) => {\n      this.hamsters.pool.processReturn(this.hamsters.habitat, index, message, task);\n      if(this.hamsters.habitat.debug) {\n        task.scheduler.metrics.threads[threadId].completed_at = Date.now();\n      }\n      this.hamsters.pool.removeFromRunning(task, threadId);\n      if (task.scheduler.workers.length === 0 && task.scheduler.count === task.scheduler.threads) {\n        this.hamsters.pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (this.hamsters.pool.pending.length() !== 0) {\n        return this.hamsters.pool.processQueuedItem(hamster, this.hamsters.pool.pending.shift());\n      }\n      if(!this.hamsters.habitat.persistence) {\n        return hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n      }\n    };\n    this.hamsters.pool.setOnMessage(hamster, onThreadResponse, this.hamsters.habitat, reject);\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Scaffold to execute login within\n  * @param {number} maxThreads - Maximum number of threads for this client\n  */\n  scheduleTask(task, resolve, reject) {\n    let i = 0;\n    // if(this.hamsters.habitat.debug) {\n    //   let metrics = task.scheduler.metrics;\n    //   metrics.started_at = Date.now();\n    //   return new Promise((resolve, reject) => {\n    //     while (i < task.scheduler.threads) {\n    //       metrics.threads.push({\n    //         created_at: Date.now(),\n    //         started_at: null,\n    //         enqueued_at: null,\n    //         dequeued_at: null,\n    //         completed_at: null\n    //       });\n    //       this.hamsterWheel(task.scheduler.indexes[i], task, resolve, reject);\n    //       i += 1;\n    //     }\n    //   });\n    // }\n    //Process with debug mode disabled, no need for time stamping\n  \t// return new Promise((resolve, reject) => {\n      while (i < task.scheduler.threads) {\n        this.hamsterWheel(task.scheduler.indexes[i], task, resolve, reject);\n        i += 1;\n      }\n    // });\n  }\n}\n\nexport default Pool;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters; // Set the hamsters object as a property of Data class\n    this.getSubArrayFromIndex = this.getSubArrayUsingIndex.bind(this); // Bind getSubArrayUsingIndex function\n    this.getSubArrayIndexes = this.calculateIndexes.bind(this); // Bind calculateIndexes function\n    this.sortOutput = this.sortTaskOutput.bind(this); // Bind sortTaskOutput function\n    this.aggregateThreadOutputs = this.aggregateThreadOutputs.bind(this);\n    this.processDataType = this.typedArrayFromBuffer;\n    this.prepareFunction = this.prepareWorkerTask.bind(this); // Bind prepareWorkerTask function\n    this.feedHamster = this.messageWorkerThread.bind(this); // Bind messageWorkerThread function\n    this.getBufferSize = this.getBufferSize;\n    this.createSharedBuffer = this.createSharedBuffer.bind(this);\n    this.getDataType = this.getDataType;\n    this.setupSharedArrayBuffer = this.setupSharedArrayBuffer.bind(this);\n  }\n\n  /**\n  * @function messageWorkerThread - Prepares message to send to thread\n  * @param {object} hamstersHabitat - Hamsters Habitat instance\n  * @param {Worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorkerThread(hamster, hamsterFood) {\n    if(this.hamsters.habitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    return hamster.postMessage(hamsterFood, this.hamsters.data.getTransferableObjects(hamsterFood));\n  }\n\n  getTransferableObjects(obj) {\n    const typedArrayBuffers = [];\n    const transferableObjects = [];\n    const typedArrayTypes = [\n      'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', \n      'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n    ];\n    const otherTransferables = [\n      'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n    ];\n    const globalContext = typeof window !== 'undefined' ? window : global;\n  \n    for (const prop in obj) {\n      for (const type of typedArrayTypes) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          typedArrayBuffers.push(obj[prop].buffer);\n          break;\n        }\n      }\n  \n      for (const type of otherTransferables) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          transferableObjects.push(obj[prop]);\n          break;\n        }\n      }\n    }\n  \n    return typedArrayBuffers.concat(transferableObjects);\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'Uint32': Uint32Array,\n      'Uint16': Uint16Array,\n      'Uint8': Uint8Array,\n      'Uint8clamped': Uint8ClampedArray,\n      'Int32': Int32Array,\n      'Int16': Int16Array,\n      'Int8': Int8Array,\n      'Float32': Float32Array,\n      'Float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return buffer;\n    }\n    return new types[dataType](buffer);\n  }\n\n  /**\n  * @function prepareWorkerTask - Prepares function for thread, strips whitespace\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareWorkerTask(functionBody) {\n    let functionString = String(functionBody);\n    let isAsync = functionString.trim().startsWith('async');\n    functionBody = functionString.substring(functionString.indexOf(\"{\") + 1, functionString.lastIndexOf(\"}\"));\n    if(isAsync) {\n      return `(async () => {\n        ${functionBody}\n      })();`;\n    }\n    return functionBody;\n  }\n\n  /**\n  * @function sortTaskOutput - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortTaskOutput(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n   * @function getBufferSize - Gets the byte length of the input array\n   * @param {TypedArray} array - The input typed array\n   * @returns {number} - The byte length of the array\n   */\n  getBufferSize(array) {\n    return array.byteLength;\n  }\n\n  /**\n   * @function createSharedBuffer - Creates a SharedArrayBuffer based on the input array's byte length\n   * @param {TypedArray} array - The input typed array\n   * @returns {SharedArrayBuffer} - The created SharedArrayBuffer\n   */\n  createSharedBuffer(array) {\n    const byteLength = this.getBufferSize(array);\n    const sharedBuffer = new SharedArrayBuffer(byteLength);\n    const sharedArray = new array.constructor(sharedBuffer);\n\n    // Copy data from the input array to the shared array\n    sharedArray.set(array);\n\n    return sharedBuffer;\n  }\n\n  /**\n   * @function setupSharedArrayBuffer - Sets up the shared buffer and corresponding typed array\n   * @param {TypedArray} array - The input typed array\n   * @returns {object} - SharedArrayBuffer;\n   */\n  setupSharedArrayBuffer(array) {\n    return this.createSharedBuffer(array);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function addThreadOutputWithIndex - Joins individual thread outputs into single result\n  * @param {object} task - Hamsters task object\n  * @param {object} index - Index information\n  * @param {array} output - Output array\n  */\n  addThreadOutputWithIndex(task, index, output) {\n    let i = 0;\n    const outputLength = output.length;\n    for (i; i < outputLength; i++) {\n      task.output[(index.start + i)] = output[i];\n    }\n  }\n\n  /**\n   * @function calculateIndexes - Splits a single array into multiple equal sized subarrays\n   * @param {array} array - Array to split\n   * @param {number} n - Number of subarrays to create\n   */\n  calculateIndexes(array, n) {\n    // If n is 1, return the whole array range\n    if (n === 1) {\n      return [{ start: 0, end: array.length - 1 }];\n    }\n\n    const indexes = [];\n    const segmentSize = Math.floor(array.length / n);\n    let startIndex = 0;\n\n    for (let i = 0; i < n; i++) {\n      const endIndex = startIndex + segmentSize - 1;\n      indexes.push({ start: startIndex, end: endIndex });\n      startIndex = endIndex + 1;\n    }\n\n    // Adjust the last segment to cover any remaining elements\n    if (startIndex < array.length) {\n      indexes[n - 1].end = array.length - 1;\n    }\n\n    return indexes;\n  }\n\n  prepareDistributedTask(task) {\n    Object.keys(task.input).forEach(key => {\n      if(Array.isArray(task.input[key])) {\n        task.input[key] = null;\n      }\n    });\n    return task;\n  }\n\n  getTransferList(hamsterFood, task) {\n    const transferList = {};\n    task = this.prepareDistributedTask(task);\n    Object.keys(hamsterFood).forEach(item => {\n      if (Array.isArray(hamsterFood[item])) {\n        transferList[item] = hamsterFood[item];\n        hamsterFood[item] = 'Awaiting Transfer';\n      }\n    });\n    return {hamsterFood, transferList, task, transferCount: Object.keys(transferList).length};\n  }\n\n  /**\n  * @function getSubArrayUsingIndex - Slices subarray based on provided index\n  * @param {object} index - Index information\n  * @param {object} inputArray - Hamsters task object\n  */\n  getSubArrayUsingIndex(index, inputArray) {\n    return inputArray.slice(index.start, index.end + 1);\n  }\n}\n\nexport default Data;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Task {\n  /**\n   * @constructor\n   * @param {object} habitat - The environment settings\n   * @param {object} data - Data utility methods\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  constructor(hamsters, params, functionToRun) {\n    'use strict';\n\n    this.input = params;\n    this.output = [];\n    this.scheduler = {\n      count: 0,\n      threads: params.threads || 1,\n      transfers: {\n        request: 0,\n        send: 0\n      },\n      workers: []\n    };\n\n    if (hamsters.habitat.legacy) {\n      this.setupLegacyTask(hamsters, functionToRun);\n    } else {\n      this.setupModernTask(hamsters, params, functionToRun);\n    }\n\n    if (hamsters.habitat.debug) {\n      this.setupDebugMetrics();\n    }\n  }\n\n  /**\n   * @method setupLegacyTask\n   * @description Sets up task for legacy environments\n   * @param {function} functionToRun - Function to execute\n   */\n  setupLegacyTask(hamsters, functionToRun) {\n    this.scheduler.threads = 1;\n    if (!hamsters.habitat.node && !hamsters.habitat.isIE) {\n      this.input.hamstersJob = functionToRun;\n    }\n  }\n\n  /**\n   * @method setupModernTask\n   * @description Sets up task for modern environments\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  setupModernTask(hamsters, params, functionToRun) {\n    this.input.hamstersJob = hamsters.habitat.legacy ? functionToRun : hamsters.data.prepareFunction(functionToRun);\n    if (params.sharedArray && hamsters.habitat.atomics) {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.sharedArray, this.scheduler.threads);\n      this.scheduler.sharedBuffer = hamsters.data.setupSharedArrayBuffer(params.sharedArray);\n      this.input.sharedArray = []; //Reduce ram usage on main thread, do not preserve original array its no longer needed.\n    } else {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.array, this.scheduler.threads);\n    }\n  }\n\n  /**\n   * @method setupDebugMetrics\n   * @description Sets up debug metrics if debug mode is enabled\n   */\n  setupDebugMetrics() {\n    this.scheduler.metrics = {\n      created_at: Date.now(),\n      started_at: null,\n      completed_at: null,\n      threads: this.setupThreadMetrics()\n    };\n  }\n\n  setupThreadMetrics() {\n    let i = 0;\n    let threadMetrics = [];\n    while(i < this.scheduler.threads) {\n      threadMetrics.push({\n        created_at: Date.now(),\n        started_at: null,\n        enqueued_at: null,\n        dequeued_at: null,\n        completed_at: null\n      });\n      i += 1;\n    }\n    return threadMetrics;\n  }\n}\n  \nexport default Task;\n  ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass NodeStore {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.cache = new Map();\n    }\n\n    get(key) {\n        if (this.cache.has(key)) {\n            const value = this.cache.get(key);\n            // Refresh the key\n            this.cache.delete(key);\n            this.cache.set(key, value);\n            return Promise.resolve(value);\n        }\n        return Promise.resolve(null);\n    }\n\n    set(key, value) {\n        if (this.cache.size >= this.maxSize) {\n            // Remove the oldest (least recently used) entry\n            const oldestKey = this.cache.keys().next().value;\n            this.cache.delete(oldestKey);\n        }\n        this.cache.set(key, value);\n        return Promise.resolve();\n    }\n\n    clear() {\n        this.cache.clear();\n        return Promise.resolve();\n    }\n}\n\nexport default NodeStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass WebStore {\n    constructor(dbName, storeName, maxSize) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.maxSize = maxSize;\n        this.db = null;\n        this.initDB();\n    }\n\n    initDB() {\n        const self = this;\n        const request = indexedDB.open(this.dbName, 1);\n\n        request.onerror = function(event) {\n            console.error('Error opening database:', event.target.error);\n        };\n\n        request.onupgradeneeded = function(event) {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains(self.storeName)) {\n                const objectStore = db.createObjectStore(self.storeName, { keyPath: 'key' });\n                objectStore.createIndex('by_key', 'key', { unique: true });\n                objectStore.createIndex('by_timestamp', 'timestamp');\n            }\n        };\n\n        request.onsuccess = function(event) {\n            self.db = event.target.result;\n        };\n    }\n\n    get(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve(null);\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const result = event.target.result;\n                if (result) {\n                    self.updateTimestamp(key).then(() => resolve(result.value)).catch(reject);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    set(key, value) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            self.checkSize().then(() => {\n                const transaction = self.db.transaction([self.storeName], 'readwrite');\n                const objectStore = transaction.objectStore(self.storeName);\n                const request = objectStore.put({ key: key, value: value, timestamp: Date.now() });\n\n                request.onsuccess = function() {\n                    resolve();\n                };\n\n                request.onerror = function(event) {\n                    reject(event.target.error);\n                };\n            }).catch(reject);\n        });\n    }\n\n    clear() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.clear();\n\n            request.onsuccess = function() {\n                resolve();\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    checkSize() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const countRequest = objectStore.count();\n\n            countRequest.onsuccess = function() {\n                const count = countRequest.result;\n                if (count >= self.maxSize) {\n                    self.evictOldest().then(resolve).catch(reject);\n                } else {\n                    resolve();\n                }\n            };\n\n            countRequest.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    evictOldest() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const index = objectStore.index('by_timestamp');\n            const request = index.openCursor(null, 'next');\n\n            request.onsuccess = function(event) {\n                const cursor = event.target.result;\n                if (cursor) {\n                    cursor.delete().onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    updateTimestamp(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const data = event.target.result;\n                if (data) {\n                    data.timestamp = Date.now();\n                    objectStore.put(data).onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n}\n\nexport default WebStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport NodeStore from './stores/NodeStore';\nimport WebStore from './stores/WebStore';\n\nclass Memoize {\n    constructor(hamsters, maxSize) {\n        'use strict';\n\n        this.hamsters = hamsters;\n        this.store = this.hamsters.habitat.node ? new NodeStore(maxSize) : new WebStore('hamstersjs', 'cacheStore', maxSize);\n    }\n\n    memoize(func) {\n        const self = this;\n        return function(task) {\n            const key = self.generateTaskKey(task);\n\n            return new Promise(function(resolve, reject) {\n                self.store.get(key).then(function(cachedResult) {\n                    if (cachedResult !== null) {\n                        resolve(cachedResult);\n                    } else {\n                        self.applyFunc(func, task).then(function(result) {\n                            self.store.set(key, result).then(function() {\n                                resolve(result);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }\n                }).catch(reject);\n            });\n        };\n    }\n\n    generateTaskKey(task) {\n        const key = JSON.stringify({ input: task.input });\n        return this.hashCode(key);\n    }\n\n    hashCode(str) {\n        let hash = 0, i, chr;\n        if (str.length === 0) return hash;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash.toString();\n    }\n\n    applyFunc(func, args) {\n        return new Promise((resolve, reject) => {\n            try {\n                const result = func.apply(null, args);\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n\nexport default Memoize;","class Distribute {\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.localConnection = null;\n    this.remoteConnections = new hamsters.observable({});\n    this.clientInfo = new hamsters.observable({});\n    this.sendChannels = new hamsters.observable({});\n    this.pcConstraint = null;\n    this.ws = null;\n    this.clientId = null;\n    this.pendingPromises = new hamsters.observable({});\n    this.pendingTasks = new hamsters.observable({});\n    this.pendingTransfers = new hamsters.observable({});\n    this.awaitingTransfers = new hamsters.observable({});\n    this.lastRequestedTransfers = new hamsters.observable({});\n    this.pendingOutputs = new hamsters.observable({});\n    this.returnDistributedOutput = this.sendDataResponse.bind(this);\n    this.establishConnection = this.initWebSocket.bind(this);\n    this.lastHeartbeat = {};\n    this.heartBeatInterval = 30 * 1000; //Send heartbeat message every 30 seconds\n    this.heartBeatTimeout = {};\n  }\n\n  initWebSocket() {\n    this.ws = new WebSocket(`${this.hamsters.habitat.relay}`);\n\n    this.ws.onopen = () => {\n      console.info(`Hamsters.js ${this.hamsters.version} connection established`);\n      this.ws.send(JSON.stringify({\n        type: 'register',\n        logicalCores: this.hamsters.maxThreads\n      }));\n      this.sendHeartBeat(this.heartBeatInterval);\n    };\n\n    this.ws.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      this.handleWebSocketMessage(message);\n    };\n\n    this.ws.onerror = (error) => {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} connection error:`, error);\n      }\n    };\n\n    this.ws.onclose = () => {\n      if (this.hamsters.habitat.debug) {\n        console.info(`Hamsters.js ${this.hamsters.version} connection closed. Reconnecting...`);\n      }\n      this.establishConnection();\n    };\n  }\n\n  handleWebSocketMessage(message) {\n    const handlers = {\n      'register': this.handleClientReconnect.bind(this),\n      'update-client-list': this.updateClientList.bind(this),\n      'offer': this.handleOffer.bind(this),\n      'answer': this.handleAnswer.bind(this),\n      'candidate': this.handleCandidate.bind(this)\n    };\n\n    const handler = handlers[message.type];\n    if (handler) {\n      handler(message);\n    } else if (this.hamsters.habitat.debug) {\n      console.info(`Hamsters.js ${this.hamsters.version} unknown message type: ${message.type}`);\n    }\n  }\n\n  sendHeartBeat(interval) {\n    this.heartBeatTimeout = setInterval(() => {\n      this.ws.send(JSON.stringify({\n        type: 'heartbeat'\n      }));\n      this.lastHeartbeat = Date.now();\n    }, interval);\n  }\n\n  updateClientList(clientListMessage) {\n    const clients = clientListMessage.clients;\n    const newClientIds = new Set(clients.map(client => client.id));\n    clients.forEach(client => {\n      if (client.id !== this.clientId && !this.remoteConnections.get(client.id)) {\n        this.createConnection(client.id);\n      }\n    });\n    const remoteConnections = this.remoteConnections.getData();\n    Object.keys(remoteConnections).forEach((key) => {\n      if (!newClientIds.has(key)) {\n        this.handleClientDisconnect(key);\n      }\n    });\n  }\n\n  handleClientDisconnect(clientId) {\n    if (this.remoteConnections.get(clientId)) {\n      this.remoteConnections.get(clientId).close();\n      this.remoteConnections.delete(clientId);\n    }\n    if (this.sendChannels.get(clientId)) {\n      this.sendChannels.get(clientId).close();\n      this.sendChannels.delete(clientId);\n    }\n    this.clientInfo.delete(clientId);\n  }\n\n  handleClientReconnect(message) {\n    const newClientId = message.id;\n\n    if (this.clientId === newClientId) {\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} reconnected with same ID`);\n      }\n      return;\n    }\n    this.handleClientDisconnect(newClientId);\n    this.clientId = newClientId;\n  }\n\n  createConnection(targetClient) {\n    if (targetClient === this.clientId || this.remoteConnections.get(targetClient)) {\n      return;\n    }\n\n    const servers = {\n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n    };\n\n    const localConnection = new RTCPeerConnection(servers, this.pcConstraint);\n\n    localConnection.onicecandidate = (e) => {\n      if (e.candidate) {\n        this.ws.send(JSON.stringify({ \n          type: 'candidate', \n          target: targetClient, \n          from: this.clientId,\n          logicalCores: this.hamsters.maxThreads,\n          userAgent: navigator.userAgent,\n          candidate: e.candidate\n        }));\n      }\n    };\n\n    localConnection.ondatachannel = (event) => {\n      this.dataChannelCallback(event, targetClient);\n    };\n\n    this.findOrCreateChannel(targetClient, localConnection);\n\n    this.remoteConnections.set(targetClient, localConnection);\n    localConnection.createOffer().then(desc => {\n      localConnection.setLocalDescription(desc);\n      this.ws.send(JSON.stringify({ type: 'offer', target: targetClient, offer: desc }));\n    }).catch(this.onCreateSessionDescriptionError.bind(this));\n  }\n\n  handleOffer(data) {\n    const targetClient = data.from;\n    console.log('WE HAVE A OFFER ', data);\n    if (!this.remoteConnections.get(targetClient)) {\n      const servers = {\n        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n      };\n\n      const remoteConnection = new RTCPeerConnection(servers, this.pcConstraint);\n\n      remoteConnection.onicecandidate = (e) => {\n        if (e.candidate) {\n          this.ws.send(JSON.stringify({ type: 'candidate', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, candidate: e.candidate }));\n        }\n      };\n\n      remoteConnection.ondatachannel = (event) => {\n        this.dataChannelCallback(event, targetClient);\n      };\n\n      remoteConnection.setRemoteDescription(new RTCSessionDescription(data.offer)).then(() => {\n        return remoteConnection.createAnswer();\n      }).then(desc => {\n        this.ws.send(JSON.stringify({ type: 'answer', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, answer: desc }));\n        return remoteConnection.setLocalDescription(desc);\n      }).catch(this.onCreateSessionDescriptionError.bind(this));\n\n      this.remoteConnections.set(targetClient, remoteConnection);\n      this.findOrCreateChannel(targetClient, remoteConnection);\n    }\n  }\n\n  findOrCreateChannel(targetClient, remoteConnection) {\n    let sendChannel = this.sendChannels.get(targetClient);\n    if(!sendChannel) {\n      const dataConstraint = {\n        ordered: true,\n        maxRetransmits: 3,\n        id: Math.floor(Math.random() * 65536)\n      };\n      sendChannel = remoteConnection.createDataChannel('hamstersjs', dataConstraint);\n      \n      sendChannel.onopen = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onclose = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onmessage = (event) => {\n        this.onReceiveMessageCallback(targetClient, event.data);\n      };\n\n      this.sendChannels.set(targetClient, sendChannel);\n    }\n    return sendChannel\n  }\n  \n  dataChannelCallback(event, targetClient) {\n    const dataChannel = event.channel;\n    const currentTargetClient = targetClient;\n\n    dataChannel.onmessage = (event) => {\n      this.onReceiveMessageCallback(currentTargetClient, event.data);\n    };\n\n    this.sendChannels.set(currentTargetClient, dataChannel);\n  }\n\n  storeClientConnectionInfo(data) {\n    const client = {\n      logicalCores: data.logicalCores,\n      userAgent: data.userAgent,\n    };\n    this.clientInfo.set(data.from, client);\n  }\n\n  handleAnswer(data) {\n    this.storeClientConnectionInfo(data);\n    const connection = this.remoteConnections.get(data.from);\n    connection.setRemoteDescription(new RTCSessionDescription(data.answer));\n    this.remoteConnections.set(data.from, connection);\n  }\n\n  handleCandidate(data) {\n    let connection = this.remoteConnections.get(data.from);\n    if(!connection) {\n      this.storeClientConnectionInfo(data);\n      connection = this.remoteConnections.get(data.from);\n    }\n    connection.addIceCandidate(new RTCIceCandidate(data.candidate)).catch(this.onAddIceCandidateError.bind(this));\n    this.remoteConnections.set(data.from, connection);\n  }\n\n  distributeTask(task, hamsterFood, resolve, reject) {\n    const targetClient = task.input.client || this.getDistributedClient();\n    if (!targetClient) {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} no target client found.`);\n      }\n      reject('No target client found.');\n      return;\n    }\n\n    const messageId = this.generateUniqueId();\n    const preparedList = this.hamsters.data.getTransferList(hamsterFood, task);\n    const distributedSubTask = {\n      hamsterFood: preparedList.hamsterFood,\n      index: hamsterFood.index,\n      task: preparedList.task,\n      messageId: messageId,\n      type: 'task-request'\n    };\n    const clients = [targetClient];\n    this.pendingPromises.set(messageId, { resolve, reject, clients });\n    \n    if (preparedList.transferCount > 0) {\n      this.pendingTransfers.set(messageId, preparedList.transferList);\n    }\n    this.sendData({ targetClient, data: distributedSubTask });\n  }\n\n  getDistributedClient() {\n    const sendChannelKeys = Object.keys(this.sendChannels.getData());\n    if (sendChannelKeys.length === 0) {\n      if (this.hamsters.habitat.debug) {\n        console.warn(`Hamsters.js ${this.hamsters.version} no send channels available.`);\n      }\n      return null;\n    }\n\n    let minLatency = Infinity;\n    let targetClient = null;\n\n    sendChannelKeys.forEach(clientId => {\n      const channel = this.sendChannels.get(clientId);\n      const client = this.clientInfo.get(clientId);\n      if (channel.readyState === 'open' && client && client.latency < minLatency) {\n        minLatency = client.latency;\n        targetClient = clientId;\n      }\n    });\n\n    return targetClient;\n  }\n\n  initializeDistributedTask(targetClient, task, messageId) {\n    const awaitingTransfers = {};\n    \n    Object.keys(task.hamsterFood).forEach(key => {\n      if (task.hamsterFood[key] === 'Awaiting Transfer') {\n        awaitingTransfers[key] = 'Awaiting Transfer';\n      }\n    });\n\n    if (Object.keys(awaitingTransfers).length > 0) {\n      this.awaitingTransfers.set(targetClient, { transfers: awaitingTransfers, messageId });\n      this.requestNextTransfer(targetClient, messageId);\n    } else {\n      this.runDistributedTask(task, targetClient);\n    }\n  }\n\n  requestNextTransfer(targetClient, messageId) {\n    if (this.lastRequestedTransfers.get(targetClient)) {\n      // A transfer is already in progress for this client\n      return;\n    }\n\n    const awaitingTransfersData = this.awaitingTransfers.get(targetClient);\n    if (!awaitingTransfersData) return;\n\n    const { transfers, messageId: awaitingMessageId} = awaitingTransfersData;\n    const keys = Object.keys(transfers);\n\n    if (keys.length > 0 && messageId === awaitingMessageId) {\n      const nextKey = keys.find(key => transfers[key] === 'Awaiting Transfer');\n      if (nextKey) {\n        this.requestDataTransfer(nextKey, messageId, targetClient);\n      }\n    }\n  }\n\n  requestDataTransfer(key, messageId, targetClient) {\n    const message = {\n      type: 'transfer-request',\n      key: key,\n      messageId: messageId\n    };\n    this.lastRequestedTransfers.set(targetClient, {key, messageId});\n    this.sendData({targetClient, data: message});\n\n    // Update the status of the transfer item\n    const awaitingTransfers = this.awaitingTransfers.get(targetClient) || {transfers: {}};\n    awaitingTransfers.transfers[key] = 'Requested Transfer';\n    this.awaitingTransfers.set(targetClient, awaitingTransfers);\n\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} requested transfer for ${key} from ${targetClient}`);\n    }\n  }\n\n  handleTransferResponse(targetClient, transferData) {\n    const lastRequestedTransfer = this.lastRequestedTransfers.get(targetClient);\n    \n    if (!lastRequestedTransfer) {\n      console.error(`Hamsters.js ${this.hamsters.version} received transfer response but no transfer was requested for ${targetClient}`);\n      return;\n    }\n\n    const key = lastRequestedTransfer.key;\n    const messageId = lastRequestedTransfer.messageId || null;\n    const responseId = lastRequestedTransfer.responseId || null;\n    const pendingTask = this.pendingTasks.get(targetClient);\n    const awaitingTransfers = this.awaitingTransfers.get(targetClient);\n\n    const isRequestedTransfer = awaitingTransfers && awaitingTransfers.transfers[key] === 'Requested Transfer';\n\n    if (pendingTask && isRequestedTransfer) {\n      // Convert ArrayBuffer back to the appropriate data type\n      pendingTask.hamsterFood[key] = this.convertFromArrayBuffer(transferData, key);\n\n      // Remove the transferred item from awaitingTransfers\n      delete awaitingTransfers.transfers[key];\n\n      if (Object.keys(awaitingTransfers.transfers).length === 0) {\n        // All transfers complete\n        this.awaitingTransfers.delete(targetClient);\n        this.pendingTasks.delete(targetClient);\n        this.lastRequestedTransfers.delete(targetClient);\n        this.runDistributedTask(pendingTask, targetClient);\n      } else {\n        // More transfers needed\n        this.awaitingTransfers.set(targetClient, awaitingTransfers);\n        this.lastRequestedTransfers.delete(targetClient);\n        this.requestNextTransfer(targetClient, lastRequestedTransfer.messageId);\n      }\n\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} processed transfer response for ${key} from ${targetClient}`);\n      }\n    } else if (key === 'output') {\n      this.handleTaskResponse(targetClient, { output: this.convertFromArrayBuffer(transferData), messageId, responseId });\n    } else {\n      console.error(`Hamsters.js ${this.hamsters.version} received unexpected transfer response for ${targetClient}`);\n    }\n  }\n\n  measureLatency(targetClient) {\n    const startTime = performance.now();\n    this.sendPing(targetClient, startTime);\n  }\n\n  sendPing(targetClient, startTime) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'ping', startTime }));\n    }\n  }\n\n  handlePing(targetClient, startTime) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'pong', startTime }));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent pong to ${targetClient}`);\n      }\n    }\n  }\n\n  handlePong(targetClient, startTime) {\n    const latency = performance.now() - startTime;\n    const clientInfo = this.clientInfo.get(targetClient) || {};\n    clientInfo.latency = latency;\n    this.clientInfo.set(targetClient, clientInfo);\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} received pong from ${targetClient} with latency: ${latency.toFixed(2)}ms`);\n    }\n  }\n\n  runDistributedTask(taskMessage, targetClient) {\n    let task = taskMessage.task;\n    task.targetClient = targetClient;\n    task.messageId = taskMessage.messageId;\n    task.type = 'task-response';\n    console.log(\"RUNNING DISTRIBUTED TASK\");\n    return new Promise((resolve, reject) => {\n      this.hamsters.scheduleTask(task, this.returnDistributedOutput, this.returnDistributedOutput);\n    });\n  }\n  \n  sendDataResponse(responseData) {\n    const { targetClient, messageId, output } = responseData;\n    console.log(\"SeNDING OUTPUT RESPNSE TO \", targetClient);\n    this.initializeOutputTransfer(targetClient, output, messageId);\n  }\n\n  initializeOutputTransfer(targetClient, output, messageId) {\n    const responseId = this.generateUniqueId();\n    this.pendingOutputs.set(responseId, { targetClient, output, messageId });\n\n    const initialResponse = {\n      type: 'task-response',\n      messageId,\n      responseId,\n      awaitingTransfers: true\n    };\n\n    this.sendData({ targetClient, data: initialResponse });\n\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} initialized output transfer for ${targetClient} (responseId: ${responseId})`);\n    }\n  }\n\n  handleOutputTransferRequest(targetClient, message) {\n    const { responseId } = message;\n    const pendingOutput = this.pendingOutputs.get(responseId);\n\n    if (pendingOutput && pendingOutput.targetClient === targetClient) {\n      const arrayBuffer = this.getArrayBuffer(pendingOutput.output);\n      this.sendBlobData({ targetClient, data: arrayBuffer, dataType: 'arrayBuffer' });\n      this.pendingOutputs.delete(responseId);\n\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent output transfer for ${targetClient} (responseId: ${responseId})`);\n      }\n    } else {\n      console.error(`Hamsters.js ${this.hamsters.version} received unexpected output transfer request for ${targetClient}`);\n    }\n  }\n\n  getArrayBuffer(transferredData) {\n    if (ArrayBuffer.isView(transferredData)) {\n      return transferredData.buffer;\n    }\n    if (transferredData instanceof ArrayBuffer) {\n      return transferredData;\n    }\n    return new Uint8Array(transferredData).buffer\n  }\n\n  convertFromArrayBuffer(buffer, key) {\n    const originalArray = new Uint8Array(buffer);\n    if(this.hamsters.habitat.node) { //Node.js has stricter security and won't allow the transfer of buffers sent using node.js webrtc channels, clone into new array first\n      const newArrayBuffer = new ArrayBuffer(originalArray.byteLength);\n      const newTypedArray = new Uint8Array(newArrayBuffer);\n      newTypedArray.set(originalArray);\n      return newTypedArray;\n    }\n    return originalArray;\n  }\n\n  sendData({ targetClient, data }) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify(data));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent data to: ${targetClient}`);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: ${targetClient}`);\n      }\n    }\n  }\n\n  sendBlobData({targetClient, data, dataType}) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(data);\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent blob data to: ${targetClient}`);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: ${targetClient}`);\n      }\n    }\n  }\n\n  // Function to convert Blob to ArrayBuffer using Fetch API\n  async blobToArrayBuffer(blob) {\n    if (typeof fetch === 'function') { // Check if Fetch API is available\n        const response = new Response(blob);\n        return await response.arrayBuffer();\n    } else {\n        throw new Error('Fetch API is not supported in this environment.');\n    }\n  }\n\n  async onReceiveMessageCallback(targetClient, messageData) {\n    if(messageData instanceof Blob) {\n      messageData = await this.blobToArrayBuffer(messageData);\n    }\n    if (messageData instanceof ArrayBuffer) {\n      this.handleTransferResponse(targetClient, messageData);\n    } else if (typeof messageData === 'string') {\n      let incomingMessage;\n      try {\n        incomingMessage = JSON.parse(messageData);\n        this.handleIncomingMessage(targetClient, incomingMessage);\n      } catch (error) {\n        console.error(`Hamsters.js ${this.hamsters.version} error parsing message:`, error);\n      }\n    } else {\n      console.log(\"Received unexpected data type:\", targetClient, messageData);\n    }\n  }\n\n  handleIncomingMessage(targetClient, incomingMessage) {\n    const handlers = {\n      'transfer-request': this.fulfillTransferRequest.bind(this),\n      'task-request': this.handleTaskRequest.bind(this),\n      'transfer-response': this.processTransferResponse.bind(this),\n      'output-transfer-request': this.handleOutputTransferRequest.bind(this),\n      'task-response': this.handleTaskResponse.bind(this),\n      'ping': (client, message) => this.handlePing(client, message.startTime),\n      'pong': (client, message) => this.handlePong(client, message.startTime)\n    };\n\n    const handler = handlers[incomingMessage.type];\n    if (handler) {\n      handler(targetClient, incomingMessage);\n    } else {\n      console.log(`Hamsters.js ${this.hamsters.version} unknown message received from: ${targetClient}`);\n    }\n  }\n\n  handleTaskRequest(targetClient, incomingMessage) {\n    const awaitingTransfers = Object.values(incomingMessage.hamsterFood).some(value => value === 'Awaiting Transfer');\n    if (awaitingTransfers) {\n      this.pendingTasks.set(targetClient, incomingMessage);\n      this.initializeDistributedTask(targetClient, incomingMessage, incomingMessage.messageId);\n    } else {\n      this.runDistributedTask(incomingMessage, targetClient);\n    }\n  }\n\n  handleTaskResponse(targetClient, message) {\n    const { messageId, responseId, awaitingTransfers } = message;\n    const pendingPromise = this.pendingPromises.get(messageId);\n    if (pendingPromise && pendingPromise.clients.indexOf(targetClient) !== -1) { //Ensure we only process responses we have a pending promise for the sending client\n      if(awaitingTransfers) {\n        this.requestOutputTransfer(targetClient, responseId, messageId);\n      } else {\n        pendingPromise.resolve(message.output);\n        this.pendingPromises.delete(messageId);\n      }\n    } else {\n      console.warn(`Received a message from ${targetClient} but no matching promise found with messageId ${messageId}`);\n    }\n  }\n\n  requestOutputTransfer(targetClient, responseId, messageId) {\n    const outputTransferRequest = {\n      type: 'output-transfer-request',\n      key: 'output',\n      responseId,\n      messageId\n    };\n    this.lastRequestedTransfers.set(targetClient, outputTransferRequest);\n    this.sendData({ targetClient, data: outputTransferRequest });\n  }\n\n  requestDataTransfer(key, messageId, targetClient) {\n    const message = {\n      type: 'transfer-request',\n      key: key,\n      messageId: messageId\n    };\n    this.lastRequestedTransfers.set(targetClient, { key, messageId });\n    this.sendData({targetClient, data: message});\n\n    // Update the status of the transfer item\n    const awaitingTransfersData = this.awaitingTransfers.get(targetClient);\n    if (awaitingTransfersData && awaitingTransfersData.messageId === messageId) {\n      awaitingTransfersData.transfers[key] = 'Requested Transfer';\n      this.awaitingTransfers.set(targetClient, awaitingTransfersData);\n    }\n\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} requested transfer for ${key} from ${targetClient} (messageId: ${messageId})`);\n    }\n  }\n\n  fulfillTransferRequest(targetClient, incomingMessage) {\n    const { key, messageId, responseId } = incomingMessage;\n    const transferId = responseId || messageId;\n    const pendingTransferItems = this.pendingTransfers.get(transferId);\n\n    if (pendingTransferItems && pendingTransferItems[key]) {\n      const data = pendingTransferItems[key];\n      \n      // Get the ArrayBuffer efficiently based on data type\n      const arrayBuffer = this.getArrayBuffer(data);\n\n      // Send the data as ArrayBuffer\n      this.sendBlobData({ targetClient, data: arrayBuffer, dataType: 'arrayBuffer' });\n\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent transfer response for ${key} (${responseId ? 'output' : 'input'}) to ${targetClient} (messageId: ${messageId})`);\n      }\n\n      // Clean up after sending\n      delete pendingTransferItems[key];\n      if (Object.keys(pendingTransferItems).length === 0) {\n        this.pendingTransfers.delete(transferId);\n      }\n    } else {\n      console.error(`No pending transfer found for ${key} (${responseId ? 'output' : 'input'}) for ${targetClient} (messageId: ${messageId})`);\n    }\n  }\n\n  processTransferResponse(targetClient, incomingMessage) {\n    const { key, data, messageId, responseId } = incomingMessage;\n    \n    if (responseId) {\n      // This is an output transfer\n      const pendingPromise = this.pendingPromises.get(messageId);\n      if (pendingPromise) {\n        pendingPromise.resolve(data);\n        this.pendingPromises.delete(messageId);\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending promise found for messageId: ${messageId}`);\n      }\n    } else {\n      // This is an input transfer\n      const pendingTask = this.pendingTasks.get(targetClient);\n      if (pendingTask && pendingTask.messageId === messageId) {\n        pendingTask.hamsterFood[key] = this.convertFromArrayBuffer(data);\n        \n        const stillAwaiting = Object.values(pendingTask.hamsterFood).some(value => value === 'Awaiting Transfer');\n        \n        if (stillAwaiting) {\n          this.requestNextTransfer(targetClient, messageId);\n        } else {\n          this.pendingTasks.delete(targetClient);\n          this.runDistributedTask(pendingTask, targetClient);\n        }\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending task found for targetClient: ${targetClient} and messageId: ${messageId}`);\n      }\n    }\n\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} processed transfer response for ${key} from ${targetClient}`);\n    }\n  }\n\n  onSendChannelStateChange(targetClient) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      this.measureLatency(targetClient);\n    }\n    if (sendChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} send channel state changed for ${targetClient}: ${sendChannel.readyState}`);\n    }\n  }\n\n  generateUniqueId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  onCreateSessionDescriptionError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to create session description: ${error}`);\n    }\n  }\n\n  onAddIceCandidateError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to add ICE candidate: ${error}`);\n    }\n  }\n}\n\nexport default Distribute;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Observable {\n  constructor(initialData = {}) {\n    this.data = Array.isArray(initialData) ? [...initialData] : { ...initialData };\n    this.events = {};\n  }\n\n  // Allow listeners to register for specific events\n  on(event, callback) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  }\n\n  // Notify listeners about the event\n  emit(event, ...args) {\n    if (this.events[event]) {\n      this.events[event].forEach(callback => callback(...args));\n    }\n  }\n\n  set(key, value) {\n    if (typeof key === 'string') {\n        const keys = key.split('.');\n        let current = this.data;\n        for (let i = 0; i < keys.length - 1; i++) {\n            current = current[keys[i]];\n        }\n        current[keys[keys.length - 1]] = value;\n    } else if (typeof key === 'object') {\n      this.data[key] = value;\n    }\n    this.emit('change', this.data);\n    return value;\n  }\n\n  setAll(data) {\n    this.data = data;\n  }\n\n  get(key) {\n    return this.data[key];\n  }\n\n  push(...items) {\n    this.data.push(...items);\n    this.emit('change', this.data);\n  }\n\n  pop() {\n    const item = this.data.pop();\n    this.emit('change', this.data);\n    return item;\n  }\n\n  shift() {\n    let item = this.data.shift();\n    this.emit('change', this.data);\n    return item;\n  }\n\n  splice(start, deleteCount, ...items) {\n    const result = this.data.splice(start, deleteCount, ...items);\n    this.emit('change', this.data);\n    return result;\n  }\n\n  indexOf(item) {\n    return this.data.indexOf(item);\n  }\n\n  length() {\n    return this.data.length;\n  }\n\n  delete(property) {\n    if (!Array.isArray(this.data)) {\n      delete this.data[property];\n      this.emit('change', this.data);\n    }\n  }\n\n  getData() {\n    return this.data;\n  }\n}\n\nexport default Observable;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n//Core Functionality\nimport Habitat from './core/habitat';\nimport Pool from './core/pool';\nimport Data from './core/data';\nimport Task from './core/task';\n\n//Worker Scaffolds\nimport Legacy from './scaffold/legacy';\nimport Regular from './scaffold/regular';\nimport Shared from './scaffold/shared';\n\n//Features\nimport Memoize from './feature/memoize';\nimport Distribute from './feature/distribute';\nimport Observable from './feature/observable';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.version = '5.6.3';\n    this.run = this.hamstersRun.bind(this);\n    this.promise = this.hamstersPromise.bind(this);\n    this.init = this.initializeLibrary.bind(this);\n    this.data = {};\n    this.pool = {};\n    this.scaffold = {};\n    this.habitat = {};\n    this.memoize = {};\n  }\n\n  /**\n  * @function inititializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    const start = performance.now();\n    this.observable = Observable;\n    this.data = new Data(this);\n    this.pool = new Pool(this);\n    this.scaffold = {\n      legacy: new Legacy(),\n      regular: new Regular(),\n      shared: new Shared()\n    };\n    this.habitat = new Habitat(this);\n    this.memoize = new Memoize(this, 100); //Set a maximum of 100 memoized function results, LRU cache\n    this.distribute = new Distribute(this);\n    this.processStartOptions(startOptions);\n    \n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      this.pool.spawnHamsters(this.habitat.maxThreads);\n    }\n    this.maxThreads = this.habitat.maxThreads;\n\n    if(this.habitat.relay) {\n      console.info(`Hamsters.js ${this.version} establishing connection to relay`);\n      this.distribute.establishConnection();\n    }\n    const end = performance.now();\n    console.info(`Hamsters.js ${this.version} initialized using up to ${this.habitat.maxThreads} threads in ${end - start}ms`);\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      for (const key of Object.keys(startOptions)) {\n        if (this.habitat.keys.includes(key.toLowerCase())) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          if(key === 'scaffold') {\n            this.scaffold.custom = startOptions[key];\n          } else {\n            this[key] = startOptions[key];\n          }\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    let forceLegacyMode = (typeof startOptions !== 'undefined' && typeof startOptions.legacy !== 'undefined');\n    if (forceLegacyMode) {\n      forceLegacyMode = startOptions.legacy;\n    }\n    if (typeof this.habitat.Worker === 'function' && !forceLegacyMode) {\n      this.habitat.legacy = this.habitat.isIE;\n    }\n  }\n\n  /**\n   * @async\n   * @function scheduleTask - Schedules a new function to be processed by the library\n   * @param {object} task - Provided library execution options\n   * @param {function} resolve - Parent function promise resolve method\n   * @param {function} reject - Parent function promise reject method\n   * @return {Promise} Promise object on completion\n   */\n  scheduleTask(task, resolve, reject) {\n    if (task.input.memoize) {\n      // Pass the task object to the memoized function\n      const memoizedFunction = this.memoize.memoize(() => this.pool.scheduleTask(task, resolve, reject));\n      return memoizedFunction(task).then(resolve).catch(reject);\n    }\n    return this.pool.scheduleTask(task, resolve, reject);\n  }\n\n  /**\n   * @async\n   * @function hamstersPromise - Calls library functionality using async promises\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   * @return {Promise} Promise resolving with results from functionToRun\n   */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      this.scheduleTask(new Task(this, params, functionToRun), resolve, reject);\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    this.scheduleTask(new Task(this, params, functionToRun), onSuccess, onError);\n  }\n}\n\nexport default new hamstersjs();\n"],"names":["root","factory","exports","module","define","amd","this","Legacy","constructor","hamsters","scaffold","params","resolve","reject","rtn","data","dataType","habitat","reactNative","self","node","isIE","eval","hamstersJob","Regular","handleDataType","sharedArray","typedArrayFromBuffer","getTransferableObjects","buffer","types","Uint32Array","Uint16Array","Uint8Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","returnResponse","buffers","length","postMessage","obj","transferableObjects","Set","typedArrayTypes","globalContext","window","allTypes","prop","hasOwnProperty","type","includes","add","Array","from","onmessage","message","index","sharedBuffer","bind","Shared","addEventListener","incomingConnection","port","ports","start","incomingMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","e","prototype","call","Habitat","debug","importScripts","relay","memoize","persistence","browser","isBrowser","webWorker","isWebWorker","isNode","isReactNative","shell","isShell","transferable","supportsTransferableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isInternetExplorer","selectHamsterWheel","sharedWorker","locateSharedWorkerObject","locateBlobBuilder","findAvailableBlobBuilder","legacy","isLegacyEnvironment","Worker","locateWorkerObject","maxThreads","determineGlobalThreads","keys","getHabitatKeys","max","navigator","hardwareConcurrency","isFirefox","os","cpus","userAgent","toLowerCase","indexOf","SharedWorker","process","product","isLegacy","supportsSharedWorkers","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","createDataBlob","textContent","Blob","blob","append","getBlob","generateWorkerBlob","workerLogic","URL","createObjectURL","generateWorkerString","toString","SharedArrayBuffer","Proxy","custom","encodeURIComponent","regular","Pool","threads","observable","running","pending","fetchHamster","getAvailableThread","addWorkToPending","task","scheduler","metrics","count","enqueued_at","Date","now","push","processQueuedItem","hamster","item","dequeued_at","runTask","threadId","spawnHamster","keepTrackOfThread","id","started_at","workers","spawnHamsters","prepareMeal","hamsterFood","array","input","getSubArrayFromIndex","excludedKeys","has","legacyWheel","pool","trainHamster","feedHamster","hamsterWheel","distribute","distributeTask","returnOutputAndRemoveTask","output","processDataType","aggregate","aggregateThreadOutputs","sort","sortOutput","completedAt","startedAt","completed_at","console","info","removeFromRunning","splice","processReturn","JSON","parse","addThreadOutputWithIndex","setOnMessage","onThreadResponse","onmessageerror","onerror","once","error","shift","terminate","scheduleTask","i","indexes","Data","getSubArrayUsingIndex","getSubArrayIndexes","calculateIndexes","sortTaskOutput","prepareFunction","prepareWorkerTask","messageWorkerThread","getBufferSize","createSharedBuffer","getDataType","setupSharedArrayBuffer","stringify","typedArrayBuffers","otherTransferables","global","concat","functionBody","functionString","String","isAsync","trim","startsWith","substring","lastIndexOf","arr","order","a","b","reverse","byteLength","set","reduce","len","bufferLength","offset","outputLength","n","end","segmentSize","Math","floor","startIndex","endIndex","prepareDistributedTask","forEach","isArray","getTransferList","transferList","transferCount","inputArray","slice","Task","functionToRun","transfers","request","send","setupLegacyTask","setupModernTask","setupDebugMetrics","created_at","setupThreadMetrics","threadMetrics","NodeStore","maxSize","cache","Map","value","delete","Promise","size","oldestKey","next","clear","WebStore","dbName","storeName","db","initDB","indexedDB","open","event","target","onupgradeneeded","result","objectStoreNames","contains","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","transaction","updateTimestamp","then","catch","checkSize","put","timestamp","countRequest","evictOldest","openCursor","cursor","Memoize","store","func","generateTaskKey","cachedResult","applyFunc","hashCode","str","chr","hash","charCodeAt","args","apply","Distribute","localConnection","remoteConnections","clientInfo","sendChannels","pcConstraint","ws","clientId","pendingPromises","pendingTasks","pendingTransfers","awaitingTransfers","lastRequestedTransfers","pendingOutputs","returnDistributedOutput","sendDataResponse","establishConnection","initWebSocket","lastHeartbeat","heartBeatInterval","heartBeatTimeout","WebSocket","onopen","version","logicalCores","sendHeartBeat","handleWebSocketMessage","onclose","handler","handleClientReconnect","updateClientList","handleOffer","handleAnswer","handleCandidate","interval","setInterval","clientListMessage","clients","newClientIds","map","client","createConnection","getData","handleClientDisconnect","close","newClientId","log","targetClient","RTCPeerConnection","iceServers","urls","onicecandidate","candidate","ondatachannel","dataChannelCallback","findOrCreateChannel","createOffer","desc","setLocalDescription","offer","onCreateSessionDescriptionError","remoteConnection","setRemoteDescription","RTCSessionDescription","createAnswer","answer","sendChannel","dataConstraint","ordered","maxRetransmits","random","createDataChannel","onSendChannelStateChange","onReceiveMessageCallback","dataChannel","channel","currentTargetClient","storeClientConnectionInfo","connection","addIceCandidate","RTCIceCandidate","onAddIceCandidateError","getDistributedClient","messageId","generateUniqueId","preparedList","distributedSubTask","sendData","sendChannelKeys","warn","minLatency","Infinity","readyState","latency","initializeDistributedTask","requestNextTransfer","runDistributedTask","awaitingTransfersData","awaitingMessageId","nextKey","find","requestDataTransfer","handleTransferResponse","transferData","lastRequestedTransfer","responseId","pendingTask","isRequestedTransfer","convertFromArrayBuffer","handleTaskResponse","measureLatency","startTime","performance","sendPing","handlePing","handlePong","toFixed","taskMessage","responseData","initializeOutputTransfer","initialResponse","handleOutputTransferRequest","pendingOutput","arrayBuffer","getArrayBuffer","sendBlobData","transferredData","ArrayBuffer","isView","originalArray","newArrayBuffer","newTypedArray","_ref","_ref2","blobToArrayBuffer","fetch","response","Response","Error","messageData","handleIncomingMessage","fulfillTransferRequest","handleTaskRequest","processTransferResponse","ping","pong","values","some","pendingPromise","requestOutputTransfer","outputTransferRequest","transferId","pendingTransferItems","substr","Observable","initialData","arguments","events","on","callback","emit","_len","_key","split","current","setAll","pop","deleteCount","_len2","items","_key2","property","hamstersjs","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","shared","processStartOptions","forceLegacyMode","memoizedFunction","onSuccess","onError"],"sourceRoot":""}