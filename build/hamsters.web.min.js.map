{"version":3,"file":"hamsters.web.min.js","mappings":"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","sources":["webpack://hamsters/webpack/universalModuleDefinition","webpack://hamsters/./scaffold/legacy.js","webpack://hamsters/./scaffold/regular.js","webpack://hamsters/./scaffold/shared.js","webpack://hamsters/webpack/bootstrap","webpack://hamsters/webpack/runtime/define property getters","webpack://hamsters/webpack/runtime/global","webpack://hamsters/webpack/runtime/hasOwnProperty shorthand","webpack://hamsters/./core/habitat.js","webpack://hamsters/./core/pool.js","webpack://hamsters/./core/data.js","webpack://hamsters/./core/task.js","webpack://hamsters/./feature/stores/NodeStore.js","webpack://hamsters/./feature/stores/WebStore.js","webpack://hamsters/./feature/memoize.js","webpack://hamsters/./feature/distribute.js","webpack://hamsters/./feature/observable.js","webpack://hamsters/./hamsters.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hamsters\"] = factory();\n\telse\n\t\troot[\"hamsters\"] = factory();\n})(this, () => {\nreturn ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Legacy {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor(hamsters) {\n      this.hamsters = hamsters;\n      this.scaffold = (params, resolve, reject) => {\n        var rtn = {\n          data: [],\n          dataType: (typeof params.dataType !== \"undefined\" ? params.dataType : null)\n        };\n        if(this.hamsters.habitat.reactNative) {\n          self.rtn = rtn;\n        }\n        if(this.hamsters.habitat.node || this.hamsters.habitat.isIE) {\n          eval(params.hamstersJob);\n        } else {\n          params.hamstersJob();\n        }\n        resolve(rtn.data);\n      }\n    }\n  }\n  \n  export default Legacy;\n  ","class Regular {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n        this.scaffold = function() {\n            self.params = {};\n            self.rtn = {};\n\n            self.onmessage = function (message) {\n                this.params = message.data;\n                this.rtn = {\n                    data: [],\n                    dataType: (typeof this.params.dataType !== 'undefined' ? this.params.dataType : null),\n                    index: this.params.index\n                };\n                if (this.params.sharedBuffer) {\n                    this.params.sharedArray = typedArrayFromBuffer(this.params.dataType, this.params.sharedBuffer);\n                }\n                eval(this.params.hamstersJob);\n                const buffers = handleDataType(this.rtn);\n                returnResponse(this.rtn, buffers);\n            }.bind(this);\n\n            function handleDataType(rtn) {\n                if (this.params.sharedArray) {\n                    // Do nothing here, we don't need to return a buffer rtn.data is useless here\n                } else if (this.params.dataType) {\n                    rtn.data = typedArrayFromBuffer(rtn.dataType, rtn.data);\n                }\n                return getTransferableObjects(rtn); // Return transferable objects\n            }\n\n            function typedArrayFromBuffer(dataType, buffer) {\n                const types = {\n                    'Uint32': Uint32Array,\n                    'Uint16': Uint16Array,\n                    'Uint8': Uint8Array,\n                    'Uint8clamped': Uint8ClampedArray,\n                    'Int32': Int32Array,\n                    'Int16': Int16Array,\n                    'Int8': Int8Array,\n                    'Float32': Float32Array,\n                    'Float64': Float64Array\n                };\n                return types[dataType] ? new types[dataType](buffer) : buffer;\n            }\n\n            function returnResponse(rtn, buffers) {\n                if (buffers && buffers.length > 0) {\n                    postMessage(rtn, buffers);  // PostMessage with transferable objects\n                } else {\n                    postMessage(rtn);  // PostMessage without transferable objects\n                }\n            }\n\n            function getTransferableObjects(obj) {\n                const transferableObjects = new Set();\n                const typedArrayTypes = [\n                    'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array',\n                    'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n                ];\n                const otherTransferables = [\n                    'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n                ];\n\n                const globalContext = typeof self !== 'undefined' ? self : window;\n\n                const allTypes = [...typedArrayTypes, ...otherTransferables];\n\n                for (const prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        for (const type of allTypes) {\n                            if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n                                if (typedArrayTypes.includes(type)) {\n                                    transferableObjects.add(obj[prop].buffer);\n                                } else {\n                                    transferableObjects.add(obj[prop]);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return Array.from(transferableObjects);\n            }\n        }\n    }\n}\n\nexport default Regular;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Shared {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n      this.scaffold = function() {\n        self.params = {};\n        self.rtn = {};\n    \n        addEventListener('connect', (incomingConnection) => {\n          var port = incomingConnection.ports[0];\n          port.start();\n          port.addEventListener('message', (incomingMessage) => {\n            this.params = incomingMessage.data;\n            this.rtn = {\n              data: [],\n              dataType: this.params.dataType\n            };\n            eval(\"(\" + this.params.hamstersJob + \")\")();\n            port.postMessage(this.rtn);\n          }, false);\n        }, false);\n      }\n    }\n  }\n  \n  export default Shared;\n  ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.debug = false;\n    this.importScripts = null;\n    this.relay = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferable = this.supportsTransferableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE = this.isInternetExplorer();\n    this.selectHamsterWheel = this.selectHamsterWheel.bind(this);\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.locateBlobBuilder = this.findAvailableBlobBuilder();\n    this.legacy = this.isLegacyEnvironment();\n    this.Worker = this.locateWorkerObject();\n    this.maxThreads = this.determineGlobalThreads();\n    this.keys = this.getHabitatKeys();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(this.browser && typeof navigator.hardwareConcurrency !== \"undefined\") {\n      max = navigator.hardwareConcurrency;\n      if(this.isFirefox()) {\n        max = (max > 20 ? 20 : max);\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function isFirefox - Detect firefox browser\n  */\n  isFirefox() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return (typeof Worker !== 'undefined' ? Worker : false);\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return (typeof SharedWorker !== 'undefined' ? SharedWorker : false);\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return (typeof window === \"object\");\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.indexOf(\"MSIE \") !== -1 || navigator.userAgent.indexOf(\"Trident/\") !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return (typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser);\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a web worker\n  */\n  isWebWorker() {\n    return (typeof importScripts === \"function\" && !this.isReactNative());\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is React Native\n  */\n  isReactNative() {\n    return (typeof navigator !== \"undefined\" && typeof navigator.product !== \"undefined\" && navigator.product === \"ReactNative\");\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return ((typeof navigator === \"undefined\") && !this.isNode() && !this.isWebWorker() && !this.isReactNative());\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = !!!this.Worker;\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy;\n  }\n\n  /**\n  * @function supportsSharedWorkers - Detects if execution environment supports SharedWorkers\n  */\n  supportsSharedWorkers() {\n    return (typeof SharedWorker !== 'undefined');\n  }\n\n  /**\n  * @function findAvailableBlobBuilder - Attempts to locate a data blob builder, with vendor prefixes\n  */\n  findAvailableBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return 'Environment does not support data blobs!';\n  }\n\n  /**\n  * @function createDataBlob - Creates a new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates a blob URI for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    return URL.createObjectURL(this.createDataBlob(this.generateWorkerString(workerLogic)));\n  }\n\n  generateWorkerString(workerLogic) {\n    return `(${workerLogic.toString()})();`;\n  }\n  /**\n  * @function supportsTransferableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferableObjects() {\n    return (typeof Uint8Array !== 'undefined');\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports SharedArrayBuffers\n  */\n  supportsAtomicOperations() {\n    return (typeof SharedArrayBuffer !== 'undefined');\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports Proxy objects\n  */\n  supportsProxies() {\n    return (typeof Proxy !== 'undefined');\n  }\n\n  /**\n  * @function selectHamsterWheel - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.hamsters.scaffold.custom) {\n      return this.hamsters.scaffold.custom;\n    }\n    if(this.isIE) {\n      return this.hamsters.scaffold.legacy.scaffold;\n    }\n    if(this.reactNative) {\n      return 'reactNativeHamster.js';\n    }\n    if (this.node) {\n      return './node_modules/hamsters.js/build/common/node.js';\n    }\n    return 'data:text/javascript,' + encodeURIComponent(this.generateWorkerString(this.hamsters.scaffold.regular.scaffold));\n  }\n\n  /**\n  * @function getHabitatKeys - Returns keys for this Habitat instance\n  */\n  getHabitatKeys() {\n    return [\n      'worker','sharedworker',\n      'legacy','proxies',\n      'reactnative','atomics',\n      'transferable','browser',\n      'shell','node','debug',\n      'persistence','importscripts',\n      'maxthreads', 'parentport',\n      'webworker', 'relay'\n    ];\n  }\n}\n\nexport default Habitat;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Pool {\n\t\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.threads = new hamsters.observable([]);\n    this.running = new hamsters.observable([]);\n    this.pending = new hamsters.observable([]);\n    this.fetchHamster = this.getAvailableThread;\n  }\n\n  /**\n  * @function fetchHamster - Adds task to queue waiting for available thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(index, task, resolve, reject) {\n    if(this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[task.scheduler.count].enqueued_at = Date.now();\n    }\n    this.pending.push({\n      index: index,\n      count: task.scheduler.count,  \n      task: task,\n      resolve: resolve,\n      reject: reject\n    });\n  }\n\n  /**\n  * @function processQueuedItem - Invokes processing of next item in queue\n  * @param {object} item - Task to process\n  */\n  processQueuedItem(hamster, item) {\n    if(this.hamsters.habitat.debug) {\n      item.task.scheduler.metrics.threads[item.count].dequeued_at = Date.now();\n    }\n  \treturn this.runTask(hamster, item.index, item.task, item.resolve, item.reject);\n  }\n\n  /**\n  * @function getAvailableThread- Keeps track of threads running, scoped globally and to task\n  * @param {number} threadId - Id of thread\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  */\n  getAvailableThread(threadId) {\n    if(this.hamsters.habitat.persistence) {\n      return this.threads.get(threadId);\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    // if(this.hamsters.habitat.debug) {\n    //   task.scheduler.metrics.threads[id].started_at = Date.now();\n    // }\n    task.scheduler.workers.push(id); //Keep track of threads scoped to current task\n    this.running.push(id); //Keep track of all currently running threads\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {number} maxThreds - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    for (maxThreads; maxThreads > 0; maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    const { selectHamsterWheel, Worker } = this.hamsters.habitat;\n    const hamsterWheel = selectHamsterWheel();\n    return new Worker(hamsterWheel);\n  }\n\n  /**\n   * @function prepareMeal\n   * @description Prepares message to send to a thread and invoke execution\n   * @param {number} index - Index of the subarray to process\n   * @param {number} subTaskId - Subtask ID\n   * @param {object} task - Provided library functionality options for this task\n   * @returns {object} - Prepared message to send to a thread\n   */\n  prepareMeal(index, task) {\n    // Prepare the base hamsterFood object\n    const hamsterFood = {\n      array: task.input.array && task.input.array.length !== 0 ? \n            this.hamsters.data.getSubArrayFromIndex(index, task.input.array) : [],\n      index: index\n    };\n\n    // Add sharedBuffer if it exists\n    if (typeof task.scheduler.sharedBuffer !== 'undefined') {\n      hamsterFood.sharedBuffer = task.scheduler.sharedBuffer;\n    }\n\n    // List of excluded keys\n    const excludedKeys = new Set(['array', 'threads', 'sharedArray']);\n\n    // Iterate over task.input properties and add to hamsterFood\n    for (const key in task.input) {\n      if (task.input.hasOwnProperty(key) && !excludedKeys.has(key)) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n\n    return hamsterFood;\n  }\n\n  /**\n  * @function hamsterWheel - Runs function using thread\n  * @param {object} array - Provided data to execute logic on\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, index, task, resolve, reject) {\n  \tlet threadId = this.running.length();\n    index.id = threadId;\n    let hamsterFood = this.prepareMeal(index, task);\n    this.keepTrackOfThread(task, threadId);\n    if(this.hamsters.habitat.legacy) {\n      this.hamsters.habitat.legacyWheel(this.hamsters.habitat, hamsterFood, resolve, reject);\n    } else {\n      this.hamsters.pool.trainHamster(index, task, threadId, hamster, resolve, reject);\n      this.hamsters.data.feedHamster(hamster, hamsterFood);\n    }\n    task.scheduler.count += 1;\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {object} array - Provided library functionality options for this task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Results from select hamster wheel\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(index, task, resolve, reject) {\n    if(this.hamsters.habitat.maxThreads <= this.running.length()) {\n      return this.addWorkToPending(index, task, resolve, reject);\n    }\n    let hamster = this.fetchHamster(this.running.length());\n    return this.runTask(hamster, index, task, resolve, reject);\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - Gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    if(task.scheduler.sharedBuffer) {\n      task.output = this.hamsters.data.processDataType(task.input.dataType, task.scheduler.sharedBuffer);\n    }\n    if(task.input.aggregate) {\n      task.output = this.hamsters.data.aggregateThreadOutputs(task.output, task.input.dataType);\n    }\n    if(task.input.sort) {\n      task.output = this.hamsters.data.sortOutput(task.output, task.input.sort)\n    }\n    if (this.hamsters.habitat.debug) {\n      const completedAt = Date.now();\n      const startedAt = task.scheduler.metrics.started_at;\n      task.scheduler.metrics.completed_at = completedAt;\n      console.info(`Hamsters.js Task Completed In ${completedAt - startedAt}ms`);\n    }\n    if(task.input.distribute) {\n      resolve(task);\n    } else {\n      resolve(task.output);\n    }\n  }\n\n  removeFromRunning(task, threadId) {\n    this.running.splice(this.running.indexOf(threadId), 1); //Remove thread from running pool\n    task.scheduler.workers.splice(task.scheduler.workers.indexOf(threadId), 1); //Remove thread from task running pool\n  }\n\n  processReturn(habitat, index, message, task) {\n    let output = message.data;\n    if(habitat.reactNative) {\n      output = JSON.parse(message).data;\n    } else if(typeof message.data.data !== \"undefined\") {\n      output = message.data.data;\n    }\n    if(task.scheduler.threads !== 1) {\n      this.hamsters.data.addThreadOutputWithIndex(task, index, output);\n    } else {\n      task.output = output;\n    }\n  }\n\n  setOnMessage(hamster, onThreadResponse, habitat, reject) {\n    if (habitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onmessageerror = reject;\n      hamster.port.onerror = reject;\n    }\n    if(habitat.node) {\n      hamster.once('message', onThreadResponse);\n      hamster.once('onmessageerror', reject);\n      hamster.once('error', reject);\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = reject;\n      hamster.error = reject;\n    }\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} threadId - Internal use id for this thread\n  * @param {object} task - Provided library functionality options for this task\n  * @param {worker} hamster - Thread to train\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(index, task, threadId, hamster, resolve, reject) {\n    let onThreadResponse = (message) => {\n      this.hamsters.pool.processReturn(this.hamsters.habitat, index, message, task);\n      // if(this.hamsters.habitat.debug) {\n      //   task.scheduler.metrics.threads[threadId].completed_at = Date.now();\n      // }\n      this.hamsters.pool.removeFromRunning(task, threadId);\n      if (task.scheduler.workers.length === 0 && task.scheduler.count === task.scheduler.threads) {\n        this.hamsters.pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (this.hamsters.pool.pending.length() !== 0) {\n        return this.hamsters.pool.processQueuedItem(hamster, this.hamsters.pool.pending.shift());\n      }\n      if(!this.hamsters.habitat.persistence) {\n        return hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n      }\n    };\n    this.hamsters.pool.setOnMessage(hamster, onThreadResponse, this.hamsters.habitat, reject);\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  * @param {boolean} persistence - Whether persistence mode is enabled or not\n  * @param {function} wheel - Scaffold to execute login within\n  * @param {number} maxThreads - Maximum number of threads for this client\n  */\n  scheduleTask(task, resolve, reject) {\n    // if(this.hamsters.habitat.debug) {\n    //   let metrics = task.scheduler.metrics;\n    //   metrics.started_at = Date.now();\n    //   return new Promise((resolve, reject) => {\n    //     while (i < task.scheduler.threads) {\n    //       metrics.threads.push({\n    //         created_at: Date.now(),\n    //         started_at: null,\n    //         enqueued_at: null,\n    //         dequeued_at: null,\n    //         completed_at: null\n    //       });\n    //       this.hamsterWheel(task.scheduler.indexes[i], task, resolve, reject);\n    //       i += 1;\n    //     }\n    //   });\n    // }\n    //Process with debug mode disabled, no need for time stamping\n  \t// return new Promise((resolve, reject) => {\n      if(task.input.distribute && task.type !== 'task-response') {\n        this.hamsters.distribute.distributeTask(task, resolve, reject);\n      } else {\n        let i = 0;\n        while (i < task.scheduler.threads) {\n          this.hamsterWheel(task.scheduler.indexes[i], task, resolve, reject);\n          i += 1;\n        }\n      }\n    // });\n  }\n}\n\nexport default Pool;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters; // Set the hamsters object as a property of Data class\n    this.getSubArrayFromIndex = this.getSubArrayUsingIndex.bind(this); // Bind getSubArrayUsingIndex function\n    this.getSubArrayIndexes = this.calculateIndexes.bind(this); // Bind calculateIndexes function\n    this.sortOutput = this.sortTaskOutput.bind(this); // Bind sortTaskOutput function\n    this.aggregateThreadOutputs = this.aggregateThreadOutputs.bind(this);\n    this.processDataType = this.typedArrayFromBuffer;\n    this.prepareFunction = this.prepareWorkerTask.bind(this); // Bind prepareWorkerTask function\n    this.feedHamster = this.messageWorkerThread.bind(this); // Bind messageWorkerThread function\n    this.getBufferSize = this.getBufferSize;\n    this.createSharedBuffer = this.createSharedBuffer.bind(this);\n    this.getDataType = this.getDataType;\n    this.setupSharedArrayBuffer = this.setupSharedArrayBuffer.bind(this);\n  }\n\n  /**\n  * @function messageWorkerThread - Prepares message to send to thread\n  * @param {object} hamstersHabitat - Hamsters Habitat instance\n  * @param {Worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorkerThread(hamster, hamsterFood) {\n    if(this.hamsters.habitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    return hamster.postMessage(hamsterFood, this.hamsters.data.getTransferableObjects(hamsterFood));\n  }\n\n  getTransferableObjects(obj) {\n    const typedArrayBuffers = [];\n    const transferableObjects = [];\n    const typedArrayTypes = [\n      'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', \n      'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n    ];\n    const otherTransferables = [\n      'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n    ];\n    const globalContext = typeof window !== 'undefined' ? window : global;\n  \n    for (const prop in obj) {\n      for (const type of typedArrayTypes) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          typedArrayBuffers.push(obj[prop].buffer);\n          break;\n        }\n      }\n  \n      for (const type of otherTransferables) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          transferableObjects.push(obj[prop]);\n          break;\n        }\n      }\n    }\n  \n    return typedArrayBuffers.concat(transferableObjects);\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'Uint32': Uint32Array,\n      'Uint16': Uint16Array,\n      'Uint8': Uint8Array,\n      'Uint8clamped': Uint8ClampedArray,\n      'Int32': Int32Array,\n      'Int16': Int16Array,\n      'Int8': Int8Array,\n      'Float32': Float32Array,\n      'Float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return buffer;\n    }\n    return new types[dataType](buffer);\n  }\n\n  /**\n  * @function prepareWorkerTask - Prepares function for thread, strips whitespace\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareWorkerTask(functionBody) {\n    let functionString = String(functionBody);\n    let isAsync = functionString.trim().startsWith('async');\n    functionBody = functionString.substring(functionString.indexOf(\"{\") + 1, functionString.lastIndexOf(\"}\"));\n    if(isAsync) {\n      return `(async () => {\n        ${functionBody}\n      })();`;\n    }\n    return functionBody;\n  }\n\n  /**\n  * @function sortTaskOutput - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortTaskOutput(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n   * @function getBufferSize - Gets the byte length of the input array\n   * @param {TypedArray} array - The input typed array\n   * @returns {number} - The byte length of the array\n   */\n  getBufferSize(array) {\n    return array.byteLength;\n  }\n\n  /**\n   * @function createSharedBuffer - Creates a SharedArrayBuffer based on the input array's byte length\n   * @param {TypedArray} array - The input typed array\n   * @returns {SharedArrayBuffer} - The created SharedArrayBuffer\n   */\n  createSharedBuffer(array) {\n    const byteLength = this.getBufferSize(array);\n    const sharedBuffer = new SharedArrayBuffer(byteLength);\n    const sharedArray = new array.constructor(sharedBuffer);\n\n    // Copy data from the input array to the shared array\n    sharedArray.set(array);\n\n    return sharedBuffer;\n  }\n\n  /**\n   * @function setupSharedArrayBuffer - Sets up the shared buffer and corresponding typed array\n   * @param {TypedArray} array - The input typed array\n   * @returns {object} - SharedArrayBuffer;\n   */\n  setupSharedArrayBuffer(array) {\n    return this.createSharedBuffer(array);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function addThreadOutputWithIndex - Joins individual thread outputs into single result\n  * @param {object} task - Hamsters task object\n  * @param {object} index - Index information\n  * @param {array} output - Output array\n  */\n  addThreadOutputWithIndex(task, index, output) {\n    let i = 0;\n    const outputLength = output.length;\n    for (i; i < outputLength; i++) {\n      task.output[(index.start + i)] = output[i];\n    }\n  }\n\n  /**\n   * @function calculateIndexes - Splits a single array into multiple equal sized subarrays\n   * @param {array} array - Array to split\n   * @param {number} n - Number of subarrays to create\n   */\n  calculateIndexes(array, n) {\n    // If n is 1, return the whole array range\n    if (n === 1) {\n      return [{ start: 0, end: array.length - 1 }];\n    }\n\n    const indexes = [];\n    const segmentSize = Math.floor(array.length / n);\n    let startIndex = 0;\n\n    for (let i = 0; i < n; i++) {\n      const endIndex = startIndex + segmentSize - 1;\n      indexes.push({ start: startIndex, end: endIndex });\n      startIndex = endIndex + 1;\n    }\n\n    // Adjust the last segment to cover any remaining elements\n    if (startIndex < array.length) {\n      indexes[n - 1].end = array.length - 1;\n    }\n\n    return indexes;\n  }\n\n  getTransferList(task) {\n    const transferList = {};\n    const hamsterFood = task.input;\n    Object.keys(hamsterFood).forEach(item => {\n      if (Array.isArray(hamsterFood[item])) {\n        transferList[item] = hamsterFood[item];\n        task.input[item] = null;\n        hamsterFood[item] = 'Awaiting Transfer';\n      }\n    });\n    return {hamsterFood, transferList, task, transferCount: Object.keys(transferList).length};\n  }\n\n  /**\n  * @function getSubArrayUsingIndex - Slices subarray based on provided index\n  * @param {object} index - Index information\n  * @param {object} inputArray - Hamsters task object\n  */\n  getSubArrayUsingIndex(index, inputArray) {\n    return inputArray.slice(index.start, index.end + 1);\n  }\n}\n\nexport default Data;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Task {\n  /**\n   * @constructor\n   * @param {object} habitat - The environment settings\n   * @param {object} data - Data utility methods\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  constructor(hamsters, params, functionToRun) {\n    'use strict';\n\n    this.input = params;\n    this.type = 'task-local';\n    this.output = [];\n    this.scheduler = {\n      count: 0,\n      threads: params.threads || 1,\n      transfers: {\n        request: 0,\n        send: 0\n      },\n      workers: []\n    };\n\n    if (hamsters.habitat.legacy) {\n      this.setupLegacyTask(hamsters, functionToRun);\n    } else {\n      this.setupModernTask(hamsters, params, functionToRun);\n    }\n\n    if (hamsters.habitat.debug) {\n      this.setupDebugMetrics();\n    }\n  }\n\n  /**\n   * @method setupLegacyTask\n   * @description Sets up task for legacy environments\n   * @param {function} functionToRun - Function to execute\n   */\n  setupLegacyTask(hamsters, functionToRun) {\n    this.scheduler.threads = 1;\n    if (!hamsters.habitat.node && !hamsters.habitat.isIE) {\n      this.input.hamstersJob = functionToRun;\n    }\n  }\n\n  /**\n   * @method setupModernTask\n   * @description Sets up task for modern environments\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  setupModernTask(hamsters, params, functionToRun) {\n    this.input.hamstersJob = hamsters.habitat.legacy ? functionToRun : hamsters.data.prepareFunction(functionToRun);\n    if (params.sharedArray && hamsters.habitat.atomics) {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.sharedArray, this.scheduler.threads);\n      this.scheduler.sharedBuffer = hamsters.data.setupSharedArrayBuffer(params.sharedArray);\n      this.input.sharedArray = []; //Reduce ram usage on main thread, do not preserve original array its no longer needed.\n    } else {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.array, this.scheduler.threads);\n    }\n  }\n\n  /**\n   * @method setupDebugMetrics\n   * @description Sets up debug metrics if debug mode is enabled\n   */\n  setupDebugMetrics() {\n    this.scheduler.metrics = {\n      created_at: Date.now(),\n      started_at: Date.now(),\n      completed_at: null,\n      threads: this.setupThreadMetrics()\n    };\n  }\n\n  setupThreadMetrics() {\n    let i = 0;\n    let threadMetrics = [];\n    while(i < this.scheduler.threads) {\n      threadMetrics.push({\n        created_at: Date.now(),\n        started_at: null,\n        enqueued_at: null,\n        dequeued_at: null,\n        completed_at: null\n      });\n      i += 1;\n    }\n    return threadMetrics;\n  }\n}\n  \nexport default Task;\n  ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass NodeStore {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.cache = new Map();\n    }\n\n    get(key) {\n        if (this.cache.has(key)) {\n            const value = this.cache.get(key);\n            // Refresh the key\n            this.cache.delete(key);\n            this.cache.set(key, value);\n            return Promise.resolve(value);\n        }\n        return Promise.resolve(null);\n    }\n\n    set(key, value) {\n        if (this.cache.size >= this.maxSize) {\n            // Remove the oldest (least recently used) entry\n            const oldestKey = this.cache.keys().next().value;\n            this.cache.delete(oldestKey);\n        }\n        this.cache.set(key, value);\n        return Promise.resolve();\n    }\n\n    clear() {\n        this.cache.clear();\n        return Promise.resolve();\n    }\n}\n\nexport default NodeStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass WebStore {\n    constructor(dbName, storeName, maxSize) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.maxSize = maxSize;\n        this.db = null;\n        this.initDB();\n    }\n\n    initDB() {\n        const self = this;\n        const request = indexedDB.open(this.dbName, 1);\n\n        request.onerror = function(event) {\n            console.error('Error opening database:', event.target.error);\n        };\n\n        request.onupgradeneeded = function(event) {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains(self.storeName)) {\n                const objectStore = db.createObjectStore(self.storeName, { keyPath: 'key' });\n                objectStore.createIndex('by_key', 'key', { unique: true });\n                objectStore.createIndex('by_timestamp', 'timestamp');\n            }\n        };\n\n        request.onsuccess = function(event) {\n            self.db = event.target.result;\n        };\n    }\n\n    get(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve(null);\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const result = event.target.result;\n                if (result) {\n                    self.updateTimestamp(key).then(() => resolve(result.value)).catch(reject);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    set(key, value) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            self.checkSize().then(() => {\n                const transaction = self.db.transaction([self.storeName], 'readwrite');\n                const objectStore = transaction.objectStore(self.storeName);\n                const request = objectStore.put({ key: key, value: value, timestamp: Date.now() });\n\n                request.onsuccess = function() {\n                    resolve();\n                };\n\n                request.onerror = function(event) {\n                    reject(event.target.error);\n                };\n            }).catch(reject);\n        });\n    }\n\n    clear() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.clear();\n\n            request.onsuccess = function() {\n                resolve();\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    checkSize() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const countRequest = objectStore.count();\n\n            countRequest.onsuccess = function() {\n                const count = countRequest.result;\n                if (count >= self.maxSize) {\n                    self.evictOldest().then(resolve).catch(reject);\n                } else {\n                    resolve();\n                }\n            };\n\n            countRequest.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    evictOldest() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const index = objectStore.index('by_timestamp');\n            const request = index.openCursor(null, 'next');\n\n            request.onsuccess = function(event) {\n                const cursor = event.target.result;\n                if (cursor) {\n                    cursor.delete().onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    updateTimestamp(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const data = event.target.result;\n                if (data) {\n                    data.timestamp = Date.now();\n                    objectStore.put(data).onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n}\n\nexport default WebStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport NodeStore from './stores/NodeStore';\nimport WebStore from './stores/WebStore';\n\nclass Memoize {\n    constructor(hamsters, maxSize) {\n        'use strict';\n\n        this.hamsters = hamsters;\n        this.store = this.hamsters.habitat.node ? new NodeStore(maxSize) : new WebStore('hamstersjs', 'cacheStore', maxSize);\n    }\n\n    memoize(func) {\n        const self = this;\n        return function(task) {\n            const key = self.generateTaskKey(task);\n\n            return new Promise(function(resolve, reject) {\n                self.store.get(key).then(function(cachedResult) {\n                    if (cachedResult !== null) {\n                        resolve(cachedResult);\n                    } else {\n                        self.applyFunc(func, task).then(function(result) {\n                            self.store.set(key, result).then(function() {\n                                resolve(result);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }\n                }).catch(reject);\n            });\n        };\n    }\n\n    generateTaskKey(task) {\n        const key = JSON.stringify({ input: task.input });\n        return this.hashCode(key);\n    }\n\n    hashCode(str) {\n        let hash = 0, i, chr;\n        if (str.length === 0) return hash;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash.toString();\n    }\n\n    applyFunc(func, args) {\n        return new Promise((resolve, reject) => {\n            try {\n                const result = func.apply(null, args);\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n\nexport default Memoize;","class Distribute {\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.localConnection = null;\n    this.remoteConnections = new hamsters.observable({});\n    this.clientInfo = new hamsters.observable({});\n    this.sendChannels = new hamsters.observable({});\n    this.pcConstraint = null;\n    this.ws = null;\n    this.clientId = null;\n    this.pendingPromises = new Map(); // targetClient -> Map(messageId -> promiseDetails)\n    this.pendingTasks = new hamsters.observable({});\n    this.pendingTransfers = new hamsters.observable({});\n    this.awaitingTransfers = new hamsters.observable({});\n    this.lastRequestedTransfers = new hamsters.observable({});\n    this.pendingOutputs = new hamsters.observable({});\n    this.returnDistributedOutput = this.sendDataResponse.bind(this);\n    this.establishConnection = this.initWebSocket.bind(this);\n    this.lastHeartbeat = {};\n    this.heartBeatInterval = 30 * 1000; //Send heartbeat message every 30 seconds\n    this.deletedPromises = [];\n    this.heartBeatTimeout = {};\n    this.messageCounter = 0;\n    this.generatedMessageIds = [];\n    this.promiseTimeoutDuration = 60000; // 60 seconds timeout\n    this.startPromiseCleanupInterval();\n  }\n\n  initWebSocket() {\n    this.ws = new WebSocket(`${this.hamsters.habitat.relay}`);\n\n    this.ws.onopen = () => {\n      console.info(`Hamsters.js ${this.hamsters.version} connection established`);\n      this.ws.send(JSON.stringify({\n        type: 'register',\n        logicalCores: this.hamsters.maxThreads\n      }));\n      this.sendHeartBeat(this.heartBeatInterval);\n    };\n\n    this.ws.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      this.handleWebSocketMessage(message);\n    };\n\n    this.ws.onerror = (error) => {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} connection error:`, error);\n      }\n    };\n\n    this.ws.onclose = () => {\n      if (this.hamsters.habitat.debug) {\n        console.info(`Hamsters.js ${this.hamsters.version} connection closed. Reconnecting...`);\n      }\n      this.establishConnection();\n    };\n  }\n\n  handleWebSocketMessage(message) {\n    const handlers = {\n      'register': this.handleClientReconnect.bind(this),\n      'update-client-list': this.updateClientList.bind(this),\n      'offer': this.handleOffer.bind(this),\n      'answer': this.handleAnswer.bind(this),\n      'candidate': this.handleCandidate.bind(this)\n    };\n\n    const handler = handlers[message.type];\n    if (handler) {\n      handler(message);\n    } else if (this.hamsters.habitat.debug) {\n      console.info(`Hamsters.js ${this.hamsters.version} unknown message type: ${message.type}`);\n    }\n  }\n\n  sendHeartBeat(interval) {\n    this.heartBeatTimeout = setInterval(() => {\n      this.ws.send(JSON.stringify({\n        type: 'heartbeat'\n      }));\n      this.lastHeartbeat = Date.now();\n    }, interval);\n  }\n\n  updateClientList(clientListMessage) {\n    const clients = clientListMessage.clients;\n    const newClientIds = new Set(clients.map(client => client.id));\n    clients.forEach(client => {\n      if (client.id !== this.clientId && !this.remoteConnections.get(client.id)) {\n        this.createConnection(client.id);\n      }\n    });\n    const remoteConnections = this.remoteConnections.getData();\n    Object.keys(remoteConnections).forEach((key) => {\n      if (!newClientIds.has(key)) {\n        this.handleClientDisconnect(key);\n      }\n    });\n  }\n\n  handleClientDisconnect(clientId) {\n    if (this.remoteConnections.get(clientId)) {\n      this.remoteConnections.get(clientId).close();\n      this.remoteConnections.delete(clientId, 'peer');\n    }\n    if (this.sendChannels.get(clientId)) {\n      this.sendChannels.get(clientId).close();\n      this.sendChannels.delete(clientId, 'channel');\n    }\n    this.clientInfo.delete(clientId);\n  }\n\n  handleClientReconnect(message) {\n    const newClientId = message.id;\n\n    if (this.clientId === newClientId) {\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} reconnected with same ID`);\n      }\n      return;\n    }\n    this.handleClientDisconnect(newClientId);\n    this.clientId = newClientId;\n  }\n\n  createConnection(targetClient) {\n    if (targetClient === this.clientId || this.remoteConnections.get(targetClient)) {\n      return;\n    }\n\n    const servers = {\n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n    };\n\n    const localConnection = new RTCPeerConnection(servers, this.pcConstraint);\n\n    localConnection.onicecandidate = (e) => {\n      if (e.candidate) {\n        this.ws.send(JSON.stringify({ \n          type: 'candidate', \n          target: targetClient, \n          from: this.clientId,\n          logicalCores: this.hamsters.maxThreads,\n          userAgent: navigator.userAgent,\n          candidate: e.candidate\n        }));\n      }\n    };\n\n    localConnection.ondatachannel = (event) => {\n      this.dataChannelCallback(event, targetClient);\n    };\n\n    this.findOrCreateChannel(targetClient, localConnection);\n\n    this.remoteConnections.set(targetClient, localConnection);\n    localConnection.createOffer().then(desc => {\n      localConnection.setLocalDescription(desc);\n      this.ws.send(JSON.stringify({ type: 'offer', target: targetClient, offer: desc }));\n    }).catch(this.onCreateSessionDescriptionError.bind(this));\n  }\n\n  handleOffer(data) {\n    const targetClient = data.from;\n    console.log('WE HAVE A OFFER ', data);\n    if (!this.remoteConnections.get(targetClient)) {\n      const servers = {\n        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n      };\n\n      const remoteConnection = new RTCPeerConnection(servers, this.pcConstraint);\n\n      remoteConnection.onicecandidate = (e) => {\n        if (e.candidate) {\n          this.ws.send(JSON.stringify({ type: 'candidate', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, candidate: e.candidate }));\n        }\n      };\n\n      remoteConnection.ondatachannel = (event) => {\n        this.dataChannelCallback(event, targetClient);\n      };\n\n      remoteConnection.setRemoteDescription(new RTCSessionDescription(data.offer)).then(() => {\n        return remoteConnection.createAnswer();\n      }).then(desc => {\n        this.ws.send(JSON.stringify({ type: 'answer', target: targetClient, logicalCores: this.hamsters.maxThreads, userAgent: navigator.userAgent, answer: desc }));\n        return remoteConnection.setLocalDescription(desc);\n      }).catch(this.onCreateSessionDescriptionError.bind(this));\n\n      this.remoteConnections.set(targetClient, remoteConnection, 'peer');\n      this.findOrCreateChannel(targetClient, remoteConnection);\n    }\n  }\n\n  findOrCreateChannel(targetClient, remoteConnection) {\n    let sendChannel = this.sendChannels.get(targetClient);\n    if(!sendChannel) {\n      const dataConstraint = {\n        ordered: true,\n        maxRetransmits: 3,\n        id: Math.floor(Math.random() * 65536)\n      };\n      sendChannel = remoteConnection.createDataChannel('hamstersjs', dataConstraint);\n      \n      sendChannel.onopen = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onclose = () => {\n        this.onSendChannelStateChange(targetClient);\n      };\n\n      sendChannel.onmessage = (event) => {\n        this.onReceiveMessageCallback(targetClient, event.data);\n      };\n\n      this.sendChannels.set(targetClient, sendChannel, 'channel');\n    }\n    return sendChannel\n  }\n  \n  dataChannelCallback(event, targetClient) {\n    const dataChannel = event.channel;\n    const currentTargetClient = targetClient;\n\n    dataChannel.onmessage = (event) => {\n      this.onReceiveMessageCallback(currentTargetClient, event.data);\n    };\n\n    this.sendChannels.set(currentTargetClient, dataChannel);\n  }\n\n  storeClientConnectionInfo(data) {\n    const client = {\n      logicalCores: data.logicalCores,\n      userAgent: data.userAgent,\n    };\n    this.clientInfo.set(data.from, client);\n  }\n\n  handleAnswer(data) {\n    this.storeClientConnectionInfo(data);\n    const connection = this.remoteConnections.get(data.from);\n    connection.setRemoteDescription(new RTCSessionDescription(data.answer));\n    this.remoteConnections.set(data.from, connection);\n  }\n\n  handleCandidate(data) {\n    let connection = this.remoteConnections.get(data.from);\n    if(!connection) {\n      this.storeClientConnectionInfo(data);\n      connection = this.remoteConnections.get(data.from);\n    }\n    connection.addIceCandidate(new RTCIceCandidate(data.candidate)).catch(this.onAddIceCandidateError.bind(this));\n    this.remoteConnections.set(data.from, connection);\n  }\n\n  distributeTask(task, resolve, reject) {\n    const targetClient = task.input.client || this.getDistributedClient();\n    if (!targetClient) {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} no target client found.`);\n      }\n      reject('No target client found.');\n      return;\n    }\n  \n    const messageId = this.generateUniqueId();\n    const preparedList = this.hamsters.data.getTransferList(task);\n    const distributedSubTask = {\n      hamsterFood: preparedList.hamsterFood,\n      task: preparedList.task,\n      messageId: messageId,\n      type: 'task-request'\n    };\n  \n    if (!this.pendingPromises.has(targetClient)) {\n      this.pendingPromises.set(targetClient, new Map());\n    }\n    this.pendingPromises.get(targetClient).set(messageId, { resolve, reject, state: 'pending' });\n    \n    if (preparedList.transferCount > 0) {\n      this.pendingTransfers.set(messageId, preparedList.transferList);\n    }\n    this.sendData({ targetClient, data: distributedSubTask });\n  }\n\n  getDistributedClient() {\n    const sendChannelKeys = Object.keys(this.sendChannels.getData());\n    if (sendChannelKeys.length === 0) {\n      if (this.hamsters.habitat.debug) {\n        console.warn(`Hamsters.js ${this.hamsters.version} no send channels available.`);\n      }\n      return null;\n    }\n\n    let minLatency = Infinity;\n    let targetClient = null;\n\n    sendChannelKeys.forEach(clientId => {\n      const channel = this.sendChannels.get(clientId);\n      const client = this.clientInfo.get(clientId);\n      if (channel.readyState === 'open' && client && client.latency < minLatency) {\n        minLatency = client.latency;\n        targetClient = clientId;\n      }\n    });\n\n    return targetClient;\n  }\n\n  initializeDistributedTask(targetClient, task, messageId) {\n    const transferList = Object.keys(task.hamsterFood)\n    .filter(key => task.hamsterFood[key] === 'Awaiting Transfer')\n    .reduce((transfers, key) => {\n      transfers[key] = 'Awaiting Transfer';\n      return transfers;\n    }, {});\n  \n\n    if (Object.keys(transferList).length > 0) {\n      let currentAwaitingTransfers = this.awaitingTransfers.get(targetClient);\n      if(!currentAwaitingTransfers) {\n        currentAwaitingTransfers = [];\n      }\n      currentAwaitingTransfers.push({\n        messageId: messageId,\n        transferList: transferList\n      });\n      this.awaitingTransfers.set(targetClient, currentAwaitingTransfers);\n      this.requestNextTransfer(targetClient, messageId);\n    } else {\n      this.runDistributedTask(task, targetClient);\n    }\n  }\n\n  requestNextTransfer(targetClient, messageId) {\n    const requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n    let lastRequestedTransfer = null;\n    if(requestedTransfers) {\n      lastRequestedTransfer = requestedTransfers.find(item => item.messageId === messageId);\n      if (lastRequestedTransfer) {\n        console.info(\"We already requested this transfer for this task\");\n        return;\n      }\n    }\n    const currentAwaitingTransfers = this.awaitingTransfers.get(targetClient);\n    if (currentAwaitingTransfers) {\n      const awaitingTransfer = currentAwaitingTransfers.find(item => item.messageId === messageId);\n      if (awaitingTransfer) {\n        this.requestTransferFromList(awaitingTransfer, messageId, targetClient);\n      }\n    }\n  }\n  \n  requestTransferFromList(awaitingTransfer, messageId, targetClient) {\n    const transferKeys = Object.keys(awaitingTransfer.transferList);\n    if (transferKeys.length > 0) {\n      const nextKey = transferKeys.find(key => awaitingTransfer.transferList[key] === 'Awaiting Transfer');\n      if (nextKey) {\n        this.updateTransferStatus(targetClient, messageId, nextKey, 'Requested Transfer');\n        this.requestDataTransfer(nextKey, messageId, targetClient);\n      }\n    }\n  }\n  \n  updateTransferStatus(targetClient, messageId, key, status) {\n    // Get the current awaitingTransfers array for the target client\n    const currentAwaitingTransfers = this.awaitingTransfers.get(targetClient);\n    \n    if (!currentAwaitingTransfers) {\n      console.error(`Hamsters.js ${this.hamsters.version} no awaiting transfers found for ${targetClient}`);\n      return;\n    }\n  \n    // Find the correct awaitingTransfer object by messageId\n    const awaitingTransfer = currentAwaitingTransfers.find(item => item.messageId === messageId);\n  \n    if (!awaitingTransfer) {\n      console.error(`Hamsters.js ${this.hamsters.version} no awaiting transfer found for messageId ${messageId}`);\n      return;\n    }\n  \n    // Update the status of the transfer key in the transferList\n    awaitingTransfer.transferList[key] = status;\n  \n    // Set the updated awaitingTransfers back to the client\n    this.awaitingTransfers.set(targetClient, currentAwaitingTransfers);\n  }\n  \n  \n  handleTransferResponse(targetClient, transferData) {\n    let requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n  \n    if (!requestedTransfers || requestedTransfers.length === 0) {\n      console.error(`Hamsters.js ${this.hamsters.version} received transfer response but no transfer was requested for ${targetClient}`);\n      return;\n    }\n  \n    const currentRequestedTransfer = requestedTransfers[0]; // Always get the first requested transfer\n    const key = currentRequestedTransfer.key;\n    const messageId = currentRequestedTransfer.messageId || null;\n    const responseId = currentRequestedTransfer.responseId || null;\n  \n    if (responseId) {\n      // This is an output transfer\n      const clientPromises = this.pendingPromises.get(targetClient);\n      if (clientPromises) {\n        for (const [promiseMessageId, promiseDetails] of clientPromises) {\n          if (promiseDetails.responseId === responseId) {\n            const output = this.convertFromArrayBuffer(transferData, key);\n            promiseDetails.resolve(output);\n            clientPromises.delete(promiseMessageId);\n            if (clientPromises.size === 0) {\n              this.pendingPromises.delete(targetClient);\n            }\n            break;\n          }\n        }\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending promises found for ${targetClient}`);\n      }\n    } else {\n      // This is an input transfer\n      const pendingTasks = this.pendingTasks.get(targetClient);\n      if (pendingTasks) {\n        const currentTaskIndex = pendingTasks.findIndex(item => item.messageId === messageId);\n  \n        if (currentTaskIndex > -1) {\n          const currentTask = pendingTasks[currentTaskIndex];\n          currentTask.hamsterFood[key] = this.convertFromArrayBuffer(transferData, key);\n  \n          const stillAwaiting = Object.values(currentTask.hamsterFood).some(value => value === 'Awaiting Transfer');\n  \n          if (stillAwaiting) {\n            this.requestNextTransfer(targetClient, messageId);\n          } else {\n            // Remove only the current task from the pendingTasks array\n            pendingTasks.splice(currentTaskIndex, 1);\n  \n            // If there are no more tasks for this client, clean up the pendingTasks map\n            if (pendingTasks.length === 0) {\n              this.pendingTasks.delete(targetClient);\n            } else {\n              this.pendingTasks.set(targetClient, pendingTasks); // Update remaining pending tasks\n            }\n  \n            // Run the task after all transfers have been completed\n            this.runDistributedTask(currentTask, targetClient);\n          }\n        } else {\n          console.warn(`Hamsters.js ${this.hamsters.version} no pending task found for targetClient: ${targetClient} and messageId: ${messageId}`);\n        }\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending task found for targetClient: ${targetClient} and messageId: ${messageId}`);\n      }\n    }\n  \n    // Cleanup requested transfers\n    requestedTransfers = requestedTransfers.slice(1); // Removes the first item (currentRequestedTransfer)\n    if (requestedTransfers.length === 0) {\n      this.lastRequestedTransfers.delete(targetClient);\n    } else {\n      this.lastRequestedTransfers.set(targetClient, requestedTransfers); // Update remaining transfers\n    }\n  \n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} processed transfer response for ${key} from ${targetClient}`);\n    }\n  } \n  \n  measureLatency(targetClient) {\n    const startTime = performance.now();\n    this.sendPing(targetClient, startTime);\n  }\n\n  sendPing(targetClient, startTime) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'ping', startTime }));\n    }\n  }\n\n  handlePing(targetClient, startTime) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify({ type: 'pong', startTime }));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent pong to ${targetClient}`);\n      }\n    }\n  }\n\n  handlePong(targetClient, startTime) {\n    const latency = performance.now() - startTime;\n    const clientInfo = this.clientInfo.get(targetClient) || {};\n    clientInfo.latency = latency;\n    this.clientInfo.set(targetClient, clientInfo);\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} received pong from ${targetClient} with latency: ${latency.toFixed(2)}ms`);\n    }\n  }\n\n  runDistributedTask(taskMessage, targetClient) {\n    let task = taskMessage.task;\n    task.targetClient = targetClient;\n    task.messageId = taskMessage.messageId;\n    task.input = taskMessage.hamsterFood;\n    task.type = 'task-response';\n    console.log(\"RUNNING DISTRIBUTED TASK\");\n    this.hamsters.scheduleTask(task, this.returnDistributedOutput, this.returnDistributedOutput);\n  }\n  \n  sendDataResponse(responseData) {\n    const { targetClient, messageId, output } = responseData;\n    const responseId = this.generateUniqueId();\n    this.initializeOutputTransfer(targetClient, output, messageId, responseId);\n  }\n\n  initializeOutputTransfer(targetClient, output, messageId, responseId) {\n    this.pendingOutputs.set(responseId, { targetClient, output, messageId });\n  \n    const initialResponse = {\n      type: 'task-response',\n      messageId,\n      responseId,\n      awaitingTransfers: true\n    };\n  \n    this.sendData({ targetClient, data: initialResponse });\n  \n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} initialized output transfer for ${targetClient} (responseId: ${responseId})`);\n    }\n  }\n\n  handleOutputTransferRequest(targetClient, message) {\n    const { responseId } = message;\n    const pendingOutput = this.pendingOutputs.get(responseId);\n\n    if (pendingOutput && pendingOutput.targetClient === targetClient) {\n      const arrayBuffer = this.getArrayBuffer(pendingOutput.output);\n      this.sendBlobData({ targetClient, data: arrayBuffer, dataType: 'arrayBuffer' });\n      this.pendingOutputs.delete(responseId);\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent output transfer for ${targetClient} (responseId: ${responseId})`);\n      }\n    } else {\n      console.error(`Hamsters.js ${this.hamsters.version} received unexpected output transfer request for ${targetClient}`);\n    }\n  }\n\n  getArrayBuffer(transferredData) {\n    if (ArrayBuffer.isView(transferredData)) {\n      return transferredData.buffer;\n    }\n    if (transferredData instanceof ArrayBuffer) {\n      return transferredData;\n    }\n    return new Uint8Array(transferredData).buffer\n  }\n\n  convertFromArrayBuffer(buffer, key) {\n    const originalArray = new Uint8Array(buffer);\n    if(this.hamsters.habitat.node) { //Node.js has stricter security and won't allow the transfer of buffers sent using node.js webrtc channels, clone into new array first\n      const newArrayBuffer = new ArrayBuffer(originalArray.byteLength);\n      const newTypedArray = new Uint8Array(newArrayBuffer);\n      newTypedArray.set(originalArray);\n      return newTypedArray;\n    }\n    return originalArray;\n  }\n\n  sendData({ targetClient, data }) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(JSON.stringify(data));\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent data to: ${targetClient}`);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: ${targetClient}`);\n      }\n    }\n  }\n\n  sendBlobData({targetClient, data, dataType}) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      sendChannel.send(data);\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent blob data to: ${targetClient}`);\n      }\n    } else {\n      if (this.hamsters.habitat.debug) {\n        console.error(`Hamsters.js ${this.hamsters.version} send channel is not open for targetClient: ${targetClient}`);\n      }\n    }\n  }\n\n  // Function to convert Blob to ArrayBuffer using Fetch API\n  async blobToArrayBuffer(blob) {\n    if (typeof fetch === 'function') { // Check if Fetch API is available\n        const response = new Response(blob);\n        return await response.arrayBuffer();\n    } else {\n        throw new Error('Fetch API is not supported in this environment.');\n    }\n  }\n\n  async onReceiveMessageCallback(targetClient, messageData) {\n    if(messageData instanceof Blob) {\n      messageData = await this.blobToArrayBuffer(messageData);\n    }\n    if (messageData instanceof ArrayBuffer) {\n      this.handleTransferResponse(targetClient, messageData);\n    } else if (typeof messageData === 'string') {\n      let incomingMessage;\n      try {\n        incomingMessage = JSON.parse(messageData);\n        this.handleIncomingMessage(targetClient, incomingMessage);\n      } catch (error) {\n        console.error(`Hamsters.js ${this.hamsters.version} error parsing message:`, error);\n      }\n    } else {\n      console.log(\"Received unexpected data type:\", targetClient, messageData);\n    }\n  }\n\n  handleIncomingMessage(targetClient, incomingMessage) {\n    const handlers = {\n      'transfer-request': this.fulfillTransferRequest.bind(this),\n      'task-request': this.handleTaskRequest.bind(this),\n      'transfer-response': this.processTransferResponse.bind(this),\n      'output-transfer-request': this.handleOutputTransferRequest.bind(this),\n      'task-response': this.handleTaskResponse.bind(this),\n      'ping': (client, message) => this.handlePing(client, message.startTime),\n      'pong': (client, message) => this.handlePong(client, message.startTime)\n    };\n\n    const handler = handlers[incomingMessage.type];\n    if (handler) {\n      handler(targetClient, incomingMessage);\n    } else {\n      console.log(`Hamsters.js ${this.hamsters.version} unknown message received from: ${targetClient}`);\n    }\n  }\n\n  handleTaskRequest(targetClient, incomingMessage) {\n    let currentPendingTasks = this.pendingTasks.get(targetClient);\n    if(!currentPendingTasks) {\n      currentPendingTasks = [];\n    }\n    currentPendingTasks.push(incomingMessage);\n    this.pendingTasks.set(targetClient, currentPendingTasks);\n    const awaitingTransfers = Object.values(incomingMessage.hamsterFood).some(value => value === 'Awaiting Transfer');\n    if (awaitingTransfers) {\n      this.initializeDistributedTask(targetClient, incomingMessage, incomingMessage.messageId);\n    } else {\n      this.runDistributedTask(incomingMessage, targetClient);\n    }\n  }\n\n  startPromiseCleanupInterval() {\n    setInterval(() => this.cleanupStalePendingPromises(), 30000); // Check every 30 seconds\n  }\n  \n  cleanupStalePendingPromises() {\n    const now = Date.now();\n    for (const [targetClient, clientPromises] of this.pendingPromises) {\n      for (const [messageId, promiseDetails] of clientPromises) {\n        if (now - promiseDetails.timestamp > this.promiseTimeoutDuration) {\n          promiseDetails.reject(new Error('Task timed out'));\n          clientPromises.delete(messageId);\n        }\n      }\n      if (clientPromises.size === 0) {\n        this.pendingPromises.delete(targetClient);\n      }\n    }\n  }\n\n  handleTaskResponse(targetClient, message) {\n    const { messageId, responseId, awaitingTransfers, output } = message;\n    const clientPromises = this.pendingPromises.get(targetClient);\n    \n    if (clientPromises && clientPromises.has(messageId)) {\n      const promiseDetails = clientPromises.get(messageId);\n      \n      if (awaitingTransfers && responseId) {\n        promiseDetails.state = 'awaitingTransfer';\n        promiseDetails.responseId = responseId;\n        this.requestOutputTransfer(targetClient, responseId, messageId);\n      } else {\n        promiseDetails.resolve(output);\n        clientPromises.delete(messageId);\n        if (clientPromises.size === 0) {\n          this.pendingPromises.delete(targetClient);\n        }\n      }\n    } else {\n      console.warn(`Received a message from ${targetClient} but no matching promise found with messageId ${messageId}`);\n    }\n  }\n\n  requestOutputTransfer(targetClient, responseId, messageId) {\n    let requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n    if(!requestedTransfers) {\n      requestedTransfers = [];\n    }\n    const outputTransferRequest = {\n      type: 'output-transfer-request',\n      key: 'output',\n      responseId,\n      messageId\n    };\n    requestedTransfers.push(outputTransferRequest);\n    this.lastRequestedTransfers.set(targetClient, requestedTransfers);\n    this.sendData({ targetClient, data: outputTransferRequest });\n  }\n\n  requestDataTransfer(key, messageId, targetClient) {\n    let requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n    if(!requestedTransfers) {\n      requestedTransfers = [];\n    }\n    const message = {\n      type: 'transfer-request',\n      key: key,\n      messageId: messageId\n    };\n    requestedTransfers.push(message);\n    this.lastRequestedTransfers.set(targetClient, requestedTransfers);\n    this.sendData({targetClient, data: message});\n\n    // Update the status of the transfer item\n    const awaitingTransfersData = this.awaitingTransfers.get(targetClient);\n    if (awaitingTransfersData && awaitingTransfersData.messageId === messageId) {\n      awaitingTransfersData.transfers[key] = 'Requested Transfer';\n      this.awaitingTransfers.set(targetClient, awaitingTransfersData);\n    }\n\n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} requested transfer for ${key} from ${targetClient} (messageId: ${messageId})`);\n    }\n  }\n\n  fulfillTransferRequest(targetClient, incomingMessage) {\n    const { key, messageId, responseId } = incomingMessage;\n    const transferId = responseId || messageId;\n    const pendingTransferItems = this.pendingTransfers.get(transferId);\n\n    if (pendingTransferItems && pendingTransferItems[key]) {\n      const data = pendingTransferItems[key];\n      \n      // Get the ArrayBuffer efficiently based on data type\n      const arrayBuffer = this.getArrayBuffer(data);\n\n      // Send the data as ArrayBuffer\n      this.sendBlobData({ targetClient, data: arrayBuffer, dataType: 'arrayBuffer' });\n\n      if (this.hamsters.habitat.debug) {\n        console.log(`Hamsters.js ${this.hamsters.version} sent transfer response for ${key} (${responseId ? 'output' : 'input'}) to ${targetClient} (messageId: ${messageId})`);\n      }\n\n      // Clean up after sending\n      delete pendingTransferItems[key];\n      if (Object.keys(pendingTransferItems).length === 0) {\n        this.pendingTransfers.delete(transferId);\n      }\n    } else {\n      console.error(`No pending transfer found for ${key} (${responseId ? 'output' : 'input'}) for ${targetClient} (messageId: ${messageId})`);\n    }\n  }\n\n  processTransferResponse(targetClient, incomingMessage) {\n    const { key, data, messageId, responseId } = incomingMessage;\n  \n    if (responseId) {\n      // This is an output transfer\n      const pendingPromise = this.pendingPromises.get(messageId);\n      if (pendingPromise) {\n        pendingPromise.resolve(data);\n        this.pendingPromises.delete(messageId);\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending promise found for messageId: ${messageId}`);\n      }\n    } else {\n      // This is an input transfer\n      const pendingTasks = this.pendingTasks.get(targetClient);\n      if (pendingTasks) {\n        const currentTaskIndex = pendingTasks.findIndex(item => item.messageId === messageId);\n  \n        if (currentTaskIndex > -1) {\n          const currentTask = pendingTasks[currentTaskIndex];\n          currentTask.hamsterFood[key] = this.convertFromArrayBuffer(data);\n  \n          const stillAwaiting = Object.values(currentTask.hamsterFood).some(value => value === 'Awaiting Transfer');\n  \n          if (stillAwaiting) {\n            this.requestNextTransfer(targetClient, messageId);\n          } else {\n            // Remove only the current task from the pendingTasks array\n            pendingTasks.splice(currentTaskIndex, 1);\n  \n            // If there are no more tasks for this client, clean up the pendingTasks map\n            if (pendingTasks.length === 0) {\n              this.pendingTasks.delete(targetClient);\n            } else {\n              this.pendingTasks.set(targetClient, pendingTasks); // Update remaining pending tasks\n            }\n  \n            // Run the task after all transfers have been completed\n            this.runDistributedTask(currentTask, targetClient);\n          }\n        } else {\n          console.warn(`Hamsters.js ${this.hamsters.version} no pending task found for targetClient: ${targetClient} and messageId: ${messageId}`);\n        }\n      } else {\n        console.warn(`Hamsters.js ${this.hamsters.version} no pending task found for targetClient: ${targetClient} and messageId: ${messageId}`);\n      }\n    }\n  \n    // Cleanup requested transfers\n    const requestedTransfers = this.lastRequestedTransfers.get(targetClient);\n    if (requestedTransfers) {\n      requestedTransfers.shift(); // Remove the first item (FIFO)\n      if (requestedTransfers.length === 0) {\n        this.lastRequestedTransfers.delete(targetClient);\n      } else {\n        this.lastRequestedTransfers.set(targetClient, requestedTransfers); // Update remaining transfers\n      }\n    }\n  \n    if (this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} processed transfer response for ${key} from ${targetClient}`);\n    }\n  }  \n\n  onSendChannelStateChange(targetClient) {\n    const sendChannel = this.sendChannels.get(targetClient);\n    if (sendChannel && sendChannel.readyState === 'open') {\n      this.measureLatency(targetClient);\n    }\n    if (sendChannel && this.hamsters.habitat.debug) {\n      console.log(`Hamsters.js ${this.hamsters.version} send channel state changed for ${targetClient}: ${sendChannel.readyState}`);\n    }\n  }\n\n generateUniqueId() {\n  const timestamp = Date.now().toString(36);\n  const random = Math.random().toString(36).substr(2, 5);\n  this.messageCounter = (this.messageCounter + 1) % 1000000;\n  return `${timestamp}-${random}-${this.messageCounter.toString(36).padStart(5, '0')}`;\n}\n\n  onCreateSessionDescriptionError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to create session description: ${error}`);\n    }\n  }\n\n  onAddIceCandidateError(error) {\n    if (this.hamsters.habitat.debug) {\n      console.error(`Hamsters.js ${this.hamsters.version} failed to add ICE candidate: ${error}`);\n    }\n  }\n}\n\nexport default Distribute;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Observable {\n  constructor(initialData = {}) {\n    this.data = Array.isArray(initialData) ? [...initialData] : { ...initialData };\n    this.events = {};\n  }\n\n  // Allow listeners to register for specific events\n  on(event, callback) {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  }\n\n  // Notify listeners about the event\n  emit(event, ...args) {\n    if (this.events[event]) {\n      this.events[event].forEach(callback => callback(...args));\n    }\n  }\n\n  emitEvents(emitType, eventData) {\n    if(emitType !== 'change') {\n      this.emit(emitType, eventData);\n    }\n    this.emit('change', eventData);\n  }\n\n  set(key, value, emitType = 'change') {\n    const isNewKey = !this.data[key];  // Check if it's a new entry\n\n    if (typeof key === 'string') {\n      const keys = key.split('.');\n      let current = this.data;\n      for (let i = 0; i < keys.length - 1; i++) {\n        current = current[keys[i]];\n      }\n      current[keys[keys.length - 1]] = value;\n    } else if (typeof key === 'object') {\n      this.data[key] = value;\n    }\n\n    this.emitEvents(emitType, this.data);\n\n    return value;\n  }\n\n  setAll(data) {\n    this.data = data;\n  }\n\n  get(key) {\n    return this.data[key];\n  }\n\n  push(...items) {\n    this.data.push(...items);\n    this.emitEvents('change', this.data);\n  }\n\n  pop(emitType = 'change') {\n    const item = this.data.pop();\n    this.emitEvents(emitType, this.data);\n    return item;\n  }\n\n  shift(emitType = 'change') {\n    let item = this.data.shift();\n    this.emitEvents(emitType, this.data);\n    return item;\n  }\n\n  splice(start, deleteCount, ...items) {\n    const result = this.data.splice(start, deleteCount, ...items);\n    this.emitEvents('change', this.data);\n    return result;\n  }\n\n  indexOf(item) {\n    return this.data.indexOf(item);\n  }\n\n  length() {\n    return this.data.length;\n  }\n\n  delete(property, emitType = 'change') {\n    if (!Array.isArray(this.data)) {\n      delete this.data[property];\n      this.emitEvents(emitType, this.data);\n    }\n  }\n\n  getData() {\n    return this.data;\n  }\n}\n\nexport default Observable;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n//Core Functionality\nimport Habitat from './core/habitat';\nimport Pool from './core/pool';\nimport Data from './core/data';\nimport Task from './core/task';\n\n//Worker Scaffolds\nimport Legacy from './scaffold/legacy';\nimport Regular from './scaffold/regular';\nimport Shared from './scaffold/shared';\n\n//Features\nimport Memoize from './feature/memoize';\nimport Distribute from './feature/distribute';\nimport Observable from './feature/observable';\n\nclass hamstersjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.version = '5.6.3';\n    this.run = this.hamstersRun.bind(this);\n    this.promise = this.hamstersPromise.bind(this);\n    this.init = this.initializeLibrary.bind(this);\n    this.data = {};\n    this.pool = {};\n    this.scaffold = {};\n    this.habitat = {};\n    this.memoize = {};\n  }\n\n  /**\n  * @function inititializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    const start = performance.now();\n    this.observable = Observable;\n    this.data = new Data(this);\n    this.pool = new Pool(this);\n    this.scaffold = {\n      legacy: new Legacy(),\n      regular: new Regular(),\n      shared: new Shared()\n    };\n    this.habitat = new Habitat(this);\n    this.memoize = new Memoize(this, 100); //Set a maximum of 100 memoized function results, LRU cache\n    this.distribute = new Distribute(this);\n    this.processStartOptions(startOptions);\n    \n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      this.pool.spawnHamsters(this.habitat.maxThreads);\n    }\n    this.maxThreads = this.habitat.maxThreads;\n\n    if(this.habitat.relay) {\n      console.info(`Hamsters.js ${this.version} establishing connection to relay`);\n      this.distribute.establishConnection();\n    }\n    const end = performance.now();\n    console.info(`Hamsters.js ${this.version} initialized using up to ${this.habitat.maxThreads} threads in ${end - start}ms`);\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      for (const key of Object.keys(startOptions)) {\n        if (this.habitat.keys.includes(key.toLowerCase())) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          if(key === 'scaffold') {\n            this.scaffold.custom = startOptions[key];\n          } else {\n            this[key] = startOptions[key];\n          }\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    let forceLegacyMode = (typeof startOptions !== 'undefined' && typeof startOptions.legacy !== 'undefined');\n    if (forceLegacyMode) {\n      forceLegacyMode = startOptions.legacy;\n    }\n    if (typeof this.habitat.Worker === 'function' && !forceLegacyMode) {\n      this.habitat.legacy = this.habitat.isIE;\n    }\n  }\n\n  /**\n   * @async\n   * @function scheduleTask - Schedules a new function to be processed by the library\n   * @param {object} task - Provided library execution options\n   * @param {function} resolve - Parent function promise resolve method\n   * @param {function} reject - Parent function promise reject method\n   * @return {Promise} Promise object on completion\n   */\n  scheduleTask(task, resolve, reject) {\n    if (task.input.memoize) {\n      // Pass the task object to the memoized function\n      const memoizedFunction = this.memoize.memoize(() => this.pool.scheduleTask(task, resolve, reject));\n      return memoizedFunction(task).then(resolve).catch(reject);\n    }\n    return this.pool.scheduleTask(task, resolve, reject);\n  }\n\n  /**\n   * @async\n   * @function hamstersPromise - Calls library functionality using async promises\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   * @return {Promise} Promise resolving with results from functionToRun\n   */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      this.scheduleTask(new Task(this, params, functionToRun), resolve, reject);\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    this.scheduleTask(new Task(this, params, functionToRun), onSuccess, onError);\n  }\n}\n\nexport default new hamstersjs();\n"],"names":["root","factory","exports","module","define","amd","this","Legacy","constructor","hamsters","scaffold","params","resolve","reject","rtn","data","dataType","habitat","reactNative","self","node","isIE","eval","hamstersJob","Regular","handleDataType","sharedArray","typedArrayFromBuffer","getTransferableObjects","buffer","types","Uint32Array","Uint16Array","Uint8Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","returnResponse","buffers","length","postMessage","obj","transferableObjects","Set","typedArrayTypes","globalContext","window","allTypes","prop","hasOwnProperty","type","includes","add","Array","from","onmessage","message","index","sharedBuffer","bind","Shared","addEventListener","incomingConnection","port","ports","start","incomingMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","e","prototype","call","Habitat","debug","importScripts","relay","memoize","persistence","browser","isBrowser","webWorker","isWebWorker","isNode","isReactNative","shell","isShell","transferable","supportsTransferableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isInternetExplorer","selectHamsterWheel","sharedWorker","locateSharedWorkerObject","locateBlobBuilder","findAvailableBlobBuilder","legacy","isLegacyEnvironment","Worker","locateWorkerObject","maxThreads","determineGlobalThreads","keys","getHabitatKeys","max","navigator","hardwareConcurrency","isFirefox","os","cpus","userAgent","toLowerCase","indexOf","SharedWorker","process","product","isLegacy","supportsSharedWorkers","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","createDataBlob","textContent","Blob","blob","append","getBlob","generateWorkerBlob","workerLogic","URL","createObjectURL","generateWorkerString","toString","SharedArrayBuffer","Proxy","custom","encodeURIComponent","regular","Pool","threads","observable","running","pending","fetchHamster","getAvailableThread","addWorkToPending","task","scheduler","metrics","count","enqueued_at","Date","now","push","processQueuedItem","hamster","item","dequeued_at","runTask","threadId","spawnHamster","keepTrackOfThread","id","workers","spawnHamsters","prepareMeal","hamsterFood","array","input","getSubArrayFromIndex","excludedKeys","has","legacyWheel","pool","trainHamster","feedHamster","hamsterWheel","returnOutputAndRemoveTask","output","processDataType","aggregate","aggregateThreadOutputs","sort","sortOutput","completedAt","startedAt","started_at","completed_at","console","info","distribute","removeFromRunning","splice","processReturn","JSON","parse","addThreadOutputWithIndex","setOnMessage","onThreadResponse","onmessageerror","onerror","once","error","shift","terminate","scheduleTask","distributeTask","i","indexes","Data","getSubArrayUsingIndex","getSubArrayIndexes","calculateIndexes","sortTaskOutput","prepareFunction","prepareWorkerTask","messageWorkerThread","getBufferSize","createSharedBuffer","getDataType","setupSharedArrayBuffer","stringify","typedArrayBuffers","otherTransferables","global","concat","functionBody","functionString","String","isAsync","trim","startsWith","substring","lastIndexOf","arr","order","a","b","reverse","byteLength","set","reduce","len","bufferLength","offset","outputLength","n","end","segmentSize","Math","floor","startIndex","endIndex","getTransferList","transferList","forEach","isArray","transferCount","inputArray","slice","Task","functionToRun","transfers","request","send","setupLegacyTask","setupModernTask","setupDebugMetrics","created_at","setupThreadMetrics","threadMetrics","NodeStore","maxSize","cache","Map","value","delete","Promise","size","oldestKey","next","clear","WebStore","dbName","storeName","db","initDB","indexedDB","open","event","target","onupgradeneeded","result","objectStoreNames","contains","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","transaction","updateTimestamp","then","catch","checkSize","put","timestamp","countRequest","evictOldest","openCursor","cursor","Memoize","store","func","generateTaskKey","cachedResult","applyFunc","hashCode","str","chr","hash","charCodeAt","args","apply","Distribute","localConnection","remoteConnections","clientInfo","sendChannels","pcConstraint","ws","clientId","pendingPromises","pendingTasks","pendingTransfers","awaitingTransfers","lastRequestedTransfers","pendingOutputs","returnDistributedOutput","sendDataResponse","establishConnection","initWebSocket","lastHeartbeat","heartBeatInterval","deletedPromises","heartBeatTimeout","messageCounter","generatedMessageIds","promiseTimeoutDuration","startPromiseCleanupInterval","WebSocket","onopen","version","logicalCores","sendHeartBeat","handleWebSocketMessage","onclose","handler","handleClientReconnect","updateClientList","handleOffer","handleAnswer","handleCandidate","interval","setInterval","clientListMessage","clients","newClientIds","map","client","createConnection","getData","handleClientDisconnect","close","newClientId","log","targetClient","RTCPeerConnection","iceServers","urls","onicecandidate","candidate","ondatachannel","dataChannelCallback","findOrCreateChannel","createOffer","desc","setLocalDescription","offer","onCreateSessionDescriptionError","remoteConnection","setRemoteDescription","RTCSessionDescription","createAnswer","answer","sendChannel","dataConstraint","ordered","maxRetransmits","random","createDataChannel","onSendChannelStateChange","onReceiveMessageCallback","dataChannel","channel","currentTargetClient","storeClientConnectionInfo","connection","addIceCandidate","RTCIceCandidate","onAddIceCandidateError","getDistributedClient","messageId","generateUniqueId","preparedList","distributedSubTask","state","sendData","sendChannelKeys","warn","minLatency","Infinity","readyState","latency","initializeDistributedTask","filter","currentAwaitingTransfers","requestNextTransfer","runDistributedTask","requestedTransfers","lastRequestedTransfer","find","awaitingTransfer","requestTransferFromList","transferKeys","nextKey","updateTransferStatus","requestDataTransfer","status","handleTransferResponse","transferData","currentRequestedTransfer","responseId","clientPromises","promiseMessageId","promiseDetails","convertFromArrayBuffer","currentTaskIndex","findIndex","currentTask","values","some","measureLatency","startTime","performance","sendPing","handlePing","handlePong","toFixed","taskMessage","responseData","initializeOutputTransfer","initialResponse","handleOutputTransferRequest","pendingOutput","arrayBuffer","getArrayBuffer","sendBlobData","transferredData","ArrayBuffer","isView","originalArray","newArrayBuffer","newTypedArray","_ref","_ref2","blobToArrayBuffer","fetch","response","Response","Error","messageData","handleIncomingMessage","fulfillTransferRequest","handleTaskRequest","processTransferResponse","handleTaskResponse","ping","pong","currentPendingTasks","cleanupStalePendingPromises","requestOutputTransfer","outputTransferRequest","awaitingTransfersData","transferId","pendingTransferItems","pendingPromise","substr","padStart","Observable","initialData","arguments","events","on","callback","emit","_len","_key","emitEvents","emitType","eventData","split","current","setAll","pop","deleteCount","_len2","items","_key2","property","hamstersjs","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","shared","processStartOptions","forceLegacyMode","memoizedFunction","onSuccess","onError"],"sourceRoot":""}